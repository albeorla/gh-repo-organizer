[tool.poetry]
name = "gh-repo-organizer"
version = "0.1.0"
description = "A tool to organize GitHub repositories."
authors = ["Albert Orlando <albertjorlando@gmail.com>"]
readme = "README.md"
license = "MIT"
repository = "https://github.com/albeorla/gh-repo-organizer"
packages = [{include = "repo_organizer", from = "src"}]

[tool.poetry.dependencies]
python = ">=3.12,<4.0"
GitPython = "3.1.44"
langchain = "0.3.24"
langchain_anthropic = "0.3.12"
langchain_core = "0.3.56"
pydantic = "2.11.3"
python-dotenv = "1.1.0"
rich = "^13.0.0"
tenacity = "8.5.0"
tqdm = "4.67.1"
typer = "<0.9.0"
shellingham = "^1.5.4"
requests = "^2.31.0"
pydantic-settings = "^2.9.1"
hypothesis = "^6.131.9"

[tool.poetry.group.dev.dependencies]
ruff = ">=0.1.8"
pytest = "^8.3.5"
pytest-cov = "^4.1.0"
pytest-asyncio = "^0.26.0"
pytest-mock = "^3.12.0"
types-requests = "^2.31.0"

[tool.poetry.scripts]
# Main CLI entry point
repo-analyzer = "repo_organizer.cli:app"

# Analysis commands
analyze = "repo_organizer.cli:app analyze"
analyze-repo = "repo_organizer.cli:app analyze --single-repo"
analyze-all = "repo_organizer.cli:app analyze --force"

# Report management
reports = "repo_organizer.cli:app reports"
reports-list = "repo_organizer.cli:app reports list"
reports-summary = "repo_organizer.cli:app reports summary"

# Log management
logs = "repo_organizer.cli:app logs"
logs-all = "repo_organizer.cli:app logs all"
logs-latest = "repo_organizer.cli:app logs latest"

# Cleanup and maintenance
cleanup = "repo_organizer.cli:app cleanup"
cleanup-force = "repo_organizer.cli:app cleanup --force"
reset = "repo_organizer.cli:app reset"
reset-force = "repo_organizer.cli:app reset --force"

# Repository actions
actions = "repo_organizer.cli:app actions"
actions-delete = "repo_organizer.cli:app actions delete"
actions-archive = "repo_organizer.cli:app actions archive"
actions-extract = "repo_organizer.cli:app actions extract"
actions-pin = "repo_organizer.cli:app actions pin"
actions-execute = "repo_organizer.cli:app actions execute"

# Development tools
test = "pytest:main"
lint = "repo_organizer.cli:app dev lint"
format = "repo_organizer.cli:app dev format"
check = "repo_organizer.cli:app dev check"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.ruff]
line-length = 88
target-version = "py312"
extend-exclude = [".venv", "build", "dist"]

# Enable all rules by default, then configure specific rules
select = ["ALL"]
ignore = [
    "D100",  # Missing docstring in public module
    "D104",  # Missing docstring in public package
    "ANN101",  # Missing type annotation for self
    "ANN102",  # Missing type annotation for cls
]

[tool.ruff.per-file-ignores]
"tests/**/*" = [
    "S101",   # Use of assert in tests is fine
    "D103",   # Missing docstring in public function (for test functions)
    "PLR2004", # Magic numbers in tests are fine
]

[tool.ruff.mccabe]
max-complexity = 10

[tool.ruff.pydocstyle]
convention = "google"

[tool.pytest.ini_options]
minversion = "8.0"
addopts = "-ra -q"
testpaths = ["tests"]
asyncio_mode = "auto"
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::UserWarning",
]

[tool.poetry.group.scripts]
optional = true

[tool.poetry.group.scripts.dependencies]
pre-commit = "^3.7.0"