[project]
name = "gh-repo-organizer"
version = "0.1.0"
description = "A tool to organize GitHub repositories."
authors = [{name = "Albert Orlando", email = "albertjorlando@gmail.com"}]
license = {text = "MIT"}
readme = "README.md"
requires-python = ">=3.12,<4.0"
repository = "https://github.com/albeorla/gh-repo-organizer"

[project.scripts]
repo = "repo_organizer.cli:app"
ro = "repo_organizer.cli:app"
analyze-repo = "scripts.analyze_repo:main"

[tool.poetry]
name = "gh-repo-organizer"
version = "0.1.0"
description = "A tool to organize GitHub repositories."
authors = ["Albert Orlando <albertjorlando@gmail.com>"]
readme = "README.md"
license = "MIT"
repository = "https://github.com/albeorla/gh-repo-organizer"
packages = [{include = "repo_organizer", from = "src"}]

[tool.poetry.dependencies]
python = ">=3.12,<4.0"
GitPython = "3.1.44"
langchain = "0.3.24"
langchain_anthropic = "0.3.12"
langchain_core = "0.3.56"
pydantic = "2.11.3"
python-dotenv = "1.1.0"
rich = "^13.0.0"
tenacity = "8.5.0"
tqdm = "4.67.1"
typer = "^0.9.0"
shellingham = "^1.5.4"
requests = "^2.31.0"
pydantic-settings = "^2.9.1"
hypothesis = "^6.131.9"

[tool.poetry.group.dev.dependencies]
ruff = ">=0.1.8"
pytest = "^8.3.5"
pytest-cov = "^4.1.0"
pytest-asyncio = "^0.26.0"
pytest-mock = "^3.12.0"
types-requests = "^2.31.0"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.ruff]
target-version = "py312"
line-length = 100

[tool.ruff.lint]
# Start with essential rules
select = [
    "E",   # pycodestyle errors
    "F",   # pyflakes
    "I",   # isort
    "N",   # pep8-naming
    "B",   # flake8-bugbear
    "UP",  # pyupgrade
    "RUF", # ruff-specific rules
]

# Add some additional useful rules
extend-select = [
    "C4",  # flake8-comprehensions
    "SIM", # flake8-simplify
    "TCH", # flake8-type-checking
]

# Ignore rules that are too strict or not relevant
ignore = [
    "D100",    # Missing docstring in public module
    "D104",    # Missing docstring in public package
    "FBT001",  # Boolean positional argument
    "FBT002",  # Boolean default argument
    "RUF001",  # String contains ambiguous unicode characters
    "RUF002",  # Docstring contains ambiguous unicode characters
    "RUF003",  # Comment contains ambiguous unicode characters
    "RUF009",  # Do not perform function call in dataclass defaults
    "B008",    # Do not perform function calls in argument defaults
    "B904",    # Within an except clause, raise with from
    "SIM105",  # Use contextlib.suppress instead of try-except-pass
    "E501",    # Line too long
]

# Per-file-ignores
[tool.ruff.lint.per-file-ignores]
"tests/**/*.py" = [
    "D100",    # Missing docstring in public module
    "D101",    # Missing docstring in public class
    "D102",    # Missing docstring in public method
    "D103",    # Missing docstring in public function
    "D104",    # Missing docstring in public package
    "S101",    # Use of assert detected
]
"tests/debug_*.py" = [
    "E402",    # Module level import not at top of file - needed for path modification
]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.ruff.lint.isort]
combine-as-imports = true
force-wrap-aliases = true

[tool.ruff.lint.mccabe]
max-complexity = 12

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.pytest.ini_options]
minversion = "8.0"
addopts = "-ra -q"
testpaths = ["tests"]
asyncio_mode = "auto"
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::UserWarning",
]




[tool.poetry.group.scripts]
optional = true

[tool.poetry.group.scripts.dependencies]
pre-commit = "^3.7.0"
