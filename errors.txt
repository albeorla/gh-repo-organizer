src/repo_organizer/bootstrap/application_factory.py:32:9: PLR0913 Too many arguments in function definition (7 > 5)
   |
31 |     @classmethod
32 |     def create_application(
   |         ^^^^^^^^^^^^^^^^^^ PLR0913
33 |         cls,
34 |         force_analysis: bool = False,
   |

src/repo_organizer/bootstrap/application_factory.py:34:9: FBT001 Boolean-typed positional argument in function definition
   |
32 |     def create_application(
33 |         cls,
34 |         force_analysis: bool = False,
   |         ^^^^^^^^^^^^^^ FBT001
35 |         output_dir: str | None = None,
36 |         max_repos: int | None = None,
   |

src/repo_organizer/bootstrap/application_factory.py:34:9: FBT002 Boolean default positional argument in function definition
   |
32 |     def create_application(
33 |         cls,
34 |         force_analysis: bool = False,
   |         ^^^^^^^^^^^^^^ FBT002
35 |         output_dir: str | None = None,
36 |         max_repos: int | None = None,
   |

src/repo_organizer/bootstrap/application_factory.py:40:9: FBT001 Boolean-typed positional argument in function definition
   |
38 |         env_file: str | None = None,
39 |         progress_callback: Callable[[int, int, str | None], None] | None = None,
40 |         quiet_mode: bool = False,
   |         ^^^^^^^^^^ FBT001
41 |     ) -> ApplicationRunner:
42 |         """Create a fully configured application instance.
   |

src/repo_organizer/bootstrap/application_factory.py:40:9: FBT002 Boolean default positional argument in function definition
   |
38 |         env_file: str | None = None,
39 |         progress_callback: Callable[[int, int, str | None], None] | None = None,
40 |         quiet_mode: bool = False,
   |         ^^^^^^^^^^ FBT002
41 |     ) -> ApplicationRunner:
42 |         """Create a fully configured application instance.
   |

src/repo_organizer/bootstrap/application_factory.py:71:31: PTH100 `os.path.abspath()` should be replaced by `Path.resolve()`
   |
69 |             import os
70 |
71 |             expanded_output = os.path.abspath(
   |                               ^^^^^^^^^^^^^^^ PTH100
72 |                 os.path.expanduser(os.path.expandvars(output_dir)),
73 |             )
   |

src/repo_organizer/bootstrap/application_factory.py:72:17: PTH111 `os.path.expanduser()` should be replaced by `Path.expanduser()`
   |
71 |             expanded_output = os.path.abspath(
72 |                 os.path.expanduser(os.path.expandvars(output_dir)),
   |                 ^^^^^^^^^^^^^^^^^^ PTH111
73 |             )
74 |             settings.output_dir = expanded_output
   |

src/repo_organizer/bootstrap/application_factory.py:79:13: PTH103 `os.makedirs()` should be replaced by `Path.mkdir(parents=True)`
   |
77 |             # a failure before the ApplicationRunner is instantiated we do
78 |             # not lose analysis results because of a missing folder.
79 |             os.makedirs(settings.output_dir, exist_ok=True)
   |             ^^^^^^^^^^^ PTH103
80 |         if max_repos:
81 |             settings.max_repos = max_repos
   |

src/repo_organizer/bootstrap/application_factory.py:95:9: PTH103 `os.makedirs()` should be replaced by `Path.mkdir(parents=True)`
   |
93 |         # Use logs directory from settings
94 |         logs_dir = settings.logs_dir
95 |         os.makedirs(logs_dir, exist_ok=True)
   |         ^^^^^^^^^^^ PTH103
96 |         timestamp = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
97 |         log_file = os.path.join(logs_dir, f"analysis_log_{timestamp}.txt")
   |

src/repo_organizer/bootstrap/application_factory.py:96:21: DTZ005 `datetime.datetime.now()` called without a `tz` argument
   |
94 |         logs_dir = settings.logs_dir
95 |         os.makedirs(logs_dir, exist_ok=True)
96 |         timestamp = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
   |                     ^^^^^^^^^^^^^^^^^^^^^^^ DTZ005
97 |         log_file = os.path.join(logs_dir, f"analysis_log_{timestamp}.txt")
98 |         logger = Logger(
   |
   = help: Pass a `datetime.timezone` object to the `tz` parameter

src/repo_organizer/bootstrap/application_factory.py:97:20: PTH118 `os.path.join()` should be replaced by `Path` with `/` operator
   |
95 |         os.makedirs(logs_dir, exist_ok=True)
96 |         timestamp = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
97 |         log_file = os.path.join(logs_dir, f"analysis_log_{timestamp}.txt")
   |                    ^^^^^^^^^^^^ PTH118
98 |         logger = Logger(
99 |             log_file,
   |

src/repo_organizer/bootstrap/application_runner.py:29:9: PLR0913 Too many arguments in function definition (8 > 5)
   |
27 |     """
28 |
29 |     def __init__(
   |         ^^^^^^^^ PLR0913
30 |         self,
31 |         settings,
   |

src/repo_organizer/bootstrap/application_runner.py:29:9: ANN204 Missing return type annotation for special method `__init__`
   |
27 |     """
28 |
29 |     def __init__(
   |         ^^^^^^^^ ANN204
30 |         self,
31 |         settings,
   |
   = help: Add return type annotation: `None`

src/repo_organizer/bootstrap/application_runner.py:31:9: ANN001 Missing type annotation for function argument `settings`
   |
29 |     def __init__(
30 |         self,
31 |         settings,
   |         ^^^^^^^^ ANN001
32 |         logger,
33 |         github_service,
   |

src/repo_organizer/bootstrap/application_runner.py:32:9: ANN001 Missing type annotation for function argument `logger`
   |
30 |         self,
31 |         settings,
32 |         logger,
   |         ^^^^^^ ANN001
33 |         github_service,
34 |         analyzer,  # Changed parameter from llm_service to analyzer
   |

src/repo_organizer/bootstrap/application_runner.py:33:9: ANN001 Missing type annotation for function argument `github_service`
   |
31 |         settings,
32 |         logger,
33 |         github_service,
   |         ^^^^^^^^^^^^^^ ANN001
34 |         analyzer,  # Changed parameter from llm_service to analyzer
35 |         progress_reporter,
   |

src/repo_organizer/bootstrap/application_runner.py:34:9: ANN001 Missing type annotation for function argument `analyzer`
   |
32 |         logger,
33 |         github_service,
34 |         analyzer,  # Changed parameter from llm_service to analyzer
   |         ^^^^^^^^ ANN001
35 |         progress_reporter,
36 |         github_limiter,
   |

src/repo_organizer/bootstrap/application_runner.py:35:9: ANN001 Missing type annotation for function argument `progress_reporter`
   |
33 |         github_service,
34 |         analyzer,  # Changed parameter from llm_service to analyzer
35 |         progress_reporter,
   |         ^^^^^^^^^^^^^^^^^ ANN001
36 |         github_limiter,
37 |         llm_limiter,
   |

src/repo_organizer/bootstrap/application_runner.py:36:9: ANN001 Missing type annotation for function argument `github_limiter`
   |
34 |         analyzer,  # Changed parameter from llm_service to analyzer
35 |         progress_reporter,
36 |         github_limiter,
   |         ^^^^^^^^^^^^^^ ANN001
37 |         llm_limiter,
38 |         force_analysis=False,
   |

src/repo_organizer/bootstrap/application_runner.py:37:9: ANN001 Missing type annotation for function argument `llm_limiter`
   |
35 |         progress_reporter,
36 |         github_limiter,
37 |         llm_limiter,
   |         ^^^^^^^^^^^ ANN001
38 |         force_analysis=False,
39 |     ):
   |

src/repo_organizer/bootstrap/application_runner.py:38:9: FBT002 Boolean default positional argument in function definition
   |
36 |         github_limiter,
37 |         llm_limiter,
38 |         force_analysis=False,
   |         ^^^^^^^^^^^^^^ FBT002
39 |     ):
40 |         """Initialize the application runner with dependencies.
   |

src/repo_organizer/bootstrap/application_runner.py:38:9: ANN001 Missing type annotation for function argument `force_analysis`
   |
36 |         github_limiter,
37 |         llm_limiter,
38 |         force_analysis=False,
   |         ^^^^^^^^^^^^^^ ANN001
39 |     ):
40 |         """Initialize the application runner with dependencies.
   |

src/repo_organizer/bootstrap/application_runner.py:79:9: PTH103 `os.makedirs()` should be replaced by `Path.mkdir(parents=True)`
   |
78 |         # Ensure output directory exists
79 |         os.makedirs(self.output_dir, exist_ok=True)
   |         ^^^^^^^^^^^ PTH103
80 |
81 |         # Log if forcing analysis
   |

src/repo_organizer/bootstrap/application_runner.py:108:26: PTH118 `os.path.join()` should be replaced by `Path` with `/` operator
    |
106 |         # repository's last update timestamp.  This prevents stale reports
107 |         # from lingering forever while still avoiding needless re-analysis.
108 |         repo_file_path = os.path.join(self.output_dir, f"{repo_name}.md")
    |                          ^^^^^^^^^^^^ PTH118
109 |         if os.path.exists(repo_file_path):
110 |             try:
    |

src/repo_organizer/bootstrap/application_runner.py:109:12: PTH110 `os.path.exists()` should be replaced by `Path.exists()`
    |
107 |         # from lingering forever while still avoiding needless re-analysis.
108 |         repo_file_path = os.path.join(self.output_dir, f"{repo_name}.md")
109 |         if os.path.exists(repo_file_path):
    |            ^^^^^^^^^^^^^^ PTH110
110 |             try:
111 |                 updated_at_str = repo_info.get("updatedAt") or repo_info.get(
    |

src/repo_organizer/bootstrap/application_runner.py:120:39: DTZ006 `datetime.datetime.fromtimestamp()` called without a `tz` argument
    |
118 |                       updated_at_str = updated_at_str.rstrip("Z")
119 |                       repo_updated_ts = _dt.datetime.fromisoformat(updated_at_str)
120 |                       report_mtime_ts = _dt.datetime.fromtimestamp(
    |  _______________________________________^
121 | |                         os.path.getmtime(repo_file_path),
122 | |                     )
    | |_____________________^ DTZ006
123 |
124 |                       if report_mtime_ts >= repo_updated_ts:
    |
    = help: Pass a `datetime.timezone` object to the `tz` parameter

src/repo_organizer/bootstrap/application_runner.py:121:25: PTH204 `os.path.getmtime` should be replaced by `Path.stat().st_mtime`
    |
119 |                     repo_updated_ts = _dt.datetime.fromisoformat(updated_at_str)
120 |                     report_mtime_ts = _dt.datetime.fromtimestamp(
121 |                         os.path.getmtime(repo_file_path),
    |                         ^^^^^^^^^^^^^^^^ PTH204
122 |                     )
    |

src/repo_organizer/bootstrap/application_runner.py:126:89: E501 Line too long (92 > 88)
    |
124 |                     if report_mtime_ts >= repo_updated_ts:
125 |                         self.logger.log(
126 |                             f"Skipping analysis for {repo_name} (cached report up-to-date)",
    |                                                                                         ^^^^ E501
127 |                             level="info",
128 |                         )
    |

src/repo_organizer/bootstrap/application_runner.py:130:20: BLE001 Do not catch blind exception: `Exception`
    |
128 |                         )
129 |                         return True
130 |             except Exception as _sk_err:  # pragma: no cover – best-effort parsing
    |                    ^^^^^^^^^ BLE001
131 |                 # On any parsing error fall back to the old behaviour (skip).
132 |                 self.logger.log(
    |

src/repo_organizer/bootstrap/application_runner.py:130:62: RUF003 Comment contains ambiguous `–` (EN DASH). Did you mean `-` (HYPHEN-MINUS)?
    |
128 |                         )
129 |                         return True
130 |             except Exception as _sk_err:  # pragma: no cover – best-effort parsing
    |                                                              ^ RUF003
131 |                 # On any parsing error fall back to the old behaviour (skip).
132 |                 self.logger.log(
    |

src/repo_organizer/bootstrap/application_runner.py:133:89: E501 Line too long (89 > 88)
    |
131 |                 # On any parsing error fall back to the old behaviour (skip).
132 |                 self.logger.log(
133 |                     f"Could not validate freshness of report for {repo_name}: {_sk_err}",
    |                                                                                         ^ E501
134 |                     level="debug",
135 |                 )
    |

src/repo_organizer/bootstrap/application_runner.py:140:9: ANN201 Missing return type annotation for public function `analyze_repo_task`
    |
138 |         return False
139 |
140 |     def analyze_repo_task(self, repo, repository_analyzer, pbar):
    |         ^^^^^^^^^^^^^^^^^ ANN201
141 |         """Task function for parallel repository analysis.
    |
    = help: Add return type annotation

src/repo_organizer/bootstrap/application_runner.py:140:33: ANN001 Missing type annotation for function argument `repo`
    |
138 |         return False
139 |
140 |     def analyze_repo_task(self, repo, repository_analyzer, pbar):
    |                                 ^^^^ ANN001
141 |         """Task function for parallel repository analysis.
    |

src/repo_organizer/bootstrap/application_runner.py:140:39: ANN001 Missing type annotation for function argument `repository_analyzer`
    |
138 |         return False
139 |
140 |     def analyze_repo_task(self, repo, repository_analyzer, pbar):
    |                                       ^^^^^^^^^^^^^^^^^^^ ANN001
141 |         """Task function for parallel repository analysis.
    |

src/repo_organizer/bootstrap/application_runner.py:140:60: ANN001 Missing type annotation for function argument `pbar`
    |
138 |         return False
139 |
140 |     def analyze_repo_task(self, repo, repository_analyzer, pbar):
    |                                                            ^^^^ ANN001
141 |         """Task function for parallel repository analysis.
    |

src/repo_organizer/bootstrap/application_runner.py:170:16: BLE001 Do not catch blind exception: `Exception`
    |
168 |                     level="warning",
169 |                 )
170 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
171 |             # Log exception caught directly within the task
172 |             self.logger.log(
    |

src/repo_organizer/bootstrap/application_runner.py:173:89: E501 Line too long (93 > 88)
    |
171 |             # Log exception caught directly within the task
172 |             self.logger.log(
173 |                 f"Exception in analyze_repo_task for {repo_name}: {type(e).__name__}: {e!s}",
    |                                                                                         ^^^^^ E501
174 |                 level="error",
175 |             )
    |

src/repo_organizer/bootstrap/application_runner.py:179:89: E501 Line too long (92 > 88)
    |
178 |             self.logger.log(
179 |                 f"Traceback (analyze_repo_task for {repo_name}):\n{traceback.format_exc()}",
    |                                                                                         ^^^^ E501
180 |                 level="debug",
181 |             )
    |

src/repo_organizer/bootstrap/application_runner.py:217:16: BLE001 Do not catch blind exception: `Exception`
    |
215 |             filtered_repos = [r for r in repos if not self._should_skip_analysis(r)]
216 |             return len(filtered_repos)
217 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
218 |             self.logger.log(f"Error determining repository count: {e!s}", "error")
219 |             return 0
    |

src/repo_organizer/bootstrap/application_runner.py:238:9: C901 `run` is too complex (22 > 10)
    |
236 |         )
237 |
238 |     def run(self, progress_callback=None):
    |         ^^^ C901
239 |         """Run the repository analysis process.
    |

src/repo_organizer/bootstrap/application_runner.py:238:9: PLR0912 Too many branches (14 > 12)
    |
236 |         )
237 |
238 |     def run(self, progress_callback=None):
    |         ^^^ PLR0912
239 |         """Run the repository analysis process.
    |

src/repo_organizer/bootstrap/application_runner.py:238:9: PLR0915 Too many statements (62 > 50)
    |
236 |         )
237 |
238 |     def run(self, progress_callback=None):
    |         ^^^ PLR0915
239 |         """Run the repository analysis process.
    |

src/repo_organizer/bootstrap/application_runner.py:238:9: ANN201 Missing return type annotation for public function `run`
    |
236 |         )
237 |
238 |     def run(self, progress_callback=None):
    |         ^^^ ANN201
239 |         """Run the repository analysis process.
    |
    = help: Add return type annotation

src/repo_organizer/bootstrap/application_runner.py:238:19: ANN001 Missing type annotation for function argument `progress_callback`
    |
236 |         )
237 |
238 |     def run(self, progress_callback=None):
    |                   ^^^^^^^^^^^^^^^^^ ANN001
239 |         """Run the repository analysis process.
    |

src/repo_organizer/bootstrap/application_runner.py:267:89: E501 Line too long (94 > 88)
    |
265 |         )
266 |
267 |         # Create the analyzer service instance using our analyzer that implements AnalyzerPort
    |                                                                                         ^^^^^^ E501
268 |         repository_analyzer = RepositoryAnalyzerService(
269 |             self.output_dir,
    |

src/repo_organizer/bootstrap/application_runner.py:288:16: BLE001 Do not catch blind exception: `Exception`
    |
286 |                 return None
287 |             self.logger.log(f"Successfully fetched {len(repos)} repositories")
288 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
289 |             self.logger.log(f"Failed to fetch repositories: {e!s}", level="error")
290 |             sys.exit(1)  # Exit if we can't fetch repos
    |

src/repo_organizer/bootstrap/application_runner.py:303:17: ANN204 Missing return type annotation for special method `__init__`
    |
301 |         # Create a custom progress tracker using the progress_callback
302 |         class ProgressTracker:
303 |             def __init__(self, total, callback):
    |                 ^^^^^^^^ ANN204
304 |                 self.total = total
305 |                 self.callback = callback
    |
    = help: Add return type annotation: `None`

src/repo_organizer/bootstrap/application_runner.py:303:32: ANN001 Missing type annotation for function argument `total`
    |
301 |         # Create a custom progress tracker using the progress_callback
302 |         class ProgressTracker:
303 |             def __init__(self, total, callback):
    |                                ^^^^^ ANN001
304 |                 self.total = total
305 |                 self.callback = callback
    |

src/repo_organizer/bootstrap/application_runner.py:303:39: ANN001 Missing type annotation for function argument `callback`
    |
301 |         # Create a custom progress tracker using the progress_callback
302 |         class ProgressTracker:
303 |             def __init__(self, total, callback):
    |                                       ^^^^^^^^ ANN001
304 |                 self.total = total
305 |                 self.callback = callback
    |

src/repo_organizer/bootstrap/application_runner.py:308:17: ANN202 Missing return type annotation for private function `update`
    |
306 |                 self.completed = 0
307 |
308 |             def update(self, n=1):
    |                 ^^^^^^ ANN202
309 |                 self.completed += n
310 |                 if self.callback:
    |
    = help: Add return type annotation: `None`

src/repo_organizer/bootstrap/application_runner.py:308:30: ANN001 Missing type annotation for function argument `n`
    |
306 |                 self.completed = 0
307 |
308 |             def update(self, n=1):
    |                              ^ ANN001
309 |                 self.completed += n
310 |                 if self.callback:
    |

src/repo_organizer/bootstrap/application_runner.py:315:17: ANN202 Missing return type annotation for private function `set_description`
    |
313 |                     self.callback(self.completed, self.total, status_text)
314 |
315 |             def set_description(self, desc):
    |                 ^^^^^^^^^^^^^^^ ANN202
316 |                 if self.callback:
317 |                     # Truncate long descriptions to prevent line wrapping
    |
    = help: Add return type annotation: `None`

src/repo_organizer/bootstrap/application_runner.py:315:39: ANN001 Missing type annotation for function argument `desc`
    |
313 |                     self.callback(self.completed, self.total, status_text)
314 |
315 |             def set_description(self, desc):
    |                                       ^^^^ ANN001
316 |                 if self.callback:
317 |                     # Truncate long descriptions to prevent line wrapping
    |

src/repo_organizer/bootstrap/application_runner.py:323:17: ANN202 Missing return type annotation for private function `refresh`
    |
321 |                     self.callback(self.completed, self.total, desc)
322 |
323 |             def refresh(self):
    |                 ^^^^^^^ ANN202
324 |                 if self.callback:
325 |                     self.callback(self.completed, self.total, None)
    |
    = help: Add return type annotation: `None`

src/repo_organizer/bootstrap/application_runner.py:350:89: E501 Line too long (91 > 88)
    |
348 |                 if self._should_skip_analysis(repo):
349 |                     self.logger.log(
350 |                         f"Skipping analysis for {repo_name} (cached result is up-to-date)",
    |                                                                                         ^^^ E501
351 |                         level="info",
352 |                     )
    |

src/repo_organizer/bootstrap/application_runner.py:377:89: E501 Line too long (91 > 88)
    |
375 |                     if analysis_result:
376 |                         analyses.append(analysis_result)
377 |                         # Write the individual report immediately after successful analysis
    |                                                                                         ^^^ E501
378 |                         repository_analyzer._write_single_report(
379 |                             analysis_result, repo_info,
    |

src/repo_organizer/bootstrap/application_runner.py:378:25: SLF001 Private member accessed: `_write_single_report`
    |
376 |                         analyses.append(analysis_result)
377 |                         # Write the individual report immediately after successful analysis
378 |                         repository_analyzer._write_single_report(
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ SLF001
379 |                             analysis_result, repo_info,
380 |                         )
    |

src/repo_organizer/bootstrap/application_runner.py:381:24: BLE001 Do not catch blind exception: `Exception`
    |
379 |                             analysis_result, repo_info,
380 |                         )
381 |                 except Exception as exc:
    |                        ^^^^^^^^^ BLE001
382 |                     self.logger.log(
383 |                         f"Error processing future for repo {repo_name}: {exc}",
    |

src/repo_organizer/bootstrap/application_runner.py:403:33: PTH118 `os.path.join()` should be replaced by `Path` with `/` operator
    |
401 |             self.logger.log(f"Reports generated in {self.output_dir}", "success")
402 |             self.logger.log(
403 |                 f"Main report: {os.path.join(self.output_dir, 'repositories_report.md')}",
    |                                 ^^^^^^^^^^^^ PTH118
404 |             )
    |

src/repo_organizer/bootstrap/application_runner.py:403:89: E501 Line too long (90 > 88)
    |
401 |             self.logger.log(f"Reports generated in {self.output_dir}", "success")
402 |             self.logger.log(
403 |                 f"Main report: {os.path.join(self.output_dir, 'repositories_report.md')}",
    |                                                                                         ^^ E501
404 |             )
    |

src/repo_organizer/cli/__init__.py:1:1: D200 One-line docstring should fit on one line
  |
1 | / """CLI package for the GitHub Repository Organizer.
2 | | """
  | |___^ D200
3 |
4 |   from repo_organizer.cli.app import app
  |
  = help: Reformat to one line

src/repo_organizer/cli/app.py:55:1: ERA001 Found commented-out code
   |
54 | # Temporarily disable authentication option for testing
55 | # with_auth_option(app)
   | ^^^^^^^^^^^^^^^^^^^^^^^ ERA001
56 |
57 | # Create console for rich output
   |
   = help: Remove commented-out code

src/repo_organizer/cli/app.py:61:5: ANN201 Missing return type annotation for public function `version_callback`
   |
61 | def version_callback(value: bool):
   |     ^^^^^^^^^^^^^^^^ ANN201
62 |     """Display version information and exit."""
63 |     if value:
   |
   = help: Add return type annotation: `None`

src/repo_organizer/cli/app.py:61:22: FBT001 Boolean-typed positional argument in function definition
   |
61 | def version_callback(value: bool):
   |                      ^^^^^ FBT001
62 |     """Display version information and exit."""
63 |     if value:
   |

src/repo_organizer/cli/app.py:67:89: E501 Line too long (89 > 88)
   |
66 |         console.print(
67 |             f"[bold green]GitHub Repository Analyzer[/] version: [bold]{__version__}[/]",
   |                                                                                         ^ E501
68 |         )
69 |         typer.Exit()
   |

src/repo_organizer/cli/app.py:73:5: ANN201 Missing return type annotation for public function `main`
   |
72 | @app.callback()
73 | def main(
   |     ^^^^ ANN201
74 |     version: bool = typer.Option(
75 |         False,
   |
   = help: Add return type annotation: `None`

src/repo_organizer/cli/app.py:74:5: FBT001 Boolean-typed positional argument in function definition
   |
72 | @app.callback()
73 | def main(
74 |     version: bool = typer.Option(
   |     ^^^^^^^ FBT001
75 |         False,
76 |         "--version",
   |

src/repo_organizer/cli/app.py:75:9: FBT003 Boolean positional value in function call
   |
73 | def main(
74 |     version: bool = typer.Option(
75 |         False,
   |         ^^^^^ FBT003
76 |         "--version",
77 |         "-v",
   |

src/repo_organizer/cli/app.py:85:89: E501 Line too long (142 > 88)
   |
83 | …and Anthropic's Claude AI.
84 | …
85 | …nd documentation for repositories that you own (not repositories you've starred or forked).
   |                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E501
86 | …
   |

src/repo_organizer/cli/app.py:92:5: C901 `analyze` is too complex (25 > 10)
   |
90 | # Temporarily disable authentication for testing
91 | # @authenticate_command("analyze")
92 | def analyze(
   |     ^^^^^^^ C901
93 |     force: bool = typer.Option(
94 |         False,
   |

src/repo_organizer/cli/app.py:92:5: PLR0913 Too many arguments in function definition (9 > 5)
   |
90 | # Temporarily disable authentication for testing
91 | # @authenticate_command("analyze")
92 | def analyze(
   |     ^^^^^^^ PLR0913
93 |     force: bool = typer.Option(
94 |         False,
   |

src/repo_organizer/cli/app.py:92:5: PLR0912 Too many branches (32 > 12)
   |
90 | # Temporarily disable authentication for testing
91 | # @authenticate_command("analyze")
92 | def analyze(
   |     ^^^^^^^ PLR0912
93 |     force: bool = typer.Option(
94 |         False,
   |

src/repo_organizer/cli/app.py:92:5: PLR0915 Too many statements (128 > 50)
   |
90 | # Temporarily disable authentication for testing
91 | # @authenticate_command("analyze")
92 | def analyze(
   |     ^^^^^^^ PLR0915
93 |     force: bool = typer.Option(
94 |         False,
   |

src/repo_organizer/cli/app.py:92:5: ANN201 Missing return type annotation for public function `analyze`
   |
90 | # Temporarily disable authentication for testing
91 | # @authenticate_command("analyze")
92 | def analyze(
   |     ^^^^^^^ ANN201
93 |     force: bool = typer.Option(
94 |         False,
   |
   = help: Add return type annotation: `None`

src/repo_organizer/cli/app.py:93:5: FBT001 Boolean-typed positional argument in function definition
   |
91 | # @authenticate_command("analyze")
92 | def analyze(
93 |     force: bool = typer.Option(
   |     ^^^^^ FBT001
94 |         False,
95 |         "--force",
   |

src/repo_organizer/cli/app.py:93:5: ARG001 Unused function argument: `force`
   |
91 | # @authenticate_command("analyze")
92 | def analyze(
93 |     force: bool = typer.Option(
   |     ^^^^^ ARG001
94 |         False,
95 |         "--force",
   |

src/repo_organizer/cli/app.py:94:9: FBT003 Boolean positional value in function call
   |
92 | def analyze(
93 |     force: bool = typer.Option(
94 |         False,
   |         ^^^^^ FBT003
95 |         "--force",
96 |         "-f",
   |

src/repo_organizer/cli/app.py:121:5: FBT001 Boolean-typed positional argument in function definition
    |
119 |         help="Process only a single repository by name.",
120 |     ),
121 |     debug: bool = typer.Option(False, "--debug", "-d", help="Enable debug logging."),
    |     ^^^^^ FBT001
122 |     quiet: bool = typer.Option(False, "--quiet", "-q", help="Minimize console output."),
123 |     username: str | None = None,  # Added by with_auth_option, manually included here for clarity
    |

src/repo_organizer/cli/app.py:121:32: FBT003 Boolean positional value in function call
    |
119 |         help="Process only a single repository by name.",
120 |     ),
121 |     debug: bool = typer.Option(False, "--debug", "-d", help="Enable debug logging."),
    |                                ^^^^^ FBT003
122 |     quiet: bool = typer.Option(False, "--quiet", "-q", help="Minimize console output."),
123 |     username: str | None = None,  # Added by with_auth_option, manually included here for clarity
    |

src/repo_organizer/cli/app.py:122:5: FBT001 Boolean-typed positional argument in function definition
    |
120 |     ),
121 |     debug: bool = typer.Option(False, "--debug", "-d", help="Enable debug logging."),
122 |     quiet: bool = typer.Option(False, "--quiet", "-q", help="Minimize console output."),
    |     ^^^^^ FBT001
123 |     username: str | None = None,  # Added by with_auth_option, manually included here for clarity
124 | ):
    |

src/repo_organizer/cli/app.py:122:32: FBT003 Boolean positional value in function call
    |
120 |     ),
121 |     debug: bool = typer.Option(False, "--debug", "-d", help="Enable debug logging."),
122 |     quiet: bool = typer.Option(False, "--quiet", "-q", help="Minimize console output."),
    |                                ^^^^^ FBT003
123 |     username: str | None = None,  # Added by with_auth_option, manually included here for clarity
124 | ):
    |

src/repo_organizer/cli/app.py:123:5: ARG001 Unused function argument: `username`
    |
121 |     debug: bool = typer.Option(False, "--debug", "-d", help="Enable debug logging."),
122 |     quiet: bool = typer.Option(False, "--quiet", "-q", help="Minimize console output."),
123 |     username: str | None = None,  # Added by with_auth_option, manually included here for clarity
    |     ^^^^^^^^ ARG001
124 | ):
125 |     """Analyze GitHub repositories and generate detailed reports.
    |

src/repo_organizer/cli/app.py:123:89: E501 Line too long (97 > 88)
    |
121 |     debug: bool = typer.Option(False, "--debug", "-d", help="Enable debug logging."),
122 |     quiet: bool = typer.Option(False, "--quiet", "-q", help="Minimize console output."),
123 |     username: str | None = None,  # Added by with_auth_option, manually included here for clarity
    |                                                                                         ^^^^^^^^^ E501
124 | ):
125 |     """Analyze GitHub repositories and generate detailed reports.
    |

src/repo_organizer/cli/app.py:156:89: E501 Line too long (93 > 88)
    |
154 |         if not quiet:
155 |             console.print(
156 |                 f"[cyan]Single repository mode: Will only process [bold]{single_repo}[/][/]",
    |                                                                                         ^^^^^ E501
157 |             )
    |

src/repo_organizer/cli/app.py:175:27: PTH100 `os.path.abspath()` should be replaced by `Path.resolve()`
    |
173 |         import os
174 |
175 |         expanded_output = os.path.abspath(
    |                           ^^^^^^^^^^^^^^^ PTH100
176 |             os.path.expanduser(os.path.expandvars(output_dir)),
177 |         )
    |

src/repo_organizer/cli/app.py:176:13: PTH111 `os.path.expanduser()` should be replaced by `Path.expanduser()`
    |
175 |         expanded_output = os.path.abspath(
176 |             os.path.expanduser(os.path.expandvars(output_dir)),
    |             ^^^^^^^^^^^^^^^^^^ PTH111
177 |         )
178 |         output_path = Path(expanded_output)
    |

src/repo_organizer/cli/app.py:237:89: E501 Line too long (109 > 88)
    |
235 |                 if settings.single_repo:
236 |                     console.print(
237 |                         f"[cyan]Fetching repository [bold]{settings.single_repo}[/] for [bold]{owner}[/]...",
    |                                                                                         ^^^^^^^^^^^^^^^^^^^^^ E501
238 |                     )
239 |                 else:
    |

src/repo_organizer/cli/app.py:279:26: PTH123 `open()` should be replaced by `Path.open()`
    |
278 |                 try:
279 |                     with open(path, "w") as f:
    |                          ^^^^ PTH123
280 |                         f.write(f"# {a.repo_name}\n\n")
281 |                         f.write("## Summary\n\n")
    |

src/repo_organizer/cli/app.py:300:89: E501 Line too long (100 > 88)
    |
298 | …                     for rec in a.recommendations:
299 | …                         f.write(
300 | …                             f"- **{rec.recommendation}** ({rec.priority} Priority)  \n",
    |                                                                               ^^^^^^^^^^^^ E501
301 | …                         )
302 | …                         f.write(f"  *Reason: {rec.reason}*\n")
    |

src/repo_organizer/cli/app.py:313:24: BLE001 Do not catch blind exception: `Exception`
    |
311 |                             f.write(f"**Analysis failed**: {a.summary}\n")
312 |                             fail_count += 1
313 |                 except Exception as e:
    |                        ^^^^^^^^^ BLE001
314 |                     console.print(f"[red]Error writing report for {a.repo_name}: {e}")
315 |                     fail_count += 1
    |

src/repo_organizer/cli/app.py:319:18: PTH123 `open()` should be replaced by `Path.open()`
    |
317 |             # Create summary report
318 |             summary_path = output_path / "repositories_report.md"
319 |             with open(summary_path, "w") as f:
    |                  ^^^^ PTH123
320 |                 # Add single repo mode indicator if applicable
321 |                 if settings.single_repo:
    |

src/repo_organizer/cli/app.py:324:89: E501 Line too long (116 > 88)
    |
322 |                     f.write("# Single Repository Analysis Report\n\n")
323 |                     f.write(
324 |                         f"*This report contains analysis for a single repository: **{settings.single_repo}**.*\n\n",
    |                                                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E501
325 |                     )
326 |                 else:
    |

src/repo_organizer/cli/app.py:337:89: E501 Line too long (98 > 88)
    |
335 |                 if settings.single_repo:
336 |                     f.write(
337 |                         f"- **Mode**: Single repository analysis of **{settings.single_repo}**\n",
    |                                                                                         ^^^^^^^^^^ E501
338 |                     )
339 |                 else:
    |

src/repo_organizer/cli/app.py:370:89: E501 Line too long (141 > 88)
    |
369 | …e information
370 | …s: {len(analyses)}\nSuccessfully Analyzed: {success_count}\nFailed Analyses: {fail_count}"
    |                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E501
371 | …
372 | …
    |

src/repo_organizer/cli/app.py:374:89: E501 Line too long (109 > 88)
    |
372 |                 # Add mode information
373 |                 if settings.single_repo:
374 |                     panel_content += f"\nMode: Single repository analysis of [bold]{settings.single_repo}[/]"
    |                                                                                         ^^^^^^^^^^^^^^^^^^^^^ E501
375 |                     panel_title = "Single Repository Analysis"
376 |                 else:
    |

src/repo_organizer/cli/app.py:399:13: B904 Within an `except` clause, raise exceptions with `raise ... from err` or `raise ... from None` to distinguish them from errors in exception handling
    |
397 |         except KeyboardInterrupt:
398 |             console.print("\n[bold yellow]Operation cancelled by user.[/]")
399 |             raise typer.Exit(code=1)
    |             ^^^^^^^^^^^^^^^^^^^^^^^^ B904
400 |         except Exception as e:
401 |             console.print(f"\n[bold red]Error during analysis:[/] {e}")
    |

src/repo_organizer/cli/app.py:400:16: BLE001 Do not catch blind exception: `Exception`
    |
398 |             console.print("\n[bold yellow]Operation cancelled by user.[/]")
399 |             raise typer.Exit(code=1)
400 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
401 |             console.print(f"\n[bold red]Error during analysis:[/] {e}")
402 |             if debug:
    |

src/repo_organizer/cli/app.py:406:13: B904 Within an `except` clause, raise exceptions with `raise ... from err` or `raise ... from None` to distinguish them from errors in exception handling
    |
405 |                 console.print(traceback.format_exc())
406 |             raise typer.Exit(code=1)
    |             ^^^^^^^^^^^^^^^^^^^^^^^^ B904
    |

src/repo_organizer/cli/app.py:411:5: C901 `cleanup` is too complex (11 > 10)
    |
409 | @app.command()
410 | @authenticate_command("cleanup")
411 | def cleanup(
    |     ^^^^^^^ C901
412 |     force: bool = typer.Option(
413 |         False, "--force", "-f", help="Force removal of all files without confirmation.",
    |

src/repo_organizer/cli/app.py:411:5: ANN201 Missing return type annotation for public function `cleanup`
    |
409 | @app.command()
410 | @authenticate_command("cleanup")
411 | def cleanup(
    |     ^^^^^^^ ANN201
412 |     force: bool = typer.Option(
413 |         False, "--force", "-f", help="Force removal of all files without confirmation.",
    |
    = help: Add return type annotation: `None`

src/repo_organizer/cli/app.py:412:5: FBT001 Boolean-typed positional argument in function definition
    |
410 | @authenticate_command("cleanup")
411 | def cleanup(
412 |     force: bool = typer.Option(
    |     ^^^^^ FBT001
413 |         False, "--force", "-f", help="Force removal of all files without confirmation.",
414 |     ),
    |

src/repo_organizer/cli/app.py:413:9: FBT003 Boolean positional value in function call
    |
411 | def cleanup(
412 |     force: bool = typer.Option(
413 |         False, "--force", "-f", help="Force removal of all files without confirmation.",
    |         ^^^^^ FBT003
414 |     ),
415 |     output_dir: str | None = typer.Option(
    |

src/repo_organizer/cli/app.py:421:5: FBT001 Boolean-typed positional argument in function definition
    |
419 |         help="Directory containing analysis results to clean up (default: .out/repos).",
420 |     ),
421 |     quiet: bool = typer.Option(False, "--quiet", "-q", help="Minimize console output."),
    |     ^^^^^ FBT001
422 |     username: str | None = None,  # Added by with_auth_option, manually included here for clarity
423 | ):
    |

src/repo_organizer/cli/app.py:421:32: FBT003 Boolean positional value in function call
    |
419 |         help="Directory containing analysis results to clean up (default: .out/repos).",
420 |     ),
421 |     quiet: bool = typer.Option(False, "--quiet", "-q", help="Minimize console output."),
    |                                ^^^^^ FBT003
422 |     username: str | None = None,  # Added by with_auth_option, manually included here for clarity
423 | ):
    |

src/repo_organizer/cli/app.py:422:5: ARG001 Unused function argument: `username`
    |
420 |     ),
421 |     quiet: bool = typer.Option(False, "--quiet", "-q", help="Minimize console output."),
422 |     username: str | None = None,  # Added by with_auth_option, manually included here for clarity
    |     ^^^^^^^^ ARG001
423 | ):
424 |     """Clean up generated repository analysis files.
    |

src/repo_organizer/cli/app.py:422:89: E501 Line too long (97 > 88)
    |
420 |     ),
421 |     quiet: bool = typer.Option(False, "--quiet", "-q", help="Minimize console output."),
422 |     username: str | None = None,  # Added by with_auth_option, manually included here for clarity
    |                                                                                         ^^^^^^^^^ E501
423 | ):
424 |     """Clean up generated repository analysis files.
    |

src/repo_organizer/cli/app.py:424:5: D200 One-line docstring should fit on one line
    |
422 |       username: str | None = None,  # Added by with_auth_option, manually included here for clarity
423 |   ):
424 | /     """Clean up generated repository analysis files.
425 | |     """
    | |_______^ D200
426 |       # Get settings directly from the config module
427 |       settings = load_settings()
    |
    = help: Reformat to one line

src/repo_organizer/cli/app.py:467:24: BLE001 Do not catch blind exception: `Exception`
    |
465 |                 try:
466 |                     file.unlink()
467 |                 except Exception as e:
    |                        ^^^^^^^^^ BLE001
468 |                     console.print(f"[red]Error deleting {file.name}: {e}[/]")
469 |             progress.update(task, advance=1)
    |

src/repo_organizer/cli/app.py:478:5: C901 `logs` is too complex (16 > 10)
    |
477 | @app.command()
478 | def logs(
    |     ^^^^ C901
479 |     latest: bool = typer.Option(
480 |         True, "--latest", "-l", help="Show only the latest log file.",
    |

src/repo_organizer/cli/app.py:478:5: PLR0912 Too many branches (18 > 12)
    |
477 | @app.command()
478 | def logs(
    |     ^^^^ PLR0912
479 |     latest: bool = typer.Option(
480 |         True, "--latest", "-l", help="Show only the latest log file.",
    |

src/repo_organizer/cli/app.py:478:5: PLR0915 Too many statements (56 > 50)
    |
477 | @app.command()
478 | def logs(
    |     ^^^^ PLR0915
479 |     latest: bool = typer.Option(
480 |         True, "--latest", "-l", help="Show only the latest log file.",
    |

src/repo_organizer/cli/app.py:478:5: ANN201 Missing return type annotation for public function `logs`
    |
477 | @app.command()
478 | def logs(
    |     ^^^^ ANN201
479 |     latest: bool = typer.Option(
480 |         True, "--latest", "-l", help="Show only the latest log file.",
    |
    = help: Add return type annotation: `None`

src/repo_organizer/cli/app.py:479:5: FBT001 Boolean-typed positional argument in function definition
    |
477 | @app.command()
478 | def logs(
479 |     latest: bool = typer.Option(
    |     ^^^^^^ FBT001
480 |         True, "--latest", "-l", help="Show only the latest log file.",
481 |     ),
    |

src/repo_organizer/cli/app.py:480:9: FBT003 Boolean positional value in function call
    |
478 | def logs(
479 |     latest: bool = typer.Option(
480 |         True, "--latest", "-l", help="Show only the latest log file.",
    |         ^^^^ FBT003
481 |     ),
482 |     all_logs: bool = typer.Option(
    |

src/repo_organizer/cli/app.py:482:5: FBT001 Boolean-typed positional argument in function definition
    |
480 |         True, "--latest", "-l", help="Show only the latest log file.",
481 |     ),
482 |     all_logs: bool = typer.Option(
    |     ^^^^^^^^ FBT001
483 |         False, "--all", "-a", help="Show a list of all available log files.",
484 |     ),
    |

src/repo_organizer/cli/app.py:483:9: FBT003 Boolean positional value in function call
    |
481 |     ),
482 |     all_logs: bool = typer.Option(
483 |         False, "--all", "-a", help="Show a list of all available log files.",
    |         ^^^^^ FBT003
484 |     ),
485 |     log_file: str | None = typer.Option(
    |

src/repo_organizer/cli/app.py:489:5: D200 One-line docstring should fit on one line
    |
487 |       ),
488 |   ):
489 | /     """View analysis log files.
490 | |     """
    | |_______^ D200
491 |       # Get logs directory from settings
492 |       settings = load_settings()
    |
    = help: Reformat to one line

src/repo_organizer/cli/app.py:496:12: PTH110 `os.path.exists()` should be replaced by `Path.exists()`
    |
495 |     # Ensure logs directory exists
496 |     if not os.path.exists(logs_dir):
    |            ^^^^^^^^^^^^^^ PTH110
497 |         console.print(f"[yellow]Logs directory not found: {logs_dir}[/]")
498 |         return
    |

src/repo_organizer/cli/app.py:502:21: PTH208 Use `pathlib.Path.iterdir()` instead.
    |
500 |     # Get all log files
501 |     log_files = sorted(
502 |         [f for f in os.listdir(logs_dir) if f.startswith("analysis_log_")], reverse=True,
    |                     ^^^^^^^^^^ PTH208
503 |     )
    |

src/repo_organizer/cli/app.py:502:89: E501 Line too long (89 > 88)
    |
500 |     # Get all log files
501 |     log_files = sorted(
502 |         [f for f in os.listdir(logs_dir) if f.startswith("analysis_log_")], reverse=True,
    |                                                                                         ^ E501
503 |     )
    |

src/repo_organizer/cli/app.py:521:34: PLR2004 Magic value used in comparison, consider replacing `2` with a constant variable
    |
519 |             try:
520 |                 parts = file.replace("analysis_log_", "").replace(".txt", "").split("_")
521 |                 if len(parts) >= 2:
    |                                  ^ PLR2004
522 |                     date = parts[0]
523 |                     time = parts[1]
    |

src/repo_organizer/cli/app.py:527:20: BLE001 Do not catch blind exception: `Exception`
    |
525 |                     date = "Unknown"
526 |                     time = "Unknown"
527 |             except Exception:  # Be specific about the exception
    |                    ^^^^^^^^^ BLE001
528 |                 date = "Unknown"
529 |                 time = "Unknown"
    |

src/repo_organizer/cli/app.py:532:20: PTH202 `os.path.getsize` should be replaced by `Path.stat().st_size`
    |
531 |             # Get file size
532 |             size = os.path.getsize(os.path.join(logs_dir, file))
    |                    ^^^^^^^^^^^^^^^ PTH202
533 |             size_str = f"{size / 1024:.1f} KB" if size > 1024 else f"{size} bytes"
    |

src/repo_organizer/cli/app.py:532:36: PTH118 `os.path.join()` should be replaced by `Path` with `/` operator
    |
531 |             # Get file size
532 |             size = os.path.getsize(os.path.join(logs_dir, file))
    |                                    ^^^^^^^^^^^^ PTH118
533 |             size_str = f"{size / 1024:.1f} KB" if size > 1024 else f"{size} bytes"
    |

src/repo_organizer/cli/app.py:533:58: PLR2004 Magic value used in comparison, consider replacing `1024` with a constant variable
    |
531 |             # Get file size
532 |             size = os.path.getsize(os.path.join(logs_dir, file))
533 |             size_str = f"{size / 1024:.1f} KB" if size > 1024 else f"{size} bytes"
    |                                                          ^^^^ PLR2004
534 |
535 |             table.add_row(file, date, time, size_str)
    |

src/repo_organizer/cli/app.py:552:89: E501 Line too long (98 > 88)
    |
550 |             elif len(matches) > 1:
551 |                 console.print(
552 |                     f"[yellow]Multiple log files match '{log_file}'. Please be more specific:[/]",
    |                                                                                         ^^^^^^^^^^ E501
553 |                 )
554 |                 for match in matches[:5]:  # Show at most 5 matches
    |

src/repo_organizer/cli/app.py:556:35: PLR2004 Magic value used in comparison, consider replacing `5` with a constant variable
    |
554 |                 for match in matches[:5]:  # Show at most 5 matches
555 |                     console.print(f"  {match}")
556 |                 if len(matches) > 5:
    |                                   ^ PLR2004
557 |                     console.print(f"  ... and {len(matches) - 5} more")
558 |                 return
    |

src/repo_organizer/cli/app.py:570:16: PTH118 `os.path.join()` should be replaced by `Path` with `/` operator
    |
569 |     # Display the log file
570 |     log_path = os.path.join(logs_dir, file_to_show)
    |                ^^^^^^^^^^^^ PTH118
571 |     try:
572 |         with open(log_path) as f:
    |

src/repo_organizer/cli/app.py:572:14: PTH123 `open()` should be replaced by `Path.open()`
    |
570 |     log_path = os.path.join(logs_dir, file_to_show)
571 |     try:
572 |         with open(log_path) as f:
    |              ^^^^ PTH123
573 |             content = f.read()
    |

src/repo_organizer/cli/app.py:586:12: BLE001 Do not catch blind exception: `Exception`
    |
584 |             ),
585 |         )
586 |     except Exception as e:
    |            ^^^^^^^^^ BLE001
587 |         console.print(f"[red]Error reading log file: {e}[/]")
    |

src/repo_organizer/cli/app.py:591:5: C901 `reports` is too complex (16 > 10)
    |
590 | @app.command()
591 | def reports(
    |     ^^^^^^^ C901
592 |     summary: bool = typer.Option(
593 |         True, "--summary", "-s", help="Show the summary report of all repositories.",
    |

src/repo_organizer/cli/app.py:591:5: PLR0911 Too many return statements (7 > 6)
    |
590 | @app.command()
591 | def reports(
    |     ^^^^^^^ PLR0911
592 |     summary: bool = typer.Option(
593 |         True, "--summary", "-s", help="Show the summary report of all repositories.",
    |

src/repo_organizer/cli/app.py:591:5: PLR0912 Too many branches (16 > 12)
    |
590 | @app.command()
591 | def reports(
    |     ^^^^^^^ PLR0912
592 |     summary: bool = typer.Option(
593 |         True, "--summary", "-s", help="Show the summary report of all repositories.",
    |

src/repo_organizer/cli/app.py:591:5: PLR0915 Too many statements (55 > 50)
    |
590 | @app.command()
591 | def reports(
    |     ^^^^^^^ PLR0915
592 |     summary: bool = typer.Option(
593 |         True, "--summary", "-s", help="Show the summary report of all repositories.",
    |

src/repo_organizer/cli/app.py:591:5: ANN201 Missing return type annotation for public function `reports`
    |
590 | @app.command()
591 | def reports(
    |     ^^^^^^^ ANN201
592 |     summary: bool = typer.Option(
593 |         True, "--summary", "-s", help="Show the summary report of all repositories.",
    |
    = help: Add return type annotation: `None`

src/repo_organizer/cli/app.py:592:5: FBT001 Boolean-typed positional argument in function definition
    |
590 | @app.command()
591 | def reports(
592 |     summary: bool = typer.Option(
    |     ^^^^^^^ FBT001
593 |         True, "--summary", "-s", help="Show the summary report of all repositories.",
594 |     ),
    |

src/repo_organizer/cli/app.py:593:9: FBT003 Boolean positional value in function call
    |
591 | def reports(
592 |     summary: bool = typer.Option(
593 |         True, "--summary", "-s", help="Show the summary report of all repositories.",
    |         ^^^^ FBT003
594 |     ),
595 |     repository: str | None = typer.Option(
    |

src/repo_organizer/cli/app.py:598:5: FBT001 Boolean-typed positional argument in function definition
    |
596 |         None, "--repo", "-r", help="Show the report for a specific repository.",
597 |     ),
598 |     list_reports: bool = typer.Option(
    |     ^^^^^^^^^^^^ FBT001
599 |         False, "--list", "-l", help="List all available repository reports.",
600 |     ),
    |

src/repo_organizer/cli/app.py:599:9: FBT003 Boolean positional value in function call
    |
597 |     ),
598 |     list_reports: bool = typer.Option(
599 |         False, "--list", "-l", help="List all available repository reports.",
    |         ^^^^^ FBT003
600 |     ),
601 | ):
    |

src/repo_organizer/cli/app.py:602:5: D200 One-line docstring should fit on one line
    |
600 |       ),
601 |   ):
602 | /     """View repository analysis reports.
603 | |     """
    | |_______^ D200
604 |       # Get output directory from settings
605 |       settings = load_settings()
    |
    = help: Reformat to one line

src/repo_organizer/cli/app.py:609:12: PTH110 `os.path.exists()` should be replaced by `Path.exists()`
    |
608 |     # Ensure output directory exists
609 |     if not os.path.exists(output_dir):
    |            ^^^^^^^^^^^^^^ PTH110
610 |         console.print(f"[yellow]Reports directory not found: {output_dir}[/]")
611 |         return
    |

src/repo_organizer/cli/app.py:614:32: PTH208 Use `pathlib.Path.iterdir()` instead.
    |
613 |     # Get all report files
614 |     report_files = [f for f in os.listdir(output_dir) if f.endswith(".md")]
    |                                ^^^^^^^^^^ PTH208
615 |
616 |     if not report_files:
    |

src/repo_organizer/cli/app.py:636:25: PTH118 `os.path.join()` should be replaced by `Path` with `/` operator
    |
635 |             # Get file details
636 |             file_path = os.path.join(output_dir, file)
    |                         ^^^^^^^^^^^^ PTH118
637 |             size = os.path.getsize(file_path)
638 |             size_str = f"{size / 1024:.1f} KB" if size > 1024 else f"{size} bytes"
    |

src/repo_organizer/cli/app.py:637:20: PTH202 `os.path.getsize` should be replaced by `Path.stat().st_size`
    |
635 |             # Get file details
636 |             file_path = os.path.join(output_dir, file)
637 |             size = os.path.getsize(file_path)
    |                    ^^^^^^^^^^^^^^^ PTH202
638 |             size_str = f"{size / 1024:.1f} KB" if size > 1024 else f"{size} bytes"
    |

src/repo_organizer/cli/app.py:638:58: PLR2004 Magic value used in comparison, consider replacing `1024` with a constant variable
    |
636 |             file_path = os.path.join(output_dir, file)
637 |             size = os.path.getsize(file_path)
638 |             size_str = f"{size / 1024:.1f} KB" if size > 1024 else f"{size} bytes"
    |                                                          ^^^^ PLR2004
639 |
640 |             # Get last modified time
    |

src/repo_organizer/cli/app.py:641:24: PTH204 `os.path.getmtime` should be replaced by `Path.stat().st_mtime`
    |
640 |             # Get last modified time
641 |             mod_time = os.path.getmtime(file_path)
    |                        ^^^^^^^^^^^^^^^^ PTH204
642 |             mod_time_str = time.strftime("%Y-%m-%d %H:%M", time.localtime(mod_time))
    |

src/repo_organizer/cli/app.py:660:89: E501 Line too long (98 > 88)
    |
658 |             elif len(matches) > 1:
659 |                 console.print(
660 |                     f"[yellow]Multiple reports match '{repository}'. Please be more specific:[/]",
    |                                                                                         ^^^^^^^^^^ E501
661 |                 )
662 |                 for match in matches[:10]:  # Show at most 10 matches
    |

src/repo_organizer/cli/app.py:664:35: PLR2004 Magic value used in comparison, consider replacing `10` with a constant variable
    |
662 |                 for match in matches[:10]:  # Show at most 10 matches
663 |                     console.print(f"  {match.replace('.md', '')}")
664 |                 if len(matches) > 10:
    |                                   ^^ PLR2004
665 |                     console.print(f"  ... and {len(matches) - 10} more")
666 |                 return
    |

src/repo_organizer/cli/app.py:672:23: PTH118 `os.path.join()` should be replaced by `Path` with `/` operator
    |
671 |         # Display the repository report
672 |         report_path = os.path.join(output_dir, report_file)
    |                       ^^^^^^^^^^^^ PTH118
673 |         try:
674 |             with open(report_path) as f:
    |

src/repo_organizer/cli/app.py:674:18: PTH123 `open()` should be replaced by `Path.open()`
    |
672 |         report_path = os.path.join(output_dir, report_file)
673 |         try:
674 |             with open(report_path) as f:
    |                  ^^^^ PTH123
675 |                 content = f.read()
    |

src/repo_organizer/cli/app.py:688:16: BLE001 Do not catch blind exception: `Exception`
    |
686 |                 ),
687 |             )
688 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
689 |             console.print(f"[red]Error reading report file: {e}[/]")
690 |         return
    |

src/repo_organizer/cli/app.py:694:24: PTH118 `os.path.join()` should be replaced by `Path` with `/` operator
    |
692 |     # Show summary report
693 |     if summary:
694 |         summary_path = os.path.join(output_dir, "repositories_report.md")
    |                        ^^^^^^^^^^^^ PTH118
695 |         if not os.path.exists(summary_path):
696 |             console.print("[yellow]Summary report not found. Run analysis first.[/]")
    |

src/repo_organizer/cli/app.py:695:16: PTH110 `os.path.exists()` should be replaced by `Path.exists()`
    |
693 |     if summary:
694 |         summary_path = os.path.join(output_dir, "repositories_report.md")
695 |         if not os.path.exists(summary_path):
    |                ^^^^^^^^^^^^^^ PTH110
696 |             console.print("[yellow]Summary report not found. Run analysis first.[/]")
697 |             return
    |

src/repo_organizer/cli/app.py:700:18: PTH123 `open()` should be replaced by `Path.open()`
    |
699 |         try:
700 |             with open(summary_path) as f:
    |                  ^^^^ PTH123
701 |                 content = f.read()
    |

src/repo_organizer/cli/app.py:714:16: BLE001 Do not catch blind exception: `Exception`
    |
712 |                 ),
713 |             )
714 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
715 |             console.print(f"[red]Error reading summary report: {e}[/]")
    |

src/repo_organizer/cli/app.py:720:5: C901 `reset` is too complex (24 > 10)
    |
718 | @app.command()
719 | @authenticate_command("reset")
720 | def reset(
    |     ^^^^^ C901
721 |     force: bool = typer.Option(
722 |         False, "--force", "-f", help="Force removal without confirmation.",
    |

src/repo_organizer/cli/app.py:720:5: PLR0912 Too many branches (23 > 12)
    |
718 | @app.command()
719 | @authenticate_command("reset")
720 | def reset(
    |     ^^^^^ PLR0912
721 |     force: bool = typer.Option(
722 |         False, "--force", "-f", help="Force removal without confirmation.",
    |

src/repo_organizer/cli/app.py:720:5: PLR0915 Too many statements (68 > 50)
    |
718 | @app.command()
719 | @authenticate_command("reset")
720 | def reset(
    |     ^^^^^ PLR0915
721 |     force: bool = typer.Option(
722 |         False, "--force", "-f", help="Force removal without confirmation.",
    |

src/repo_organizer/cli/app.py:720:5: ANN201 Missing return type annotation for public function `reset`
    |
718 | @app.command()
719 | @authenticate_command("reset")
720 | def reset(
    |     ^^^^^ ANN201
721 |     force: bool = typer.Option(
722 |         False, "--force", "-f", help="Force removal without confirmation.",
    |
    = help: Add return type annotation: `None`

src/repo_organizer/cli/app.py:721:5: FBT001 Boolean-typed positional argument in function definition
    |
719 | @authenticate_command("reset")
720 | def reset(
721 |     force: bool = typer.Option(
    |     ^^^^^ FBT001
722 |         False, "--force", "-f", help="Force removal without confirmation.",
723 |     ),
    |

src/repo_organizer/cli/app.py:722:9: FBT003 Boolean positional value in function call
    |
720 | def reset(
721 |     force: bool = typer.Option(
722 |         False, "--force", "-f", help="Force removal without confirmation.",
    |         ^^^^^ FBT003
723 |     ),
724 |     quiet: bool = typer.Option(False, "--quiet", "-q", help="Minimize console output."),
    |

src/repo_organizer/cli/app.py:724:5: FBT001 Boolean-typed positional argument in function definition
    |
722 |         False, "--force", "-f", help="Force removal without confirmation.",
723 |     ),
724 |     quiet: bool = typer.Option(False, "--quiet", "-q", help="Minimize console output."),
    |     ^^^^^ FBT001
725 |     username: str | None = None,  # Added by with_auth_option, manually included here for clarity
726 | ):
    |

src/repo_organizer/cli/app.py:724:32: FBT003 Boolean positional value in function call
    |
722 |         False, "--force", "-f", help="Force removal without confirmation.",
723 |     ),
724 |     quiet: bool = typer.Option(False, "--quiet", "-q", help="Minimize console output."),
    |                                ^^^^^ FBT003
725 |     username: str | None = None,  # Added by with_auth_option, manually included here for clarity
726 | ):
    |

src/repo_organizer/cli/app.py:725:5: ARG001 Unused function argument: `username`
    |
723 |     ),
724 |     quiet: bool = typer.Option(False, "--quiet", "-q", help="Minimize console output."),
725 |     username: str | None = None,  # Added by with_auth_option, manually included here for clarity
    |     ^^^^^^^^ ARG001
726 | ):
727 |     """Reset and clean up all analysis files, removing reports that don't match your GitHub repositories.
    |

src/repo_organizer/cli/app.py:725:89: E501 Line too long (97 > 88)
    |
723 |     ),
724 |     quiet: bool = typer.Option(False, "--quiet", "-q", help="Minimize console output."),
725 |     username: str | None = None,  # Added by with_auth_option, manually included here for clarity
    |                                                                                         ^^^^^^^^^ E501
726 | ):
727 |     """Reset and clean up all analysis files, removing reports that don't match your GitHub repositories.
    |

src/repo_organizer/cli/app.py:727:5: D200 One-line docstring should fit on one line
    |
725 |       username: str | None = None,  # Added by with_auth_option, manually included here for clarity
726 |   ):
727 | /     """Reset and clean up all analysis files, removing reports that don't match your GitHub repositories.
728 | |     """
    | |_______^ D200
729 |       # Get settings directly from the config module
730 |       settings = load_settings()
    |
    = help: Reformat to one line

src/repo_organizer/cli/app.py:727:89: E501 Line too long (105 > 88)
    |
725 |     username: str | None = None,  # Added by with_auth_option, manually included here for clarity
726 | ):
727 |     """Reset and clean up all analysis files, removing reports that don't match your GitHub repositories.
    |                                                                                         ^^^^^^^^^^^^^^^^^ E501
728 |     """
729 |     # Get settings directly from the config module
    |

src/repo_organizer/cli/app.py:778:22: C401 Unnecessary generator (rewrite as a set comprehension)
    |
776 |         # Use the adapter to get repositories
777 |         repos = github.get_repositories(limit=settings.max_repos)
778 |         repo_names = set(repo.name for repo in repos)
    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ C401
779 |
780 |         # Identify reports that don't belong to the user's repositories
    |
    = help: Rewrite as a set comprehension

src/repo_organizer/cli/app.py:794:13: TRY301 Abstract `raise` to an inner function
    |
792 |             if not quiet:
793 |                 console.print("[green]No invalid repository reports found.[/]")
794 |             raise typer.Exit(code=0)
    |             ^^^^^^^^^^^^^^^^^^^^^^^^ TRY301
795 |
796 |         # Show what will be deleted
    |

src/repo_organizer/cli/app.py:799:89: E501 Line too long (121 > 88)
    |
797 |         if not quiet:
798 |             console.print(
799 |                 f"[yellow]Found {len(invalid_reports)} repository reports that don't match your GitHub repositories:[/]",
    |                                                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E501
800 |             )
801 |             for file_path in invalid_reports[:10]:
    |

src/repo_organizer/cli/app.py:803:39: PLR2004 Magic value used in comparison, consider replacing `10` with a constant variable
    |
801 |             for file_path in invalid_reports[:10]:
802 |                 console.print(f"  • {file_path.name}")
803 |             if len(invalid_reports) > 10:
    |                                       ^^ PLR2004
804 |                 console.print(f"  • ... and {len(invalid_reports) - 10} more")
    |

src/repo_organizer/cli/app.py:813:17: TRY301 Abstract `raise` to an inner function
    |
811 |             if not delete_confirmed:
812 |                 console.print("[yellow]Operation cancelled.[/]")
813 |                 raise typer.Exit(code=0)
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^ TRY301
814 |
815 |         # Delete the invalid files
    |

src/repo_organizer/cli/app.py:830:24: BLE001 Do not catch blind exception: `Exception`
    |
828 |                     file_path.unlink()
829 |                     progress.advance(task)
830 |                 except Exception as e:
    |                        ^^^^^^^^^ BLE001
831 |                     console.print(f"[red]Error deleting {file_path.name}: {e}[/]")
    |

src/repo_organizer/cli/app.py:840:20: BLE001 Do not catch blind exception: `Exception`
    |
838 |                 if not quiet:
839 |                     console.print("[green]Removed summary report for regeneration.[/]")
840 |             except Exception as e:
    |                    ^^^^^^^^^ BLE001
841 |                 console.print(f"[red]Error removing summary report: {e}[/]")
    |

src/repo_organizer/cli/app.py:845:89: E501 Line too long (106 > 88)
    |
843 |         if not quiet:
844 |             console.print(
845 |                 f"[bold green]Successfully removed {len(invalid_reports)} invalid repository reports![/]",
    |                                                                                         ^^^^^^^^^^^^^^^^^^ E501
846 |             )
    |

src/repo_organizer/cli/app.py:848:12: BLE001 Do not catch blind exception: `Exception`
    |
846 |             )
847 |
848 |     except Exception as e:
    |            ^^^^^^^^^ BLE001
849 |         console.print(f"[bold red]Error resetting repository files: {e}[/]")
850 |         if logger and getattr(logger, "debug_enabled", False):
    |

src/repo_organizer/cli/app.py:854:9: B904 Within an `except` clause, raise exceptions with `raise ... from err` or `raise ... from None` to distinguish them from errors in exception handling
    |
853 |             console.print(traceback.format_exc())
854 |         raise typer.Exit(code=1)
    |         ^^^^^^^^^^^^^^^^^^^^^^^^ B904
    |

src/repo_organizer/cli/app.py:859:5: ANN201 Missing return type annotation for public function `actions`
    |
857 | @app.command()
858 | @authenticate_command("execute_actions")
859 | def actions(
    |     ^^^^^^^ ANN201
860 |     action_type: ActionType = typer.Option(
861 |         ActionType.ALL, "--type", "-t", help="Type of action to execute.",
    |
    = help: Add return type annotation: `None`

src/repo_organizer/cli/app.py:860:31: B008 Do not perform function call `typer.Option` in argument defaults; instead, perform the call within the function, or read the default from a module-level singleton variable
    |
858 |   @authenticate_command("execute_actions")
859 |   def actions(
860 |       action_type: ActionType = typer.Option(
    |  _______________________________^
861 | |         ActionType.ALL, "--type", "-t", help="Type of action to execute.",
862 | |     ),
    | |_____^ B008
863 |       dry_run: bool = typer.Option(
864 |           True, "--dry-run", "-d", help="Perform a dry run without making changes.",
    |

src/repo_organizer/cli/app.py:863:5: FBT001 Boolean-typed positional argument in function definition
    |
861 |         ActionType.ALL, "--type", "-t", help="Type of action to execute.",
862 |     ),
863 |     dry_run: bool = typer.Option(
    |     ^^^^^^^ FBT001
864 |         True, "--dry-run", "-d", help="Perform a dry run without making changes.",
865 |     ),
    |

src/repo_organizer/cli/app.py:864:9: FBT003 Boolean positional value in function call
    |
862 |     ),
863 |     dry_run: bool = typer.Option(
864 |         True, "--dry-run", "-d", help="Perform a dry run without making changes.",
    |         ^^^^ FBT003
865 |     ),
866 |     force: bool = typer.Option(
    |

src/repo_organizer/cli/app.py:866:5: FBT001 Boolean-typed positional argument in function definition
    |
864 |         True, "--dry-run", "-d", help="Perform a dry run without making changes.",
865 |     ),
866 |     force: bool = typer.Option(
    |     ^^^^^ FBT001
867 |         False, "--force", "-f", help="Skip confirmation prompts.",
868 |     ),
    |

src/repo_organizer/cli/app.py:867:9: FBT003 Boolean positional value in function call
    |
865 |     ),
866 |     force: bool = typer.Option(
867 |         False, "--force", "-f", help="Skip confirmation prompts.",
    |         ^^^^^ FBT003
868 |     ),
869 |     output_dir: str | None = typer.Option(
    |

src/repo_organizer/cli/app.py:872:89: E501 Line too long (97 > 88)
    |
870 |         None, "--output-dir", "-o", help="Override the output directory.",
871 |     ),
872 |     username: str | None = None,  # Added by with_auth_option, manually included here for clarity
    |                                                                                         ^^^^^^^^^ E501
873 | ):
874 |     """Execute repository actions based on analysis results.
    |

src/repo_organizer/cli/app.py:892:12: BLE001 Do not catch blind exception: `Exception`
    |
890 |             username=username,
891 |         )
892 |     except Exception as e:
    |            ^^^^^^^^^ BLE001
893 |         console.print(f"[bold red]Error executing actions: {e}[/]")
894 |         if getattr(e, "__cause__", None):
    |

src/repo_organizer/cli/app.py:899:9: B904 Within an `except` clause, raise exceptions with `raise ... from err` or `raise ... from None` to distinguish them from errors in exception handling
    |
898 |         console.print(traceback.format_exc(), style="red")
899 |         raise typer.Exit(code=1)
    |         ^^^^^^^^^^^^^^^^^^^^^^^^ B904
    |

src/repo_organizer/cli/auth_middleware.py:58:68: ANN401 Dynamically typed expressions (typing.Any) are disallowed in `wrapper`
   |
56 |         typer_callback = getattr(func, "__typer_callback__", None)
57 |
58 |         def wrapper(*args: list[Any], **kwargs: dict[str, Any]) -> Any:
   |                                                                    ^^^ ANN401
59 |             """Wrapper function that performs authentication validation.
   |

src/repo_organizer/cli/auth_middleware.py:130:9: ANN202 Missing return type annotation for private function `command_with_auth`
    |
129 |     # Define a new command decorator that adds the username option
130 |     def command_with_auth(*args, **kwargs):
    |         ^^^^^^^^^^^^^^^^^ ANN202
131 |         """Enhanced command decorator that adds authentication options.
    |
    = help: Add return type annotation

src/repo_organizer/cli/auth_middleware.py:130:27: ANN002 Missing type annotation for `*args`
    |
129 |     # Define a new command decorator that adds the username option
130 |     def command_with_auth(*args, **kwargs):
    |                           ^^^^^ ANN002
131 |         """Enhanced command decorator that adds authentication options.
    |

src/repo_organizer/cli/auth_middleware.py:130:34: ANN003 Missing type annotation for `**kwargs`
    |
129 |     # Define a new command decorator that adds the username option
130 |     def command_with_auth(*args, **kwargs):
    |                                  ^^^^^^^^ ANN003
131 |         """Enhanced command decorator that adds authentication options.
    |

src/repo_organizer/cli/auth_middleware.py:144:13: ANN202 Missing return type annotation for private function `decorator_with_auth`
    |
143 |         # Define a new decorator that adds the username option
144 |         def decorator_with_auth(func):
    |             ^^^^^^^^^^^^^^^^^^^ ANN202
145 |             """Add authentication options to the command function.
    |
    = help: Add return type annotation

src/repo_organizer/cli/auth_middleware.py:144:33: ANN001 Missing type annotation for function argument `func`
    |
143 |         # Define a new decorator that adds the username option
144 |         def decorator_with_auth(func):
    |                                 ^^^^ ANN001
145 |             """Add authentication options to the command function.
    |

src/repo_organizer/cli/auth_middleware.py:159:89: E501 Line too long (92 > 88)
    |
157 |                 "--username",
158 |                 "-u",
159 |                 help="GitHub username for authentication and action attribution (required)",
    |                                                                                         ^^^^ E501
160 |             )
    |

src/repo_organizer/cli/auth_middleware.py:165:52: UP007 Use `X | Y` for type annotations
    |
163 |               # This uses Typer's standard approach for adding options to functions
164 |               if hasattr(func, "__annotations__"):
165 |                   func.__annotations__["username"] = Optional[
    |  ____________________________________________________^
166 | |                     str
167 | |                 ]  # Make it optional for now
    | |_________________^ UP007
168 |               else:
169 |                   func.__annotations__ = {"username": Optional[str]}
    |
    = help: Convert to `X | Y`

src/repo_organizer/cli/auth_middleware.py:169:53: UP007 Use `X | Y` for type annotations
    |
167 |                 ]  # Make it optional for now
168 |             else:
169 |                 func.__annotations__ = {"username": Optional[str]}
    |                                                     ^^^^^^^^^^^^^ UP007
170 |
171 |             # No default value since it's required
    |
    = help: Convert to `X | Y`

src/repo_organizer/cli/auth_middleware.py:193:5: FBT001 Boolean-typed positional argument in function definition
    |
191 |     command_name: str,
192 |     username: str | None = None,
193 |     exit_on_failure: bool = True,
    |     ^^^^^^^^^^^^^^^ FBT001
194 |     logger: Logger | None = None,
195 |     auth_logger: AuthLogger | None = None,
    |

src/repo_organizer/cli/auth_middleware.py:193:5: FBT002 Boolean default positional argument in function definition
    |
191 |     command_name: str,
192 |     username: str | None = None,
193 |     exit_on_failure: bool = True,
    |     ^^^^^^^^^^^^^^^ FBT002
194 |     logger: Logger | None = None,
195 |     auth_logger: AuthLogger | None = None,
    |

src/repo_organizer/cli/auth_middleware.py:197:89: E501 Line too long (98 > 88)
    |
195 |     auth_logger: AuthLogger | None = None,
196 | ) -> bool:
197 |     """Standalone function to validate authentication for a command outside the decorator pattern.
    |                                                                                         ^^^^^^^^^^ E501
198 |
199 |     Args:
    |

src/repo_organizer/cli/commands.py:61:18: PTH123 `open()` should be replaced by `Path.open()`
   |
59 |             reasoning = ""
60 |
61 |             with open(md_file) as f:
   |                  ^^^^ PTH123
62 |                 content = f.read()
   |

src/repo_organizer/cli/commands.py:91:16: BLE001 Do not catch blind exception: `Exception`
   |
90 |                 analyses.append(analysis)
91 |         except Exception as e:
   |                ^^^^^^^^^ BLE001
92 |             console.print(f"[red]Error loading analysis {md_file}: {e}[/]")
   |

src/repo_organizer/cli/commands.py:97:5: C901 `execute_actions` is too complex (19 > 10)
   |
97 | def execute_actions(
   |     ^^^^^^^^^^^^^^^ C901
98 |     dry_run: bool = True,
99 |     force: bool = False,
   |

src/repo_organizer/cli/commands.py:97:5: PLR0913 Too many arguments in function definition (6 > 5)
   |
97 | def execute_actions(
   |     ^^^^^^^^^^^^^^^ PLR0913
98 |     dry_run: bool = True,
99 |     force: bool = False,
   |

src/repo_organizer/cli/commands.py:97:5: PLR0912 Too many branches (20 > 12)
   |
97 | def execute_actions(
   |     ^^^^^^^^^^^^^^^ PLR0912
98 |     dry_run: bool = True,
99 |     force: bool = False,
   |

src/repo_organizer/cli/commands.py:97:5: PLR0915 Too many statements (88 > 50)
   |
97 | def execute_actions(
   |     ^^^^^^^^^^^^^^^ PLR0915
98 |     dry_run: bool = True,
99 |     force: bool = False,
   |

src/repo_organizer/cli/commands.py:97:5: ANN201 Missing return type annotation for public function `execute_actions`
   |
97 | def execute_actions(
   |     ^^^^^^^^^^^^^^^ ANN201
98 |     dry_run: bool = True,
99 |     force: bool = False,
   |
   = help: Add return type annotation: `None`

src/repo_organizer/cli/commands.py:98:5: FBT001 Boolean-typed positional argument in function definition
    |
 97 | def execute_actions(
 98 |     dry_run: bool = True,
    |     ^^^^^^^ FBT001
 99 |     force: bool = False,
100 |     output_dir: str | None = None,
    |

src/repo_organizer/cli/commands.py:98:5: FBT002 Boolean default positional argument in function definition
    |
 97 | def execute_actions(
 98 |     dry_run: bool = True,
    |     ^^^^^^^ FBT002
 99 |     force: bool = False,
100 |     output_dir: str | None = None,
    |

src/repo_organizer/cli/commands.py:99:5: FBT001 Boolean-typed positional argument in function definition
    |
 97 | def execute_actions(
 98 |     dry_run: bool = True,
 99 |     force: bool = False,
    |     ^^^^^ FBT001
100 |     output_dir: str | None = None,
101 |     github_token: str | None = None,
    |

src/repo_organizer/cli/commands.py:99:5: FBT002 Boolean default positional argument in function definition
    |
 97 | def execute_actions(
 98 |     dry_run: bool = True,
 99 |     force: bool = False,
    |     ^^^^^ FBT002
100 |     output_dir: str | None = None,
101 |     github_token: str | None = None,
    |

src/repo_organizer/cli/commands.py:103:15: RUF013 PEP 484 prohibits implicit `Optional`
    |
101 |     github_token: str | None = None,
102 |     action_type: str | None = None,
103 |     username: str = None,  # Now required
    |               ^^^ RUF013
104 | ):
105 |     """Execute repository actions based on analysis results.
    |
    = help: Convert to `T | None`

src/repo_organizer/cli/commands.py:136:5: F841 Local variable `rate_limiter` is assigned to but never used
    |
135 |     # Create rate limiter for statistics (not used directly)
136 |     rate_limiter = RateLimiter(settings.github_rate_limit, name="GitHub")
    |     ^^^^^^^^^^^^ F841
137 |
138 |     # Load analyses
    |
    = help: Remove assignment to unused variable `rate_limiter`

src/repo_organizer/cli/commands.py:182:5: SIM102 Use a single `if` statement instead of nested `if` statements
    |
181 |       # Confirm execution
182 | /     if not force and not dry_run:
183 | |         if not typer.confirm("Execute these actions?"):
    | |_______________________________________________________^ SIM102
184 |               msg = "Operation cancelled by user"
185 |               logger.log(msg, level="info")
    |
    = help: Combine `if` statements using `and`

src/repo_organizer/cli/commands.py:223:89: E501 Line too long (94 > 88)
    |
221 |                     logger.log(msg, level="info")
222 |                     console.print(f"[red]{msg}[/]")
223 |                     # In the future, we would use the GitHub REST API to delete the repository
    |                                                                                         ^^^^^^ E501
224 |                 elif action == "ARCHIVE":
225 |                     # Archive repository logic
    |

src/repo_organizer/cli/commands.py:229:89: E501 Line too long (95 > 88)
    |
227 |                     logger.log(msg, level="info")
228 |                     console.print(f"[yellow]{msg}[/]")
229 |                     # In the future, we would use the GitHub REST API to archive the repository
    |                                                                                         ^^^^^^^ E501
230 |                 elif action == "EXTRACT":
231 |                     # Extract repository logic
    |

src/repo_organizer/cli/commands.py:235:89: E501 Line too long (94 > 88)
    |
233 |                     logger.log(msg, level="info")
234 |                     console.print(f"[blue]{msg}[/]")
235 |                     # In the future, we would extract valuable parts before archiving/deleting
    |                                                                                         ^^^^^^ E501
236 |                 elif action == "PIN":
237 |                     # Pin repository logic
    |

src/repo_organizer/cli/commands.py:241:89: E501 Line too long (91 > 88)
    |
239 |                     logger.log(msg, level="info")
240 |                     console.print(f"[green]{msg}[/]")
241 |                     # In the future, we would use the GitHub REST API to pin the repository
    |                                                                                         ^^^ E501
242 |                 success_count += 1
243 |             except Exception as e:
    |

src/repo_organizer/cli/commands.py:243:20: BLE001 Do not catch blind exception: `Exception`
    |
241 |                     # In the future, we would use the GitHub REST API to pin the repository
242 |                 success_count += 1
243 |             except Exception as e:
    |                    ^^^^^^^^^ BLE001
244 |                 error_msg = f"Error executing {action} for {repo_name}: {e}"
245 |                 logger.log(error_msg, level="error")
    |

src/repo_organizer/cli/commands.py:257:89: E501 Line too long (95 > 88)
    |
255 |         console.print(f"[green]{msg}[/]")
256 |     else:
257 |         msg = f"Actions executed successfully: {success_count} succeeded, {error_count} failed"
    |                                                                                         ^^^^^^^ E501
258 |         logger.log(msg, level="success")
259 |         console.print(f"[green]{msg}[/]")
    |

src/repo_organizer/cli/dev.py:12:5: ANN201 Missing return type annotation for public function `lint`
   |
11 | @dev_app.command()
12 | def lint():
   |     ^^^^ ANN201
13 |     """Run ruff check on the codebase."""
14 |     result = subprocess.run(["ruff", "check", "."], check=False)
   |
   = help: Add return type annotation: `None`

src/repo_organizer/cli/dev.py:14:14: S603 `subprocess` call: check for execution of untrusted input
   |
12 | def lint():
13 |     """Run ruff check on the codebase."""
14 |     result = subprocess.run(["ruff", "check", "."], check=False)
   |              ^^^^^^^^^^^^^^ S603
15 |     sys.exit(result.returncode)
   |

src/repo_organizer/cli/dev.py:14:29: S607 Starting a process with a partial executable path
   |
12 | def lint():
13 |     """Run ruff check on the codebase."""
14 |     result = subprocess.run(["ruff", "check", "."], check=False)
   |                             ^^^^^^^^^^^^^^^^^^^^^^ S607
15 |     sys.exit(result.returncode)
   |

src/repo_organizer/cli/dev.py:19:5: A001 Variable `format` is shadowing a Python builtin
   |
18 | @dev_app.command()
19 | def format():
   |     ^^^^^^ A001
20 |     """Run ruff format on the codebase."""
21 |     result = subprocess.run(["ruff", "format", "."], check=False)
   |

src/repo_organizer/cli/dev.py:19:5: ANN201 Missing return type annotation for public function `format`
   |
18 | @dev_app.command()
19 | def format():
   |     ^^^^^^ ANN201
20 |     """Run ruff format on the codebase."""
21 |     result = subprocess.run(["ruff", "format", "."], check=False)
   |
   = help: Add return type annotation: `None`

src/repo_organizer/cli/dev.py:21:14: S603 `subprocess` call: check for execution of untrusted input
   |
19 | def format():
20 |     """Run ruff format on the codebase."""
21 |     result = subprocess.run(["ruff", "format", "."], check=False)
   |              ^^^^^^^^^^^^^^ S603
22 |     sys.exit(result.returncode)
   |

src/repo_organizer/cli/dev.py:21:29: S607 Starting a process with a partial executable path
   |
19 | def format():
20 |     """Run ruff format on the codebase."""
21 |     result = subprocess.run(["ruff", "format", "."], check=False)
   |                             ^^^^^^^^^^^^^^^^^^^^^^^ S607
22 |     sys.exit(result.returncode)
   |

src/repo_organizer/cli/dev.py:26:5: ANN201 Missing return type annotation for public function `check`
   |
25 | @dev_app.command()
26 | def check():
   |     ^^^^^ ANN201
27 |     """Run all checks (lint, format, test)."""
28 |     exit_code = 0
   |
   = help: Add return type annotation: `None`

src/repo_organizer/cli/dev.py:30:5: T201 `print` found
   |
28 |     exit_code = 0
29 |
30 |     print("Running linting checks...")
   |     ^^^^^ T201
31 |     exit_code |= subprocess.run(["ruff", "check", "."], check=False).returncode
   |
   = help: Remove `print`

src/repo_organizer/cli/dev.py:31:18: S603 `subprocess` call: check for execution of untrusted input
   |
30 |     print("Running linting checks...")
31 |     exit_code |= subprocess.run(["ruff", "check", "."], check=False).returncode
   |                  ^^^^^^^^^^^^^^ S603
32 |
33 |     print("\nChecking code formatting...")
   |

src/repo_organizer/cli/dev.py:31:33: S607 Starting a process with a partial executable path
   |
30 |     print("Running linting checks...")
31 |     exit_code |= subprocess.run(["ruff", "check", "."], check=False).returncode
   |                                 ^^^^^^^^^^^^^^^^^^^^^^ S607
32 |
33 |     print("\nChecking code formatting...")
   |

src/repo_organizer/cli/dev.py:33:5: T201 `print` found
   |
31 |     exit_code |= subprocess.run(["ruff", "check", "."], check=False).returncode
32 |
33 |     print("\nChecking code formatting...")
   |     ^^^^^ T201
34 |     exit_code |= subprocess.run(
35 |         ["ruff", "format", ".", "--check"], check=False,
   |
   = help: Remove `print`

src/repo_organizer/cli/dev.py:34:18: S603 `subprocess` call: check for execution of untrusted input
   |
33 |     print("\nChecking code formatting...")
34 |     exit_code |= subprocess.run(
   |                  ^^^^^^^^^^^^^^ S603
35 |         ["ruff", "format", ".", "--check"], check=False,
36 |     ).returncode
   |

src/repo_organizer/cli/dev.py:35:9: S607 Starting a process with a partial executable path
   |
33 |     print("\nChecking code formatting...")
34 |     exit_code |= subprocess.run(
35 |         ["ruff", "format", ".", "--check"], check=False,
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ S607
36 |     ).returncode
   |

src/repo_organizer/cli/dev.py:38:5: T201 `print` found
   |
36 |     ).returncode
37 |
38 |     print("\nRunning tests...")
   |     ^^^^^ T201
39 |     exit_code |= subprocess.run(["pytest", "tests/"], check=False).returncode
   |
   = help: Remove `print`

src/repo_organizer/cli/dev.py:39:18: S603 `subprocess` call: check for execution of untrusted input
   |
38 |     print("\nRunning tests...")
39 |     exit_code |= subprocess.run(["pytest", "tests/"], check=False).returncode
   |                  ^^^^^^^^^^^^^^ S603
40 |
41 |     sys.exit(exit_code)
   |

src/repo_organizer/cli/dev.py:39:33: S607 Starting a process with a partial executable path
   |
38 |     print("\nRunning tests...")
39 |     exit_code |= subprocess.run(["pytest", "tests/"], check=False).returncode
   |                                 ^^^^^^^^^^^^^^^^^^^^ S607
40 |
41 |     sys.exit(exit_code)
   |

src/repo_organizer/config/__init__.py:1:1: D200 One-line docstring should fit on one line
  |
1 | / """Configuration management for the GitHub Repository Organizer.
2 | | """
  | |___^ D200
3 |
4 |   from .settings import Settings, load_settings
  |
  = help: Reformat to one line

src/repo_organizer/config/settings.py:43:9: FBT003 Boolean positional value in function call
   |
41 |     llm_temperature: float = Field(0.2, description="LLM temperature (0.0-1.0)")
42 |     llm_thinking_enabled: bool = Field(
43 |         True, description="Enable extended thinking for LLM",
   |         ^^^^ FBT003
44 |     )
45 |     llm_thinking_budget: int = Field(16000, description="Token budget for LLM thinking")
   |

src/repo_organizer/config/settings.py:53:33: FBT003 Boolean positional value in function call
   |
52 |     # Debug settings
53 |     debug_logging: bool = Field(False, description="Enable debug logging")
   |                                 ^^^^^ FBT003
54 |     quiet_mode: bool = Field(False, description="Minimize console output")
   |

src/repo_organizer/config/settings.py:54:30: FBT003 Boolean positional value in function call
   |
52 |     # Debug settings
53 |     debug_logging: bool = Field(False, description="Enable debug logging")
54 |     quiet_mode: bool = Field(False, description="Minimize console output")
   |                              ^^^^^ FBT003
55 |
56 |     # Application settings
   |

src/repo_organizer/config/settings.py:65:36: FBT003 Boolean positional value in function call
   |
64 |     # Feature flags
65 |     enable_analytics: bool = Field(False, description="Enable usage analytics")
   |                                    ^^^^^ FBT003
66 |     debug_mode: bool = Field(
67 |         False, description="Enable debug mode with additional logging",
   |

src/repo_organizer/config/settings.py:67:9: FBT003 Boolean positional value in function call
   |
65 |     enable_analytics: bool = Field(False, description="Enable usage analytics")
66 |     debug_mode: bool = Field(
67 |         False, description="Enable debug mode with additional logging",
   |         ^^^^^ FBT003
68 |     )
   |

src/repo_organizer/config/settings.py:76:9: ANN201 Missing return type annotation for public function `validate_github_token`
   |
75 |     @field_validator("github_token")
76 |     def validate_github_token(cls, v):
   |         ^^^^^^^^^^^^^^^^^^^^^ ANN201
77 |         if not v or len(v) < 10:
78 |             raise ValueError("GitHub token is required and must be valid")
   |
   = help: Add return type annotation

src/repo_organizer/config/settings.py:76:9: D102 Missing docstring in public method
   |
75 |     @field_validator("github_token")
76 |     def validate_github_token(cls, v):
   |         ^^^^^^^^^^^^^^^^^^^^^ D102
77 |         if not v or len(v) < 10:
78 |             raise ValueError("GitHub token is required and must be valid")
   |

src/repo_organizer/config/settings.py:76:31: N805 First argument of a method should be named `self`
   |
75 |     @field_validator("github_token")
76 |     def validate_github_token(cls, v):
   |                               ^^^ N805
77 |         if not v or len(v) < 10:
78 |             raise ValueError("GitHub token is required and must be valid")
   |
   = help: Rename `cls` to `self`

src/repo_organizer/config/settings.py:76:36: ANN001 Missing type annotation for function argument `v`
   |
75 |     @field_validator("github_token")
76 |     def validate_github_token(cls, v):
   |                                    ^ ANN001
77 |         if not v or len(v) < 10:
78 |             raise ValueError("GitHub token is required and must be valid")
   |

src/repo_organizer/config/settings.py:77:30: PLR2004 Magic value used in comparison, consider replacing `10` with a constant variable
   |
75 |     @field_validator("github_token")
76 |     def validate_github_token(cls, v):
77 |         if not v or len(v) < 10:
   |                              ^^ PLR2004
78 |             raise ValueError("GitHub token is required and must be valid")
79 |         return v
   |

src/repo_organizer/config/settings.py:78:19: TRY003 Avoid specifying long messages outside the exception class
   |
76 |     def validate_github_token(cls, v):
77 |         if not v or len(v) < 10:
78 |             raise ValueError("GitHub token is required and must be valid")
   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
79 |         return v
   |

src/repo_organizer/config/settings.py:78:30: EM101 Exception must not use a string literal, assign to variable first
   |
76 |     def validate_github_token(cls, v):
77 |         if not v or len(v) < 10:
78 |             raise ValueError("GitHub token is required and must be valid")
   |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ EM101
79 |         return v
   |
   = help: Assign to variable; remove string literal

src/repo_organizer/config/settings.py:82:26: N805 First argument of a method should be named `self`
   |
81 |     @field_validator("output_dir", "logs_dir")
82 |     def create_directory(cls, v: str) -> str:
   |                          ^^^ N805
83 |         """Return a fully-qualified path and guarantee the directory exists.
   |
   = help: Rename `cls` to `self`

src/repo_organizer/config/settings.py:94:20: PTH111 `os.path.expanduser()` should be replaced by `Path.expanduser()`
   |
92 |         # Expand ``~`` to the user home and any *nix environment
93 |         # variables that may be present in the supplied string.
94 |         expanded = os.path.expanduser(os.path.expandvars(v))
   |                    ^^^^^^^^^^^^^^^^^^ PTH111
95 |
96 |         # Convert to an absolute path so there is only ever a single,
   |

src/repo_organizer/config/settings.py:99:20: PTH100 `os.path.abspath()` should be replaced by `Path.resolve()`
    |
 97 |         # fully-qualified representation of the directory in the rest of
 98 |         # the codebase.
 99 |         abs_path = os.path.abspath(expanded)
    |                    ^^^^^^^^^^^^^^^ PTH100
100 |
101 |         # Finally, ensure the directory exists.  ``exist_ok=True`` makes
    |

src/repo_organizer/config/settings.py:104:9: PTH103 `os.makedirs()` should be replaced by `Path.mkdir(parents=True)`
    |
102 |         # the call idempotent so the validator can run multiple times
103 |         # safely during the lifetime of the application.
104 |         os.makedirs(abs_path, exist_ok=True)
    |         ^^^^^^^^^^^ PTH103
105 |
106 |         return abs_path
    |

src/repo_organizer/domain/analysis/__init__.py:22:11: RUF022 `__all__` is not sorted
   |
20 |   )
21 |
22 |   __all__ = [
   |  ___________^
23 | |     # Models
24 | |     "RepoAnalysis",
25 | |     "Recommendation",
26 | |     # Protocols
27 | |     "AnalyzerPort",
28 | |     # Services
29 | |     "AnalysisService",
30 | |     "ActionRecommendationService",
31 | |     "RepositoryAnalyzerService",
32 | |     # Value Objects
33 | |     "RecommendedAction",
34 | |     "ActivityLevel",
35 | |     "ValueLevel",
36 | |     "PriorityLevel",
37 | |     "RepoAssessment",
38 | |     # Events
39 | |     "RepositoryAnalysisCompleted",
40 | |     "RepositoryActionRecommended",
41 | |     "HighPriorityIssueIdentified",
42 | |     "AnalysisError",
43 | | ]
   | |_^ RUF022
   |
   = help: Apply an isort-style sorting to `__all__`

src/repo_organizer/domain/analysis/action_recommendation_service.py:11:29: TC003 Move standard library import `collections.abc.Sequence` into a type-checking block
   |
 9 | import asyncio
10 | import logging
11 | from collections.abc import Sequence
   |                             ^^^^^^^^ TC003
12 |
13 | from repo_organizer.domain.analysis.events import (
   |
   = help: Move into type-checking block

src/repo_organizer/domain/analysis/action_recommendation_service.py:17:51: TC001 Move application import `repo_organizer.domain.analysis.models.RepoAnalysis` into a type-checking block
   |
15 |     RepositoryActionRecommended,
16 | )
17 | from repo_organizer.domain.analysis.models import RepoAnalysis
   |                                                   ^^^^^^^^^^^^ TC001
18 | from repo_organizer.domain.analysis.value_objects import (
19 |     ActivityLevel,
   |
   = help: Move into type-checking block

src/repo_organizer/domain/analysis/action_recommendation_service.py:26:57: TC001 Move application import `repo_organizer.domain.source_control.models.Repository` into a type-checking block
   |
24 | )
25 | from repo_organizer.domain.core.events import event_bus
26 | from repo_organizer.domain.source_control.models import Repository
   |                                                         ^^^^^^^^^^ TC001
27 |
28 | logger = logging.getLogger(__name__)
   |
   = help: Move into type-checking block

src/repo_organizer/domain/analysis/action_recommendation_service.py:94:9: C901 `_apply_action_rules` is too complex (13 > 10)
   |
93 |     @staticmethod
94 |     def _apply_action_rules(
   |         ^^^^^^^^^^^^^^^^^^^ C901
95 |         repo: Repository, analysis: RepoAnalysis, assessment: RepoAssessment,
96 |     ) -> RecommendedAction:
   |

src/repo_organizer/domain/analysis/action_recommendation_service.py:94:9: PLR0912 Too many branches (15 > 12)
   |
93 |     @staticmethod
94 |     def _apply_action_rules(
   |         ^^^^^^^^^^^^^^^^^^^ PLR0912
95 |         repo: Repository, analysis: RepoAnalysis, assessment: RepoAssessment,
96 |     ) -> RecommendedAction:
   |

src/repo_organizer/domain/analysis/action_recommendation_service.py:158:9: ARG004 Unused static method argument: `repo`
    |
156 |     @staticmethod
157 |     def _generate_reasoning(
158 |         repo: Repository,
    |         ^^^^ ARG004
159 |         analysis: RepoAnalysis,
160 |         assessment: RepoAssessment,
    |

src/repo_organizer/domain/analysis/action_recommendation_service.py:185:89: E501 Line too long (94 > 88)
    |
183 |             return (
184 |                 f"Repository has low value ({assessment.value.value}) and "
185 |                 f"{assessment.activity.value} activity. No significant code or documentation "
    |                                                                                         ^^^^^^ E501
186 |                 f"worth preserving."
187 |             )
    |

src/repo_organizer/domain/analysis/action_recommendation_service.py:192:89: E501 Line too long (89 > 88)
    |
190 |             return (
191 |                 f"Repository has {assessment.activity.value} activity but "
192 |                 f"{assessment.value.value} value. Should be preserved for reference but "
    |                                                                                         ^ E501
193 |                 f"not actively maintained."
194 |             )
    |

src/repo_organizer/domain/analysis/action_recommendation_service.py:229:19: TRY003 Avoid specifying long messages outside the exception class
    |
227 |         """
228 |         if len(repositories) != len(analyses):
229 |             raise ValueError("Number of repositories and analyses must match")
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
230 |
231 |         # Create a dictionary to store results
    |

src/repo_organizer/domain/analysis/action_recommendation_service.py:229:30: EM101 Exception must not use a string literal, assign to variable first
    |
227 |         """
228 |         if len(repositories) != len(analyses):
229 |             raise ValueError("Number of repositories and analyses must match")
    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ EM101
230 |
231 |         # Create a dictionary to store results
    |
    = help: Assign to variable; remove string literal

src/repo_organizer/domain/analysis/action_recommendation_service.py:255:33: G004 Logging statement uses f-string
    |
253 |                         if isinstance(recommendations[i], Exception):
254 |                             logger.error(
255 |                                 f"Error recommending action for {analysis.repo_name}: {recommendations[i]!s}",
    |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
256 |                             )
257 |                             continue
    |

src/repo_organizer/domain/analysis/action_recommendation_service.py:255:89: E501 Line too long (110 > 88)
    |
253 |                         if isinstance(recommendations[i], Exception):
254 |                             logger.error(
255 |                                 f"Error recommending action for {analysis.repo_name}: {recommendations[i]!s}",
    |                                                                                         ^^^^^^^^^^^^^^^^^^^^^^ E501
256 |                             )
257 |                             continue
    |

src/repo_organizer/domain/analysis/action_recommendation_service.py:259:20: BLE001 Do not catch blind exception: `Exception`
    |
257 |                             continue
258 |                         results[analysis.repo_name] = recommendations[i]
259 |             except Exception as e:
    |                    ^^^^^^^^^ BLE001
260 |                 logger.error(f"Error during batch recommendation processing: {e!s}")
    |

src/repo_organizer/domain/analysis/action_recommendation_service.py:260:17: TRY400 Use `logging.exception` instead of `logging.error`
    |
258 |                         results[analysis.repo_name] = recommendations[i]
259 |             except Exception as e:
260 |                 logger.error(f"Error during batch recommendation processing: {e!s}")
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY400
261 |
262 |         return results
    |
    = help: Replace with `exception`

src/repo_organizer/domain/analysis/action_recommendation_service.py:260:30: G004 Logging statement uses f-string
    |
258 |                         results[analysis.repo_name] = recommendations[i]
259 |             except Exception as e:
260 |                 logger.error(f"Error during batch recommendation processing: {e!s}")
    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
261 |
262 |         return results
    |

src/repo_organizer/domain/analysis/events.py:3:89: E501 Line too long (89 > 88)
  |
1 | """Domain events for the Analysis bounded context.
2 |
3 | These events represent significant state changes and actions within the analysis process.
  |                                                                                         ^ E501
4 | """
  |

src/repo_organizer/domain/analysis/events.py:24:27: RUF009 Do not perform function call `uuid.uuid4` in dataclass defaults
   |
22 |     aggregate_id: str
23 |     analysis: RepoAnalysis
24 |     event_id: uuid.UUID = uuid.uuid4()
   |                           ^^^^^^^^^^^^ RUF009
25 |     timestamp: datetime = datetime.now(UTC)
   |

src/repo_organizer/domain/analysis/events.py:25:27: RUF009 Do not perform function call `datetime.now` in dataclass defaults
   |
23 |     analysis: RepoAnalysis
24 |     event_id: uuid.UUID = uuid.uuid4()
25 |     timestamp: datetime = datetime.now(UTC)
   |                           ^^^^^^^^^^^^^^^^^ RUF009
26 |
27 |     def to_dict(self) -> dict[str, Any]:
   |

src/repo_organizer/domain/analysis/events.py:56:27: RUF009 Do not perform function call `uuid.uuid4` in dataclass defaults
   |
54 |     action: str  # DELETE/ARCHIVE/EXTRACT/KEEP/PIN
55 |     reasoning: str
56 |     event_id: uuid.UUID = uuid.uuid4()
   |                           ^^^^^^^^^^^^ RUF009
57 |     timestamp: datetime = datetime.now(UTC)
   |

src/repo_organizer/domain/analysis/events.py:57:27: RUF009 Do not perform function call `datetime.now` in dataclass defaults
   |
55 |     reasoning: str
56 |     event_id: uuid.UUID = uuid.uuid4()
57 |     timestamp: datetime = datetime.now(UTC)
   |                           ^^^^^^^^^^^^^^^^^ RUF009
58 |
59 |     def to_dict(self) -> dict[str, Any]:
   |

src/repo_organizer/domain/analysis/events.py:85:27: RUF009 Do not perform function call `uuid.uuid4` in dataclass defaults
   |
83 |     repo_name: str
84 |     issue: Recommendation
85 |     event_id: uuid.UUID = uuid.uuid4()
   |                           ^^^^^^^^^^^^ RUF009
86 |     timestamp: datetime = datetime.now(UTC)
   |

src/repo_organizer/domain/analysis/events.py:86:27: RUF009 Do not perform function call `datetime.now` in dataclass defaults
   |
84 |     issue: Recommendation
85 |     event_id: uuid.UUID = uuid.uuid4()
86 |     timestamp: datetime = datetime.now(UTC)
   |                           ^^^^^^^^^^^^^^^^^ RUF009
87 |
88 |     def to_dict(self) -> dict[str, Any]:
   |

src/repo_organizer/domain/analysis/events.py:115:27: RUF009 Do not perform function call `uuid.uuid4` in dataclass defaults
    |
113 |     repo_name: str
114 |     error_message: str
115 |     event_id: uuid.UUID = uuid.uuid4()
    |                           ^^^^^^^^^^^^ RUF009
116 |     timestamp: datetime = datetime.now(UTC)
    |

src/repo_organizer/domain/analysis/events.py:116:27: RUF009 Do not perform function call `datetime.now` in dataclass defaults
    |
114 |     error_message: str
115 |     event_id: uuid.UUID = uuid.uuid4()
116 |     timestamp: datetime = datetime.now(UTC)
    |                           ^^^^^^^^^^^^^^^^^ RUF009
117 |
118 |     def to_dict(self) -> dict[str, Any]:
    |

src/repo_organizer/domain/analysis/models.py:3:69: RUF002 Docstring contains ambiguous `–` (EN DASH). Did you mean `-` (HYPHEN-MINUS)?
  |
1 | """Domain model for repository *analysis* results.
2 |
3 | The analysis bounded context essentially lives *entirely* in memory – there is
  |                                                                     ^ RUF002
4 | no notion of persistence at the domain level.  Therefore, simple immutable
5 | dataclasses are more than enough and do not require the heavier runtime cost
  |

src/repo_organizer/domain/analysis/models.py:15:29: TC003 Move standard library import `collections.abc.Sequence` into a type-checking block
   |
13 | from __future__ import annotations
14 |
15 | from collections.abc import Sequence
   |                             ^^^^^^^^ TC003
16 | from dataclasses import dataclass
   |
   = help: Move into type-checking block

src/repo_organizer/domain/analysis/models.py:41:9: D102 Missing docstring in public method
   |
39 |     # Conversion helpers -----------------------------------------------------
40 |     @staticmethod
41 |     def from_pydantic(pyd_obj: _RecommendationPydantic) -> Recommendation:
   |         ^^^^^^^^^^^^^ D102
42 |         return Recommendation(
43 |             recommendation=pyd_obj.recommendation,
   |

src/repo_organizer/domain/analysis/models.py:48:9: D102 Missing docstring in public method
   |
46 |         )
47 |
48 |     def to_pydantic(self) -> _RecommendationPydantic:
   |         ^^^^^^^^^^^ D102
49 |         return _RecommendationPydantic(
50 |             recommendation=self.recommendation,
   |

src/repo_organizer/domain/analysis/models.py:78:9: D102 Missing docstring in public method
   |
76 |     # Conversion helpers -----------------------------------------------------
77 |     @staticmethod
78 |     def from_pydantic(pyd_obj: _RepoAnalysisPydantic) -> RepoAnalysis:
   |         ^^^^^^^^^^^^^ D102
79 |         return RepoAnalysis(
80 |             repo_name=pyd_obj.repo_name,
   |

src/repo_organizer/domain/analysis/models.py:94:9: D102 Missing docstring in public method
   |
92 |         )
93 |
94 |     def to_pydantic(self) -> _RepoAnalysisPydantic:
   |         ^^^^^^^^^^^ D102
95 |         return _RepoAnalysisPydantic(
96 |             repo_name=self.repo_name,
   |

src/repo_organizer/domain/analysis/protocols.py:5:29: TC003 Move standard library import `collections.abc.Mapping` into a type-checking block
  |
3 | from __future__ import annotations
4 |
5 | from collections.abc import Mapping
  |                             ^^^^^^^ TC003
6 | from typing import Protocol
  |
  = help: Move into type-checking block

src/repo_organizer/domain/analysis/protocols.py:8:21: TC001 Move application import `.models.RepoAnalysis` into a type-checking block
  |
6 | from typing import Protocol
7 |
8 | from .models import RepoAnalysis
  |                     ^^^^^^^^^^^^ TC001
  |
  = help: Move into type-checking block

src/repo_organizer/domain/analysis/repository_analyzer_service.py:13:29: TC003 Move standard library import `collections.abc.Callable` into a type-checking block
   |
11 | import logging
12 | import os
13 | from collections.abc import Callable, Sequence
   |                             ^^^^^^^^ TC003
14 | from pathlib import Path
15 | from typing import Any
   |
   = help: Move into type-checking block

src/repo_organizer/domain/analysis/repository_analyzer_service.py:13:39: TC003 Move standard library import `collections.abc.Sequence` into a type-checking block
   |
11 | import logging
12 | import os
13 | from collections.abc import Callable, Sequence
   |                                       ^^^^^^^^ TC003
14 | from pathlib import Path
15 | from typing import Any
   |
   = help: Move into type-checking block

src/repo_organizer/domain/analysis/repository_analyzer_service.py:24:51: TC001 Move application import `repo_organizer.domain.analysis.models.RepoAnalysis` into a type-checking block
   |
22 |     RepositoryAnalysisCompleted,
23 | )
24 | from repo_organizer.domain.analysis.models import RepoAnalysis
   |                                                   ^^^^^^^^^^^^ TC001
25 | from repo_organizer.domain.analysis.protocols import AnalyzerPort
26 | from repo_organizer.domain.core.events import event_bus
   |
   = help: Move into type-checking block

src/repo_organizer/domain/analysis/repository_analyzer_service.py:25:54: TC001 Move application import `repo_organizer.domain.analysis.protocols.AnalyzerPort` into a type-checking block
   |
23 | )
24 | from repo_organizer.domain.analysis.models import RepoAnalysis
25 | from repo_organizer.domain.analysis.protocols import AnalyzerPort
   |                                                      ^^^^^^^^^^^^ TC001
26 | from repo_organizer.domain.core.events import event_bus
27 | from repo_organizer.domain.source_control.models import Repository
   |
   = help: Move into type-checking block

src/repo_organizer/domain/analysis/repository_analyzer_service.py:27:57: TC001 Move application import `repo_organizer.domain.source_control.models.Repository` into a type-checking block
   |
25 | from repo_organizer.domain.analysis.protocols import AnalyzerPort
26 | from repo_organizer.domain.core.events import event_bus
27 | from repo_organizer.domain.source_control.models import Repository
   |                                                         ^^^^^^^^^^ TC001
28 | from repo_organizer.domain.source_control.protocols import SourceControlPort
   |
   = help: Move into type-checking block

src/repo_organizer/domain/analysis/repository_analyzer_service.py:28:60: TC001 Move application import `repo_organizer.domain.source_control.protocols.SourceControlPort` into a type-checking block
   |
26 | from repo_organizer.domain.core.events import event_bus
27 | from repo_organizer.domain.source_control.models import Repository
28 | from repo_organizer.domain.source_control.protocols import SourceControlPort
   |                                                            ^^^^^^^^^^^^^^^^^ TC001
29 |
30 | logger = logging.getLogger(__name__)
   |
   = help: Move into type-checking block

src/repo_organizer/domain/analysis/repository_analyzer_service.py:41:9: PLR0913 Too many arguments in function definition (7 > 5)
   |
39 |     """
40 |
41 |     def __init__(
   |         ^^^^^^^^ PLR0913
42 |         self,
43 |         output_dir: str | Path,
   |

src/repo_organizer/domain/analysis/repository_analyzer_service.py:41:9: ANN204 Missing return type annotation for special method `__init__`
   |
39 |     """
40 |
41 |     def __init__(
   |         ^^^^^^^^ ANN204
42 |         self,
43 |         output_dir: str | Path,
   |
   = help: Add return type annotation: `None`

src/repo_organizer/domain/analysis/repository_analyzer_service.py:47:9: FBT001 Boolean-typed positional argument in function definition
   |
45 |         analyzer_port: AnalyzerPort,
46 |         max_repos: int | None = None,
47 |         debug: bool = False,
   |         ^^^^^ FBT001
48 |         repo_filter: Callable[[Repository], bool] | None = None,
49 |         force_reanalyze: bool = False,
   |

src/repo_organizer/domain/analysis/repository_analyzer_service.py:47:9: FBT002 Boolean default positional argument in function definition
   |
45 |         analyzer_port: AnalyzerPort,
46 |         max_repos: int | None = None,
47 |         debug: bool = False,
   |         ^^^^^ FBT002
48 |         repo_filter: Callable[[Repository], bool] | None = None,
49 |         force_reanalyze: bool = False,
   |

src/repo_organizer/domain/analysis/repository_analyzer_service.py:49:9: FBT001 Boolean-typed positional argument in function definition
   |
47 |         debug: bool = False,
48 |         repo_filter: Callable[[Repository], bool] | None = None,
49 |         force_reanalyze: bool = False,
   |         ^^^^^^^^^^^^^^^ FBT001
50 |     ):
51 |         """Initialize the repository analyzer service.
   |

src/repo_organizer/domain/analysis/repository_analyzer_service.py:49:9: FBT002 Boolean default positional argument in function definition
   |
47 |         debug: bool = False,
48 |         repo_filter: Callable[[Repository], bool] | None = None,
49 |         force_reanalyze: bool = False,
   |         ^^^^^^^^^^^^^^^ FBT002
50 |     ):
51 |         """Initialize the repository analyzer service.
   |

src/repo_organizer/domain/analysis/repository_analyzer_service.py:71:9: PTH103 `os.makedirs()` should be replaced by `Path.mkdir(parents=True)`
   |
70 |         # Create output directory if it doesn't exist
71 |         os.makedirs(self.output_dir, exist_ok=True)
   |         ^^^^^^^^^^^ PTH103
72 |
73 |         # Configure logging
   |

src/repo_organizer/domain/analysis/repository_analyzer_service.py:90:26: G004 Logging statement uses f-string
   |
88 |         # Skip if filtered out
89 |         if self.repo_filter and not self.repo_filter(repo):
90 |             logger.debug(f"Skipping {repo.name} - filtered out")
   |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
91 |             return False
   |

src/repo_organizer/domain/analysis/repository_analyzer_service.py:96:26: G004 Logging statement uses f-string
   |
94 |         report_path = self.output_dir / f"{repo.name}.json"
95 |         if report_path.exists() and not self.force_reanalyze:
96 |             logger.debug(f"Skipping {repo.name} - report exists")
   |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
97 |             return False
   |

src/repo_organizer/domain/analysis/repository_analyzer_service.py:111:25: G004 Logging statement uses f-string
    |
109 |         """
110 |         try:
111 |             logger.info(f"Analyzing repository: {repo.name}")
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
112 |
113 |             # Fetch additional data
    |

src/repo_organizer/domain/analysis/repository_analyzer_service.py:142:13: TRY300 Consider moving this statement to an `else` block
    |
140 |             await self.write_report(repo.name, analysis)
141 |
142 |             return analysis
    |             ^^^^^^^^^^^^^^^ TRY300
143 |
144 |         except Exception as e:
    |

src/repo_organizer/domain/analysis/repository_analyzer_service.py:146:13: TRY400 Use `logging.exception` instead of `logging.error`
    |
144 |         except Exception as e:
145 |             error_msg = f"Error analyzing {repo.name}: {e!s}"
146 |             logger.error(error_msg)
    |             ^^^^^^^^^^^^^^^^^^^^^^^ TRY400
147 |
148 |             # Publish error event
    |
    = help: Replace with `exception`

src/repo_organizer/domain/analysis/repository_analyzer_service.py:151:89: E501 Line too long (89 > 88)
    |
149 |             await event_bus.dispatch(
150 |                 AnalysisError(
151 |                     aggregate_id=repo.name, repo_name=repo.name, error_message=error_msg,
    |                                                                                         ^ E501
152 |                 ),
153 |             )
    |

src/repo_organizer/domain/analysis/repository_analyzer_service.py:156:34: TRY401 Redundant exception object included in `logging.exception` call
    |
155 |             if self.debug:
156 |                 logger.exception(e)
    |                                  ^ TRY401
157 |
158 |             return None
    |

src/repo_organizer/domain/analysis/repository_analyzer_service.py:226:14: ASYNC230 Async functions should not open files with blocking methods like `open`
    |
225 |         # Write to file
226 |         with open(report_path, "w") as f:
    |              ^^^^ ASYNC230
227 |             json.dump(report_data, f, indent=2)
    |

src/repo_organizer/domain/analysis/repository_analyzer_service.py:226:14: PTH123 `open()` should be replaced by `Path.open()`
    |
225 |         # Write to file
226 |         with open(report_path, "w") as f:
    |              ^^^^ PTH123
227 |             json.dump(report_data, f, indent=2)
    |

src/repo_organizer/domain/analysis/repository_analyzer_service.py:229:22: G004 Logging statement uses f-string
    |
227 |             json.dump(report_data, f, indent=2)
228 |
229 |         logger.debug(f"Wrote report to {report_path}")
    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
230 |
231 |     async def generate_reports(self, repos: Sequence[Repository]) -> list[RepoAnalysis]:
    |

src/repo_organizer/domain/analysis/repository_analyzer_service.py:247:29: G004 Logging statement uses f-string
    |
245 |             # Check max repos limit
246 |             if self.max_repos and count >= self.max_repos:
247 |                 logger.info(f"Reached max repos limit of {self.max_repos}")
    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
248 |                 break
    |

src/repo_organizer/domain/analysis/repository_analyzer_service.py:264:30: G004 Logging statement uses f-string
    |
262 |         for result in results:
263 |             if isinstance(result, Exception):
264 |                 logger.error(f"Analysis failed with exception: {result}")
    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
265 |             elif result is not None:
266 |                 analyses.append(result)
    |

src/repo_organizer/domain/analysis/services.py:9:29: TC003 Move standard library import `collections.abc.Sequence` into a type-checking block
   |
 8 | import logging
 9 | from collections.abc import Sequence
   |                             ^^^^^^^^ TC003
10 |
11 | from repo_organizer.domain.analysis.events import RepositoryAnalysisCompleted
   |
   = help: Move into type-checking block

src/repo_organizer/domain/analysis/services.py:12:51: TC001 Move application import `repo_organizer.domain.analysis.models.Recommendation` into a type-checking block
   |
11 | from repo_organizer.domain.analysis.events import RepositoryAnalysisCompleted
12 | from repo_organizer.domain.analysis.models import Recommendation, RepoAnalysis
   |                                                   ^^^^^^^^^^^^^^ TC001
13 | from repo_organizer.domain.analysis.value_objects import (
14 |     ActivityLevel,
   |
   = help: Move into type-checking block

src/repo_organizer/domain/analysis/services.py:12:67: TC001 Move application import `repo_organizer.domain.analysis.models.RepoAnalysis` into a type-checking block
   |
11 | from repo_organizer.domain.analysis.events import RepositoryAnalysisCompleted
12 | from repo_organizer.domain.analysis.models import Recommendation, RepoAnalysis
   |                                                                   ^^^^^^^^^^^^ TC001
13 | from repo_organizer.domain.analysis.value_objects import (
14 |     ActivityLevel,
   |
   = help: Move into type-checking block

src/repo_organizer/domain/analysis/services.py:19:57: TC001 Move application import `repo_organizer.domain.source_control.models.Commit` into a type-checking block
   |
17 | )
18 | from repo_organizer.domain.core.events import event_bus
19 | from repo_organizer.domain.source_control.models import Commit, Contributor, Repository
   |                                                         ^^^^^^ TC001
20 |
21 | logger = logging.getLogger(__name__)
   |
   = help: Move into type-checking block

src/repo_organizer/domain/analysis/services.py:19:65: TC001 Move application import `repo_organizer.domain.source_control.models.Contributor` into a type-checking block
   |
17 | )
18 | from repo_organizer.domain.core.events import event_bus
19 | from repo_organizer.domain.source_control.models import Commit, Contributor, Repository
   |                                                                 ^^^^^^^^^^^ TC001
20 |
21 | logger = logging.getLogger(__name__)
   |
   = help: Move into type-checking block

src/repo_organizer/domain/analysis/services.py:19:78: TC001 Move application import `repo_organizer.domain.source_control.models.Repository` into a type-checking block
   |
17 | )
18 | from repo_organizer.domain.core.events import event_bus
19 | from repo_organizer.domain.source_control.models import Commit, Contributor, Repository
   |                                                                              ^^^^^^^^^^ TC001
20 |
21 | logger = logging.getLogger(__name__)
   |
   = help: Move into type-checking block

src/repo_organizer/domain/analysis/services.py:86:89: E501 Line too long (101 > 88)
   |
84 |     @staticmethod
85 |     def should_extract_value(analysis: RepoAnalysis) -> bool:
86 |         """Determine if valuable parts should be extracted from repository before archiving/deleting.
   |                                                                                         ^^^^^^^^^^^^^ E501
87 |
88 |         Args:
   |

src/repo_organizer/domain/analysis/services.py:98:89: E501 Line too long (89 > 88)
    |
 96 |     @staticmethod
 97 |     def evaluate_activity(
 98 |         repo: Repository, commits: Sequence[Commit], contributors: Sequence[Contributor],
    |                                                                                         ^ E501
 99 |     ) -> ActivityLevel:
100 |         """Evaluate the activity level of a repository based on commits and contributors.
    |

src/repo_organizer/domain/analysis/services.py:100:89: E501 Line too long (89 > 88)
    |
 98 |         repo: Repository, commits: Sequence[Commit], contributors: Sequence[Contributor],
 99 |     ) -> ActivityLevel:
100 |         """Evaluate the activity level of a repository based on commits and contributors.
    |                                                                                         ^ E501
101 |
102 |         Args:
    |

src/repo_organizer/domain/analysis/services.py:122:32: PLR2004 Magic value used in comparison, consider replacing `5` with a constant variable
    |
121 |         # Check number of contributors
122 |         if len(contributors) > 5:
    |                                ^ PLR2004
123 |             return ActivityLevel.HIGH
    |

src/repo_organizer/domain/analysis/services.py:126:27: PLR2004 Magic value used in comparison, consider replacing `20` with a constant variable
    |
125 |         # Check number of commits
126 |         if len(commits) > 20:
    |                           ^^ PLR2004
127 |             return ActivityLevel.HIGH
128 |         if len(commits) > 5:
    |

src/repo_organizer/domain/analysis/services.py:128:27: PLR2004 Magic value used in comparison, consider replacing `5` with a constant variable
    |
126 |         if len(commits) > 20:
127 |             return ActivityLevel.HIGH
128 |         if len(commits) > 5:
    |                           ^ PLR2004
129 |             return ActivityLevel.MEDIUM
130 |         return ActivityLevel.LOW
    |

src/repo_organizer/domain/analysis/services.py:135:9: ARG004 Unused static method argument: `languages`
    |
133 |     def evaluate_value(
134 |         repo: Repository,
135 |         languages: Sequence[str] | None = None,
    |         ^^^^^^^^^ ARG004
136 |         stars: int | None = None,
137 |         forks: int | None = None,
    |

src/repo_organizer/domain/analysis/services.py:155:20: PLR2004 Magic value used in comparison, consider replacing `10` with a constant variable
    |
154 |         # High value indicators
155 |         if stars > 10 or forks > 5:
    |                    ^^ PLR2004
156 |             return ValueLevel.HIGH
    |

src/repo_organizer/domain/analysis/services.py:155:34: PLR2004 Magic value used in comparison, consider replacing `5` with a constant variable
    |
154 |         # High value indicators
155 |         if stars > 10 or forks > 5:
    |                                  ^ PLR2004
156 |             return ValueLevel.HIGH
    |

src/repo_organizer/domain/analysis/services.py:159:20: PLR2004 Magic value used in comparison, consider replacing `3` with a constant variable
    |
158 |         # Medium value indicators
159 |         if stars > 3 or forks > 1:
    |                    ^ PLR2004
160 |             return ValueLevel.MEDIUM
    |

src/repo_organizer/domain/analysis/services.py:168:9: ANN001 Missing type annotation for function argument `analyzer_port`
    |
166 |     async def analyze_repositories(
167 |         repositories: Sequence[Repository],
168 |         analyzer_port,  # Using Protocol type
    |         ^^^^^^^^^^^^^ ANN001
169 |         include_commits: bool = True,
170 |         include_contributors: bool = True,
    |

src/repo_organizer/domain/analysis/services.py:169:9: FBT001 Boolean-typed positional argument in function definition
    |
167 |         repositories: Sequence[Repository],
168 |         analyzer_port,  # Using Protocol type
169 |         include_commits: bool = True,
    |         ^^^^^^^^^^^^^^^ FBT001
170 |         include_contributors: bool = True,
171 |     ) -> list[RepoAnalysis]:
    |

src/repo_organizer/domain/analysis/services.py:169:9: FBT002 Boolean default positional argument in function definition
    |
167 |         repositories: Sequence[Repository],
168 |         analyzer_port,  # Using Protocol type
169 |         include_commits: bool = True,
    |         ^^^^^^^^^^^^^^^ FBT002
170 |         include_contributors: bool = True,
171 |     ) -> list[RepoAnalysis]:
    |

src/repo_organizer/domain/analysis/services.py:169:9: ARG004 Unused static method argument: `include_commits`
    |
167 |         repositories: Sequence[Repository],
168 |         analyzer_port,  # Using Protocol type
169 |         include_commits: bool = True,
    |         ^^^^^^^^^^^^^^^ ARG004
170 |         include_contributors: bool = True,
171 |     ) -> list[RepoAnalysis]:
    |

src/repo_organizer/domain/analysis/services.py:170:9: FBT001 Boolean-typed positional argument in function definition
    |
168 |         analyzer_port,  # Using Protocol type
169 |         include_commits: bool = True,
170 |         include_contributors: bool = True,
    |         ^^^^^^^^^^^^^^^^^^^^ FBT001
171 |     ) -> list[RepoAnalysis]:
172 |         """Analyze multiple repositories and generate assessments.
    |

src/repo_organizer/domain/analysis/services.py:170:9: FBT002 Boolean default positional argument in function definition
    |
168 |         analyzer_port,  # Using Protocol type
169 |         include_commits: bool = True,
170 |         include_contributors: bool = True,
    |         ^^^^^^^^^^^^^^^^^^^^ FBT002
171 |     ) -> list[RepoAnalysis]:
172 |         """Analyze multiple repositories and generate assessments.
    |

src/repo_organizer/domain/analysis/services.py:170:9: ARG004 Unused static method argument: `include_contributors`
    |
168 |         analyzer_port,  # Using Protocol type
169 |         include_commits: bool = True,
170 |         include_contributors: bool = True,
    |         ^^^^^^^^^^^^^^^^^^^^ ARG004
171 |     ) -> list[RepoAnalysis]:
172 |         """Analyze multiple repositories and generate assessments.
    |

src/repo_organizer/domain/analysis/services.py:216:20: BLE001 Do not catch blind exception: `Exception`
    |
214 |                 analyses.append(analysis)
215 |
216 |             except Exception as e:
    |                    ^^^^^^^^^ BLE001
217 |                 logger.error(f"Error analyzing repository {repo.name}: {e!s}")
    |

src/repo_organizer/domain/analysis/services.py:217:17: TRY400 Use `logging.exception` instead of `logging.error`
    |
216 |             except Exception as e:
217 |                 logger.error(f"Error analyzing repository {repo.name}: {e!s}")
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY400
218 |
219 |         return analyses
    |
    = help: Replace with `exception`

src/repo_organizer/domain/analysis/services.py:217:30: G004 Logging statement uses f-string
    |
216 |             except Exception as e:
217 |                 logger.error(f"Error analyzing repository {repo.name}: {e!s}")
    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
218 |
219 |         return analyses
    |

src/repo_organizer/domain/core/auth_config.py:109:89: E501 Line too long (89 > 88)
    |
107 |         return config.default_requirements[operation_type] == AuthRequirement.REQUIRED
108 |
109 |     # If the operation is not categorized, default to requiring authentication for safety
    |                                                                                         ^ E501
110 |     return True
    |

src/repo_organizer/domain/core/auth_service.py:19:9: ANN204 Missing return type annotation for special method `__init__`
   |
17 |     """Authentication service for repository operations."""
18 |
19 |     def __init__(self, auth_config: AuthConfig | None = None):
   |         ^^^^^^^^ ANN204
20 |         """Initialize the authentication service.
   |
   = help: Add return type annotation: `None`

src/repo_organizer/domain/core/auth_service.py:30:89: E501 Line too long (90 > 88)
   |
28 |         self, operation_name: str, username: str | None = None,
29 |     ) -> tuple[bool, str | None]:
30 |         """Validate whether an operation can proceed based on authentication requirements.
   |                                                                                         ^^ E501
31 |
32 |         Args:
   |

src/repo_organizer/domain/core/auth_service.py:39:89: E501 Line too long (93 > 88)
   |
37 |             Tuple of (is_valid, error_message)
38 |             - is_valid: True if the operation can proceed, False otherwise
39 |             - error_message: Error message explaining why validation failed, or None if valid
   |                                                                                         ^^^^^ E501
40 |         """
41 |         # Check if this operation requires authentication
   |

src/repo_organizer/domain/core/auth_service.py:53:89: E501 Line too long (101 > 88)
   |
51 |             return (
52 |                 False,
53 |                 f"Authentication required for '{operation_name}': {validation_result.error_message}",
   |                                                                                         ^^^^^^^^^^^^^ E501
54 |             )
   |

src/repo_organizer/domain/core/auth_validator.py:39:24: PLR2004 Magic value used in comparison, consider replacing `3` with a constant variable
   |
38 |     # Check minimum and maximum length
39 |     if len(username) < 3:
   |                        ^ PLR2004
40 |         return ValidationResult(
41 |             is_valid=False, error_message="Username must be at least 3 characters",
   |

src/repo_organizer/domain/core/auth_validator.py:44:24: PLR2004 Magic value used in comparison, consider replacing `50` with a constant variable
   |
42 |         )
43 |
44 |     if len(username) > 50:
   |                        ^^ PLR2004
45 |         return ValidationResult(
46 |             is_valid=False, error_message="Username cannot exceed 50 characters",
   |

src/repo_organizer/domain/core/auth_validator.py:55:89: E501 Line too long (144 > 88)
   |
53 | …
54 | …
55 | …a letter or number and can only contain letters, numbers, hyphens (-), and underscores (_)",
   |                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E501
56 | …
   |

src/repo_organizer/domain/core/events.py:14:5: D200 One-line docstring should fit on one line
   |
12 |   @dataclass(frozen=True)
13 |   class DomainEvent:
14 | /     """Base class for all domain events in the system.
15 | |     """
   | |_______^ D200
16 |
17 |       aggregate_id: str
   |
   = help: Reformat to one line

src/repo_organizer/domain/core/events.py:42:5: D200 One-line docstring should fit on one line
   |
41 |   class EventDispatcher:
42 | /     """Dispatches events to registered handlers. Supports both sync and async handlers.
43 | |     """
   | |_______^ D200
44 |
45 |       def __init__(self):
   |
   = help: Reformat to one line

src/repo_organizer/domain/core/events.py:45:9: ANN204 Missing return type annotation for special method `__init__`
   |
43 |     """
44 |
45 |     def __init__(self):
   |         ^^^^^^^^ ANN204
46 |         self._handlers: dict[
47 |             type[DomainEvent], list[HandlerFunc | AsyncHandlerFunc],
   |
   = help: Add return type annotation: `None`

src/repo_organizer/domain/core/events.py:45:9: D107 Missing docstring in `__init__`
   |
43 |     """
44 |
45 |     def __init__(self):
   |         ^^^^^^^^ D107
46 |         self._handlers: dict[
47 |             type[DomainEvent], list[HandlerFunc | AsyncHandlerFunc],
   |

src/repo_organizer/domain/core/events.py:62:17: G004 Logging statement uses f-string
   |
60 |             self._handlers[event_type].append(handler)
61 |             self._logger.debug(
62 |                 f"Registered handler {handler.__name__} for {event_type.__name__}",
   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
63 |             )
   |

src/repo_organizer/domain/core/events.py:74:17: G004 Logging statement uses f-string
   |
72 |             self._handlers[event_type].remove(handler)
73 |             self._logger.debug(
74 |                 f"Unregistered handler {handler.__name__} for {event_type.__name__}",
   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
75 |             )
   |

src/repo_organizer/domain/core/events.py:82:34: G004 Logging statement uses f-string
   |
80 |         handlers = self._get_handlers_for_event(event)
81 |         if not handlers:
82 |             self._logger.warning(f"No handlers registered for {event_type.__name__}")
   |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
83 |             return
84 |         self._logger.debug(
   |

src/repo_organizer/domain/core/events.py:85:13: G004 Logging statement uses f-string
   |
83 |             return
84 |         self._logger.debug(
85 |             f"Dispatching {event_type.__name__} to {len(handlers)} handlers",
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ G004
86 |         )
87 |         sync_tasks = []
   |

src/repo_organizer/domain/core/events.py:95:13: B007 Loop control variable `task` not used within loop body
   |
93 |                 sync_tasks.append(handler(event))
94 |         # Run synchronous handlers
95 |         for task in sync_tasks:
   |             ^^^^ B007
96 |             pass  # Already executed
97 |         # Run asynchronous handlers
   |
   = help: Rename unused `task` to `_task`

src/repo_organizer/domain/source_control/__init__.py:4:15: RUF002 Docstring contains ambiguous `–` (EN DASH). Did you mean `-` (HYPHEN-MINUS)?
  |
3 | This bounded context deals with everything required to **retrieve** source
4 | code metadata – independent of the concrete technology (GitHub REST, GitHub
  |               ^ RUF002
5 | CLI, Git, GitLab, Bitbucket, etc.).
  |

src/repo_organizer/domain/source_control/models.py:10:89: E501 Line too long (94 > 88)
   |
 9 | For the initial refactor sprint we simply *delegate* to the already existing
10 | Pydantic models under ``repo_organizer.infrastructure.analysis.pydantic_models`` to avoid code
   |                                                                                         ^^^^^^ E501
11 | duplication.  In a later stage we may gradually migrate towards lightweight
12 | ``dataclasses``.
   |

src/repo_organizer/domain/source_control/models.py:17:29: TC003 Move standard library import `collections.abc.Mapping` into a type-checking block
   |
15 | from __future__ import annotations
16 |
17 | from collections.abc import Mapping, Sequence
   |                             ^^^^^^^ TC003
18 | from dataclasses import dataclass
   |
   = help: Move into type-checking block

src/repo_organizer/domain/source_control/models.py:17:38: TC003 Move standard library import `collections.abc.Sequence` into a type-checking block
   |
15 | from __future__ import annotations
16 |
17 | from collections.abc import Mapping, Sequence
   |                                      ^^^^^^^^ TC003
18 | from dataclasses import dataclass
   |
   = help: Move into type-checking block

src/repo_organizer/domain/source_control/models.py:32:9: D105 Missing docstring in magic method
   |
30 |     percentage: float  # 0-100 inclusive
31 |
32 |     def __post_init__(self) -> None:
   |         ^^^^^^^^^^^^^ D105
33 |         if not (0.0 <= self.percentage <= 100.0):
34 |             raise ValueError("percentage must be between 0 and 100")
   |

src/repo_organizer/domain/source_control/models.py:33:43: PLR2004 Magic value used in comparison, consider replacing `100.0` with a constant variable
   |
32 |     def __post_init__(self) -> None:
33 |         if not (0.0 <= self.percentage <= 100.0):
   |                                           ^^^^^ PLR2004
34 |             raise ValueError("percentage must be between 0 and 100")
   |

src/repo_organizer/domain/source_control/models.py:34:19: TRY003 Avoid specifying long messages outside the exception class
   |
32 |     def __post_init__(self) -> None:
33 |         if not (0.0 <= self.percentage <= 100.0):
34 |             raise ValueError("percentage must be between 0 and 100")
   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
   |

src/repo_organizer/domain/source_control/models.py:34:30: EM101 Exception must not use a string literal, assign to variable first
   |
32 |     def __post_init__(self) -> None:
33 |         if not (0.0 <= self.percentage <= 100.0):
34 |             raise ValueError("percentage must be between 0 and 100")
   |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ EM101
   |
   = help: Assign to variable; remove string literal

src/repo_organizer/domain/source_control/models.py:49:34: RUF003 Comment contains ambiguous `–` (EN DASH). Did you mean `-` (HYPHEN-MINUS)?
   |
47 |     message: str
48 |     author: str
49 |     date: str  # ISO-8601 string – keeps it simple for now
   |                                  ^ RUF003
   |

src/repo_organizer/domain/source_control/models.py:67:54: RUF003 Comment contains ambiguous `–` (EN DASH). Did you mean `-` (HYPHEN-MINUS)?
   |
65 |     description: str | None
66 |     url: str | None
67 |     updated_at: str | None  # ISO string from GitHub – no datetime for now
   |                                                      ^ RUF003
68 |     is_archived: bool
69 |     stars: int
   |

src/repo_organizer/domain/source_control/protocols.py:3:59: RUF002 Docstring contains ambiguous `–` (EN DASH). Did you mean `-` (HYPHEN-MINUS)?
  |
1 | """Ports (interfaces) for the *SourceControl* bounded context.
2 |
3 | The application layer depends **only** on these Protocols – never on concrete
  |                                                           ^ RUF002
4 | adapters – firmly following the Dependency Inversion Principle.
5 | """
  |

src/repo_organizer/domain/source_control/protocols.py:4:10: RUF002 Docstring contains ambiguous `–` (EN DASH). Did you mean `-` (HYPHEN-MINUS)?
  |
3 | The application layer depends **only** on these Protocols – never on concrete
4 | adapters – firmly following the Dependency Inversion Principle.
  |          ^ RUF002
5 | """
  |

src/repo_organizer/domain/source_control/protocols.py:9:29: TC003 Move standard library import `collections.abc.Sequence` into a type-checking block
   |
 7 | from __future__ import annotations
 8 |
 9 | from collections.abc import Sequence
   |                             ^^^^^^^^ TC003
10 | from typing import Protocol
   |
   = help: Move into type-checking block

src/repo_organizer/domain/source_control/protocols.py:12:21: TC001 Move application import `.models.Commit` into a type-checking block
   |
10 | from typing import Protocol
11 |
12 | from .models import Commit, Contributor, LanguageBreakdown, Repository
   |                     ^^^^^^ TC001
   |
   = help: Move into type-checking block

src/repo_organizer/domain/source_control/protocols.py:12:29: TC001 Move application import `.models.Contributor` into a type-checking block
   |
10 | from typing import Protocol
11 |
12 | from .models import Commit, Contributor, LanguageBreakdown, Repository
   |                             ^^^^^^^^^^^ TC001
   |
   = help: Move into type-checking block

src/repo_organizer/domain/source_control/protocols.py:12:42: TC001 Move application import `.models.LanguageBreakdown` into a type-checking block
   |
10 | from typing import Protocol
11 |
12 | from .models import Commit, Contributor, LanguageBreakdown, Repository
   |                                          ^^^^^^^^^^^^^^^^^ TC001
   |
   = help: Move into type-checking block

src/repo_organizer/domain/source_control/protocols.py:12:61: TC001 Move application import `.models.Repository` into a type-checking block
   |
10 | from typing import Protocol
11 |
12 | from .models import Commit, Contributor, LanguageBreakdown, Repository
   |                                                             ^^^^^^^^^^ TC001
   |
   = help: Move into type-checking block

src/repo_organizer/infrastructure/analysis/langchain_claude_adapter.py:10:29: TC003 Move standard library import `collections.abc.Mapping` into a type-checking block
   |
 9 | import time
10 | from collections.abc import Mapping
   |                             ^^^^^^^ TC003
11 | from typing import Any
   |
   = help: Move into type-checking block

src/repo_organizer/infrastructure/analysis/langchain_claude_adapter.py:17:41: TC001 Move application import `repo_organizer.utils.logger.Logger` into a type-checking block
   |
15 | from repo_organizer.infrastructure.analysis.llm_service import LLMService
16 | from repo_organizer.utils.exceptions import LLMServiceError, RateLimitExceededError
17 | from repo_organizer.utils.logger import Logger
   |                                         ^^^^^^ TC001
18 | from repo_organizer.utils.rate_limiter import RateLimiter
   |
   = help: Move into type-checking block

src/repo_organizer/infrastructure/analysis/langchain_claude_adapter.py:18:47: TC001 Move application import `repo_organizer.utils.rate_limiter.RateLimiter` into a type-checking block
   |
16 | from repo_organizer.utils.exceptions import LLMServiceError, RateLimitExceededError
17 | from repo_organizer.utils.logger import Logger
18 | from repo_organizer.utils.rate_limiter import RateLimiter
   |                                               ^^^^^^^^^^^ TC001
   |
   = help: Move into type-checking block

src/repo_organizer/infrastructure/analysis/langchain_claude_adapter.py:28:9: PLR0913 Too many arguments in function definition (15 > 5)
   |
26 |     """
27 |
28 |     def __init__(
   |         ^^^^^^^^ PLR0913
29 |         self,
30 |         api_key: str,
   |

src/repo_organizer/infrastructure/analysis/langchain_claude_adapter.py:28:9: ANN204 Missing return type annotation for special method `__init__`
   |
26 |     """
27 |
28 |     def __init__(
   |         ^^^^^^^^ ANN204
29 |         self,
30 |         api_key: str,
   |
   = help: Add return type annotation: `None`

src/repo_organizer/infrastructure/analysis/langchain_claude_adapter.py:36:9: FBT001 Boolean-typed positional argument in function definition
   |
34 |         top_p: float = 1.0,
35 |         top_k: int | None = None,
36 |         thinking_enabled: bool = True,
   |         ^^^^^^^^^^^^^^^^ FBT001
37 |         thinking_budget: int = 16000,
38 |         request_timeout: int = 120,
   |

src/repo_organizer/infrastructure/analysis/langchain_claude_adapter.py:36:9: FBT002 Boolean default positional argument in function definition
   |
34 |         top_p: float = 1.0,
35 |         top_k: int | None = None,
36 |         thinking_enabled: bool = True,
   |         ^^^^^^^^^^^^^^^^ FBT002
37 |         thinking_budget: int = 16000,
38 |         request_timeout: int = 120,
   |

src/repo_organizer/infrastructure/analysis/langchain_claude_adapter.py:43:9: FBT001 Boolean-typed positional argument in function definition
   |
41 |         rate_limiter: RateLimiter | None = None,
42 |         logger: Logger | None = None,
43 |         enable_caching: bool = True,
   |         ^^^^^^^^^^^^^^ FBT001
44 |         cache_ttl: int = 3600,  # 1 hour cache by default
45 |     ):
   |

src/repo_organizer/infrastructure/analysis/langchain_claude_adapter.py:43:9: FBT002 Boolean default positional argument in function definition
   |
41 |         rate_limiter: RateLimiter | None = None,
42 |         logger: Logger | None = None,
43 |         enable_caching: bool = True,
   |         ^^^^^^^^^^^^^^ FBT002
44 |         cache_ttl: int = 3600,  # 1 hour cache by default
45 |     ):
   |

src/repo_organizer/infrastructure/analysis/langchain_claude_adapter.py:108:89: E501 Line too long (103 > 88)
    |
106 |             self.logger.log(
107 |                 f"Initialized LangChainClaudeAdapter with model {model_name}, "
108 |                 f"temperature {temperature}, thinking {'enabled' if thinking_enabled else 'disabled'} "
    |                                                                                         ^^^^^^^^^^^^^^^ E501
109 |                 f"(budget: {thinking_budget} tokens)",
110 |                 "info",
    |

src/repo_organizer/infrastructure/analysis/langchain_claude_adapter.py:180:76: PLR2004 Magic value used in comparison, consider replacing `100` with a constant variable
    |
178 |             # For now, we just log the thinking progress
179 |             # First 100 chars of thinking text + ellipsis if longer
180 |             preview = thinking_text[:100] + ("..." if len(thinking_text) > 100 else "")
    |                                                                            ^^^ PLR2004
181 |             self.logger.log(
182 |                 f"[{repo_name}] Thinking progress: {preview}", level="debug",
    |

src/repo_organizer/infrastructure/analysis/langchain_claude_adapter.py:185:9: C901 `_execute_with_retry` is too complex (34 > 10)
    |
183 |             )
184 |
185 |     def _execute_with_retry(self, repo_data: dict[str, Any]) -> RepoAnalysis:
    |         ^^^^^^^^^^^^^^^^^^^ C901
186 |         """Execute analysis with exponential backoff retry.
    |

src/repo_organizer/infrastructure/analysis/langchain_claude_adapter.py:185:9: PLR0912 Too many branches (36 > 12)
    |
183 |             )
184 |
185 |     def _execute_with_retry(self, repo_data: dict[str, Any]) -> RepoAnalysis:
    |         ^^^^^^^^^^^^^^^^^^^ PLR0912
186 |         """Execute analysis with exponential backoff retry.
    |

src/repo_organizer/infrastructure/analysis/langchain_claude_adapter.py:185:9: PLR0915 Too many statements (90 > 50)
    |
183 |             )
184 |
185 |     def _execute_with_retry(self, repo_data: dict[str, Any]) -> RepoAnalysis:
    |         ^^^^^^^^^^^^^^^^^^^ PLR0915
186 |         """Execute analysis with exponential backoff retry.
    |

src/repo_organizer/infrastructure/analysis/langchain_claude_adapter.py:237:89: E501 Line too long (104 > 88)
    |
235 |         if missing_fields and self.logger:
236 |             self.logger.log(
237 |                 f"Warning: Repository {repo_name} missing required fields: {', '.join(missing_fields)}",
    |                                                                                         ^^^^^^^^^^^^^^^^ E501
238 |                 "warning",
239 |             )
    |

src/repo_organizer/infrastructure/analysis/langchain_claude_adapter.py:290:9: SIM102 Use a single `if` statement instead of nested `if` statements
    |
289 |           # Validate critical content field - readme_excerpt
290 | /         if (
291 | |             not data_dict.get("readme_excerpt")
292 | |             or data_dict.get("readme_excerpt") == "No README content available"
293 | |         ):
294 | |             if self.logger:
    | |___________________________^ SIM102
295 |                   self.logger.log(
296 |                       f"Warning: Repository {repo_name} has no README content - analysis may be limited",
    |
    = help: Combine `if` statements using `and`

src/repo_organizer/infrastructure/analysis/langchain_claude_adapter.py:296:89: E501 Line too long (103 > 88)
    |
294 |             if self.logger:
295 |                 self.logger.log(
296 |                     f"Warning: Repository {repo_name} has no README content - analysis may be limited",
    |                                                                                         ^^^^^^^^^^^^^^^ E501
297 |                     "warning",
298 |                 )
    |

src/repo_organizer/infrastructure/analysis/langchain_claude_adapter.py:313:72: PLR2004 Magic value used in comparison, consider replacing `150` with a constant variable
    |
311 |                 if key == "readme_excerpt":
312 |                     val_str = str(value) if value is not None else "None"
313 |                     preview = val_str[:150] + ("..." if len(val_str) > 150 else "")
    |                                                                        ^^^ PLR2004
314 |                     self.logger.log(
315 |                         f"- {key} ({len(val_str)} chars): {preview}", "debug",
    |

src/repo_organizer/infrastructure/analysis/langchain_claude_adapter.py:325:89: E501 Line too long (108 > 88)
    |
323 |                 if self.logger:
324 |                     self.logger.log(
325 |                         f"Analyzing repository: {repo_name} (attempt {attempt + 1}/{self.max_retries + 1})",
    |                                                                                         ^^^^^^^^^^^^^^^^^^^^ E501
326 |                         "info",
327 |                     )
    |

src/repo_organizer/infrastructure/analysis/langchain_claude_adapter.py:333:89: E501 Line too long (99 > 88)
    |
332 |                 # Use the LLM service to get a Pydantic model
333 |                 # Pass validated data_dict to ensure all fields are available in the correct format
    |                                                                                         ^^^^^^^^^^^ E501
334 |                 pyd_model = self._llm_service.analyze_repository(data_dict)
    |

src/repo_organizer/infrastructure/analysis/langchain_claude_adapter.py:370:20: BLE001 Do not catch blind exception: `Exception`
    |
368 |                 raise
369 |
370 |             except Exception as e:
    |                    ^^^^^^^^^ BLE001
371 |                 # Don't update main metrics for intermediate failures, just track locally
372 |                 last_exception = e
    |

src/repo_organizer/infrastructure/analysis/langchain_claude_adapter.py:371:89: E501 Line too long (89 > 88)
    |
370 |             except Exception as e:
371 |                 # Don't update main metrics for intermediate failures, just track locally
    |                                                                                         ^ E501
372 |                 last_exception = e
373 |                 retry_count += 1
    |

src/repo_organizer/infrastructure/analysis/langchain_claude_adapter.py:379:89: E501 Line too long (101 > 88)
    |
377 |                 if self.logger:
378 |                     self.logger.log(
379 |                         f"Error during analysis (attempt {attempt + 1}/{self.max_retries + 1}): {e}",
    |                                                                                         ^^^^^^^^^^^^^ E501
380 |                         "error",
381 |                     )
    |

src/repo_organizer/infrastructure/analysis/langchain_claude_adapter.py:410:89: E501 Line too long (95 > 88)
    |
408 |                 if self.logger:
409 |                     self.logger.log(
410 |                         f"All {self.max_retries} retries failed. Last error: {last_exception}",
    |                                                                                         ^^^^^^^ E501
411 |                         "error",
412 |                     )
    |

src/repo_organizer/infrastructure/analysis/langchain_claude_adapter.py:415:23: TRY003 Avoid specifying long messages outside the exception class
    |
414 |                   # Wrap in LLMServiceError for better error handling upstream
415 |                   raise LLMServiceError(
    |  _______________________^
416 | |                     f"Analysis failed after {self.max_retries} retries",
417 | |                 ) from last_exception
    | |_________________^ TRY003
418 |
419 |           # This should never happen since last_exception should be set
    |

src/repo_organizer/infrastructure/analysis/langchain_claude_adapter.py:416:21: EM102 Exception must not use an f-string literal, assign to variable first
    |
414 |                 # Wrap in LLMServiceError for better error handling upstream
415 |                 raise LLMServiceError(
416 |                     f"Analysis failed after {self.max_retries} retries",
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ EM102
417 |                 ) from last_exception
    |
    = help: Assign to variable; remove f-string literal

src/repo_organizer/infrastructure/analysis/langchain_claude_adapter.py:420:9: RET503 Missing explicit `return` at the end of function able to return non-`None` value
    |
419 |           # This should never happen since last_exception should be set
420 | /         if not success:
421 | |             raise LLMServiceError(
422 | |                 f"Analysis failed after {self.max_retries} retries with unknown error",
423 | |             )
    | |_____________^ RET503
424 |
425 |       def _update_metrics(self, success: bool, response_time: float = 0.0) -> None:
    |
    = help: Add explicit `return` statement

src/repo_organizer/infrastructure/analysis/langchain_claude_adapter.py:421:19: TRY003 Avoid specifying long messages outside the exception class
    |
419 |           # This should never happen since last_exception should be set
420 |           if not success:
421 |               raise LLMServiceError(
    |  ___________________^
422 | |                 f"Analysis failed after {self.max_retries} retries with unknown error",
423 | |             )
    | |_____________^ TRY003
424 |
425 |       def _update_metrics(self, success: bool, response_time: float = 0.0) -> None:
    |

src/repo_organizer/infrastructure/analysis/langchain_claude_adapter.py:422:17: EM102 Exception must not use an f-string literal, assign to variable first
    |
420 |         if not success:
421 |             raise LLMServiceError(
422 |                 f"Analysis failed after {self.max_retries} retries with unknown error",
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ EM102
423 |             )
    |
    = help: Assign to variable; remove f-string literal

src/repo_organizer/infrastructure/analysis/langchain_claude_adapter.py:425:31: FBT001 Boolean-typed positional argument in function definition
    |
423 |             )
424 |
425 |     def _update_metrics(self, success: bool, response_time: float = 0.0) -> None:
    |                               ^^^^^^^ FBT001
426 |         """Update the adapter metrics.
    |

src/repo_organizer/infrastructure/analysis/langchain_claude_adapter.py:462:9: C901 `analyze` is too complex (18 > 10)
    |
460 |     # ------------------------------------------------------------------
461 |
462 |     def analyze(self, repo_data: Mapping[str, Any]) -> RepoAnalysis:
    |         ^^^^^^^ C901
463 |         """Analyze a repository using Claude LLM.
    |

src/repo_organizer/infrastructure/analysis/langchain_claude_adapter.py:462:9: PLR0912 Too many branches (18 > 12)
    |
460 |     # ------------------------------------------------------------------
461 |
462 |     def analyze(self, repo_data: Mapping[str, Any]) -> RepoAnalysis:
    |         ^^^^^^^ PLR0912
463 |         """Analyze a repository using Claude LLM.
    |

src/repo_organizer/infrastructure/analysis/langchain_claude_adapter.py:462:9: PLR0915 Too many statements (53 > 50)
    |
460 |     # ------------------------------------------------------------------
461 |
462 |     def analyze(self, repo_data: Mapping[str, Any]) -> RepoAnalysis:
    |         ^^^^^^^ PLR0915
463 |         """Analyze a repository using Claude LLM.
    |

src/repo_organizer/infrastructure/analysis/langchain_claude_adapter.py:542:69: PLR2004 Magic value used in comparison, consider replacing `150` with a constant variable
    |
540 |                         val_str = str(value)
541 |                         preview = (
542 |                             val_str[:150] + "..." if len(val_str) > 150 else val_str
    |                                                                     ^^^ PLR2004
543 |                         )
544 |                         self.logger.log(
    |

src/repo_organizer/infrastructure/analysis/langchain_claude_adapter.py:603:13: TRY300 Consider moving this statement to an `else` block
    |
601 |                     )
602 |
603 |             return analysis
    |             ^^^^^^^^^^^^^^^ TRY300
604 |
605 |         except Exception as e:
    |

src/repo_organizer/infrastructure/analysis/langchain_claude_adapter.py:605:16: BLE001 Do not catch blind exception: `Exception`
    |
603 |             return analysis
604 |
605 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
606 |             # Print a more informative error message
607 |             if self.logger:
    |

src/repo_organizer/infrastructure/analysis/llm_service.py:19:52: PGH003 Use specific rule codes when ignoring type issues
   |
18 | try:
19 |     from langchain_anthropic import ChatAnthropic  # type: ignore
   |                                                    ^^^^^^^^^^^^^^ PGH003
20 | except ModuleNotFoundError:  # pragma: no cover – executed in test env only
   |

src/repo_organizer/infrastructure/analysis/llm_service.py:20:49: RUF003 Comment contains ambiguous `–` (EN DASH). Did you mean `-` (HYPHEN-MINUS)?
   |
18 | try:
19 |     from langchain_anthropic import ChatAnthropic  # type: ignore
20 | except ModuleNotFoundError:  # pragma: no cover – executed in test env only
   |                                                 ^ RUF003
21 |
22 |     class _StubChatAnthropic:
   |

src/repo_organizer/infrastructure/analysis/llm_service.py:25:13: ANN204 Missing return type annotation for special method `__init__`
   |
23 |         """Very small stub that fulfils the interface used in tests."""
24 |
25 |         def __init__(self, *args, **kwargs):
   |             ^^^^^^^^ ANN204
26 |             pass
   |
   = help: Add return type annotation: `None`

src/repo_organizer/infrastructure/analysis/llm_service.py:25:28: ANN002 Missing type annotation for `*args`
   |
23 |         """Very small stub that fulfils the interface used in tests."""
24 |
25 |         def __init__(self, *args, **kwargs):
   |                            ^^^^^ ANN002
26 |             pass
   |

src/repo_organizer/infrastructure/analysis/llm_service.py:25:35: ANN003 Missing type annotation for `**kwargs`
   |
23 |         """Very small stub that fulfils the interface used in tests."""
24 |
25 |         def __init__(self, *args, **kwargs):
   |                                   ^^^^^^^^ ANN003
26 |             pass
   |

src/repo_organizer/infrastructure/analysis/llm_service.py:32:13: ANN202 Missing return type annotation for private function `invoke`
   |
30 |         # ``ChatAnthropic`` anyway, so we just raise to signal unintended
31 |         # usage in production.
32 |         def invoke(self, *args, **kwargs):
   |             ^^^^^^ ANN202
33 |             raise RuntimeError(
34 |                 "ChatAnthropic stub invoked – install 'langchain_anthropic' for production use.",
   |
   = help: Add return type annotation: `Never`

src/repo_organizer/infrastructure/analysis/llm_service.py:32:26: ANN002 Missing type annotation for `*args`
   |
30 |         # ``ChatAnthropic`` anyway, so we just raise to signal unintended
31 |         # usage in production.
32 |         def invoke(self, *args, **kwargs):
   |                          ^^^^^ ANN002
33 |             raise RuntimeError(
34 |                 "ChatAnthropic stub invoked – install 'langchain_anthropic' for production use.",
   |

src/repo_organizer/infrastructure/analysis/llm_service.py:32:27: ARG002 Unused method argument: `args`
   |
30 |         # ``ChatAnthropic`` anyway, so we just raise to signal unintended
31 |         # usage in production.
32 |         def invoke(self, *args, **kwargs):
   |                           ^^^^ ARG002
33 |             raise RuntimeError(
34 |                 "ChatAnthropic stub invoked – install 'langchain_anthropic' for production use.",
   |

src/repo_organizer/infrastructure/analysis/llm_service.py:32:33: ANN003 Missing type annotation for `**kwargs`
   |
30 |         # ``ChatAnthropic`` anyway, so we just raise to signal unintended
31 |         # usage in production.
32 |         def invoke(self, *args, **kwargs):
   |                                 ^^^^^^^^ ANN003
33 |             raise RuntimeError(
34 |                 "ChatAnthropic stub invoked – install 'langchain_anthropic' for production use.",
   |

src/repo_organizer/infrastructure/analysis/llm_service.py:32:35: ARG002 Unused method argument: `kwargs`
   |
30 |         # ``ChatAnthropic`` anyway, so we just raise to signal unintended
31 |         # usage in production.
32 |         def invoke(self, *args, **kwargs):
   |                                   ^^^^^^ ARG002
33 |             raise RuntimeError(
34 |                 "ChatAnthropic stub invoked – install 'langchain_anthropic' for production use.",
   |

src/repo_organizer/infrastructure/analysis/llm_service.py:33:19: TRY003 Avoid specifying long messages outside the exception class
   |
31 |           # usage in production.
32 |           def invoke(self, *args, **kwargs):
33 |               raise RuntimeError(
   |  ___________________^
34 | |                 "ChatAnthropic stub invoked – install 'langchain_anthropic' for production use.",
35 | |             )
   | |_____________^ TRY003
36 |
37 |       ChatAnthropic = _StubChatAnthropic  # type: ignore
   |

src/repo_organizer/infrastructure/analysis/llm_service.py:34:17: EM101 Exception must not use a string literal, assign to variable first
   |
32 |         def invoke(self, *args, **kwargs):
33 |             raise RuntimeError(
34 |                 "ChatAnthropic stub invoked – install 'langchain_anthropic' for production use.",
   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ EM101
35 |             )
   |
   = help: Assign to variable; remove string literal

src/repo_organizer/infrastructure/analysis/llm_service.py:34:45: RUF001 String contains ambiguous `–` (EN DASH). Did you mean `-` (HYPHEN-MINUS)?
   |
32 |         def invoke(self, *args, **kwargs):
33 |             raise RuntimeError(
34 |                 "ChatAnthropic stub invoked – install 'langchain_anthropic' for production use.",
   |                                             ^ RUF001
35 |             )
   |

src/repo_organizer/infrastructure/analysis/llm_service.py:34:89: E501 Line too long (97 > 88)
   |
32 |         def invoke(self, *args, **kwargs):
33 |             raise RuntimeError(
34 |                 "ChatAnthropic stub invoked – install 'langchain_anthropic' for production use.",
   |                                                                                         ^^^^^^^^^ E501
35 |             )
   |

src/repo_organizer/infrastructure/analysis/llm_service.py:37:41: PGH003 Use specific rule codes when ignoring type issues
   |
35 |             )
36 |
37 |     ChatAnthropic = _StubChatAnthropic  # type: ignore
   |                                         ^^^^^^^^^^^^^^ PGH003
38 | from langchain.output_parsers import OutputFixingParser
39 | from langchain_core.messages import HumanMessage
   |

src/repo_organizer/infrastructure/analysis/llm_service.py:56:9: PLR0913 Too many arguments in function definition (7 > 5)
   |
54 |     """
55 |
56 |     def __init__(
   |         ^^^^^^^^ PLR0913
57 |         self,
58 |         api_key: str,
   |

src/repo_organizer/infrastructure/analysis/llm_service.py:56:9: ANN204 Missing return type annotation for special method `__init__`
   |
54 |     """
55 |
56 |     def __init__(
   |         ^^^^^^^^ ANN204
57 |         self,
58 |         api_key: str,
   |
   = help: Add return type annotation: `None`

src/repo_organizer/infrastructure/analysis/llm_service.py:61:9: FBT001 Boolean-typed positional argument in function definition
   |
59 |         model_name: str = "claude-3-7-sonnet-latest",
60 |         temperature: float = 0.2,
61 |         thinking_enabled: bool = True,
   |         ^^^^^^^^^^^^^^^^ FBT001
62 |         thinking_budget: int = 16000,
63 |         rate_limiter: RateLimiter | None = None,
   |

src/repo_organizer/infrastructure/analysis/llm_service.py:61:9: FBT002 Boolean default positional argument in function definition
   |
59 |         model_name: str = "claude-3-7-sonnet-latest",
60 |         temperature: float = 0.2,
61 |         thinking_enabled: bool = True,
   |         ^^^^^^^^^^^^^^^^ FBT002
62 |         thinking_budget: int = 16000,
63 |         rate_limiter: RateLimiter | None = None,
   |

src/repo_organizer/infrastructure/analysis/llm_service.py:95:89: E501 Line too long (90 > 88)
   |
93 |         # Add extended thinking if enabled
94 |         if thinking_enabled:
95 |             # Important: When using extended thinking, we must remove temperature settings
   |                                                                                         ^^ E501
96 |             # as it's not compatible with temperature modifications
97 |             kwargs.pop("temperature", None)
   |

src/repo_organizer/infrastructure/analysis/llm_service.py:99:89: E501 Line too long (97 > 88)
    |
 97 |             kwargs.pop("temperature", None)
 98 |
 99 |             # Add max_tokens parameter to be larger than thinking_budget (required by Claude API)
    |                                                                                         ^^^^^^^^^ E501
100 |             kwargs["max_tokens"] = thinking_budget + 4000
    |

src/repo_organizer/infrastructure/analysis/llm_service.py:103:89: E501 Line too long (97 > 88)
    |
102 |             # Pass thinking parameter directly to LangChain
103 |             # This is the correct way to enable thinking in newer versions of langchain_anthropic
    |                                                                                         ^^^^^^^^^ E501
104 |             kwargs["thinking"] = {"type": "enabled", "budget_tokens": thinking_budget}
    |

src/repo_organizer/infrastructure/analysis/llm_service.py:108:89: E501 Line too long (126 > 88)
    |
106 |             if logger and logger.debug_enabled:
107 |                 logger.log(
108 |                     f"Enabling extended thinking with budget: {thinking_budget} tokens, max_tokens: {thinking_budget + 4000}",
    |                                                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E501
109 |                     "debug",
110 |                 )
    |

src/repo_organizer/infrastructure/analysis/llm_service.py:114:39: RUF003 Comment contains ambiguous `–` (EN DASH). Did you mean `-` (HYPHEN-MINUS)?
    |
112 |         self.llm = ChatAnthropic(**kwargs)
113 |
114 |         # Lazily-built analysis chain – constructed on first use and then
    |                                       ^ RUF003
115 |         # cached for subsequent repository analyses.  Creating the chain can be
116 |         # expensive (especially `OutputFixingParser.from_llm`, which may
    |

src/repo_organizer/infrastructure/analysis/llm_service.py:122:34: ANN401 Dynamically typed expressions (typing.Any) are disallowed in `x`
    |
120 |         self._analysis_chain: Any | None = None
121 |
122 |     def _log_raw_output(self, x: Any) -> Any:
    |                                  ^^^ ANN401
123 |         """Logs the raw output before parsing only if debug is enabled.
    |

src/repo_organizer/infrastructure/analysis/llm_service.py:122:42: ANN401 Dynamically typed expressions (typing.Any) are disallowed in `_log_raw_output`
    |
120 |         self._analysis_chain: Any | None = None
121 |
122 |     def _log_raw_output(self, x: Any) -> Any:
    |                                          ^^^ ANN401
123 |         """Logs the raw output before parsing only if debug is enabled.
    |

src/repo_organizer/infrastructure/analysis/llm_service.py:136:9: C901 `create_analysis_chain` is too complex (15 > 10)
    |
134 |         return x
135 |
136 |     def create_analysis_chain(self) -> Any:
    |         ^^^^^^^^^^^^^^^^^^^^^ C901
137 |         """Create a runnable chain for repository analysis.
    |

src/repo_organizer/infrastructure/analysis/llm_service.py:136:40: ANN401 Dynamically typed expressions (typing.Any) are disallowed in `create_analysis_chain`
    |
134 |         return x
135 |
136 |     def create_analysis_chain(self) -> Any:
    |                                        ^^^ ANN401
137 |         """Create a runnable chain for repository analysis.
    |

src/repo_organizer/infrastructure/analysis/llm_service.py:149:73: RUF003 Comment contains ambiguous `–` (EN DASH). Did you mean `-` (HYPHEN-MINUS)?
    |
147 |             return self._analysis_chain
148 |
149 |         # Apply rate limiting if available for the *chain build* itself – this
    |                                                                         ^ RUF003
150 |         # can trigger a call to the LLM through OutputFixingParser.
151 |         if self.rate_limiter:
    |

src/repo_organizer/infrastructure/analysis/llm_service.py:165:13: ANN202 Missing return type annotation for private function `prepare_input_data`
    |
164 |         # Create a preprocessing function to prepare input data with strict validation
165 |         def prepare_input_data(data_dict):
    |             ^^^^^^^^^^^^^^^^^^ ANN202
166 |             if self.logger and self.logger.debug_enabled:
167 |                 self.logger.log(
    |
    = help: Add return type annotation

src/repo_organizer/infrastructure/analysis/llm_service.py:165:32: ANN001 Missing type annotation for function argument `data_dict`
    |
164 |         # Create a preprocessing function to prepare input data with strict validation
165 |         def prepare_input_data(data_dict):
    |                                ^^^^^^^^^ ANN001
166 |             if self.logger and self.logger.debug_enabled:
167 |                 self.logger.log(
    |

src/repo_organizer/infrastructure/analysis/llm_service.py:183:89: E501 Line too long (109 > 88)
    |
181 |             if missing_fields and self.logger:
182 |                 self.logger.log(
183 |                     f"WARNING: Missing required fields for repository analysis: {', '.join(missing_fields)}",
    |                                                                                         ^^^^^^^^^^^^^^^^^^^^^ E501
184 |                     "warning",
185 |                 )
    |

src/repo_organizer/infrastructure/analysis/llm_service.py:187:89: E501 Line too long (98 > 88)
    |
185 |                 )
186 |
187 |             # Create a dictionary with all the required fields and default values for missing ones
    |                                                                                         ^^^^^^^^^^ E501
188 |             prepared_data = {
189 |                 # Critical fields - ensure these have meaningful defaults if missing
    |

src/repo_organizer/infrastructure/analysis/llm_service.py:240:50: PLR2004 Magic value used in comparison, consider replacing `100` with a constant variable
    |
238 |                     preview = (
239 |                         readme_excerpt[:100] + "..."
240 |                         if len(readme_excerpt) > 100
    |                                                  ^^^ PLR2004
241 |                         else readme_excerpt
242 |                     )
    |

src/repo_organizer/infrastructure/analysis/llm_service.py:247:89: E501 Line too long (93 > 88)
    |
245 |             return prepared_data
246 |
247 |         # Create the prompt template using modern ChatPromptTemplate with explicit references
    |                                                                                         ^^^^^ E501
248 |         prompt = ChatPromptTemplate.from_messages(
249 |             [
    |

src/repo_organizer/infrastructure/analysis/llm_service.py:252:89: E501 Line too long (292 > 88)
    |
250 | …
251 | …
252 | …d generating detailed reports. Your task is to evaluate the repository named "{repo_name}" based on its README content and provide valuable insights, recommendations, and a decision on the repository's future.
    |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E501
253 | …
254 | …
    |

src/repo_organizer/infrastructure/analysis/llm_service.py:265:1: W293 Blank line contains whitespace
    |
263 |             - Forks: {forks}
264 |             - Programming Languages: {languages}
265 |             
    | ^^^^^^^^^^^^ W293
266 |             Activity Information:
267 |             - Open Issues: {open_issues}
    |
    = help: Remove whitespace from blank line

src/repo_organizer/infrastructure/analysis/llm_service.py:272:1: W293 Blank line contains whitespace
    |
270 |             - Recent Commits: {recent_commits_count}
271 |             - Contributors: {contributor_summary}
272 |             
    | ^^^^^^^^^^^^ W293
273 |             Dependencies:
274 |             - {dependency_info}
    |
    = help: Remove whitespace from blank line

src/repo_organizer/infrastructure/analysis/llm_service.py:275:1: W293 Blank line contains whitespace
    |
273 |             Dependencies:
274 |             - {dependency_info}
275 |             
    | ^^^^^^^^^^^^ W293
276 |             README Content:
277 |             ```markdown
    |
    = help: Remove whitespace from blank line

src/repo_organizer/infrastructure/analysis/llm_service.py:281:89: E501 Line too long (168 > 88)
    |
279 | …
280 | …
281 | …ed analysis. Before writing the final report, conduct a thorough evaluation inside your thinking block:
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E501
282 | …
283 | …
    |

src/repo_organizer/infrastructure/analysis/llm_service.py:284:89: E501 Line too long (89 > 88)
    |
283 |             1. Summarize the key points from the README:
284 |                - Quote relevant sections that describe the main purpose of the repository
    |                                                                                         ^ E501
285 |                - List and count the key features or functionalities (e.g., 1. Feature A, 2. Feature B, etc.)
286 |                - Identify the target audience or use cases
    |

src/repo_organizer/infrastructure/analysis/llm_service.py:285:89: E501 Line too long (108 > 88)
    |
283 |             1. Summarize the key points from the README:
284 |                - Quote relevant sections that describe the main purpose of the repository
285 |                - List and count the key features or functionalities (e.g., 1. Feature A, 2. Feature B, etc.)
    |                                                                                         ^^^^^^^^^^^^^^^^^^^^ E501
286 |                - Identify the target audience or use cases
    |

src/repo_organizer/infrastructure/analysis/llm_service.py:289:89: E501 Line too long (91 > 88)
    |
288 |             2. Evaluate the repository's strengths:
289 |                - Consider code quality, documentation, uniqueness, and potential usefulness
    |                                                                                         ^^^ E501
290 |                - Quote specific sections that highlight these strengths
    |

src/repo_organizer/infrastructure/analysis/llm_service.py:297:89: E501 Line too long (93 > 88)
    |
296 |             4. Assess the repository's overall value and activity level:
297 |                - Consider factors such as last update, stars, forks, and community engagement
    |                                                                                         ^^^^^ E501
298 |                - Quote any relevant statistics or information from the README
    |

src/repo_organizer/infrastructure/analysis/llm_service.py:313:89: E501 Line too long (96 > 88)
    |
311 |             2. Key strengths.
312 |             3. Areas for improvement (weaknesses).
313 |             4. Specific recommendations (each with a reason and priority: High, Medium, or Low).
    |                                                                                         ^^^^^^^^ E501
314 |             5. An assessment of the repository's activity level.
315 |             6. An estimated value/importance of the repository (High, Medium, or Low).
    |

src/repo_organizer/infrastructure/analysis/llm_service.py:320:89: E501 Line too long (118 > 88)
    |
319 |             CRITICAL INSTRUCTIONS FOR OUTPUT FORMATTING:
320 |             - Your output MUST be ONLY a valid JSON object. No introductory text, no markdown, no trailing characters.
    |                                                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E501
321 |             - The JSON object MUST strictly adhere to the following schema:
322 |             {format_instructions}
    |

src/repo_organizer/infrastructure/analysis/llm_service.py:323:89: E501 Line too long (105 > 88)
    |
321 | …     - The JSON object MUST strictly adhere to the following schema:
322 | …     {format_instructions}
323 | …     - Ensure ALL required fields from the schema are present at the TOP LEVEL of the JSON object.
    |                                                                                   ^^^^^^^^^^^^^^^^^ E501
324 | …     - The `recommendations` field MUST be a JSON array, where EACH element is a JSON object with EXACTLY these keys: "recommendatio…
325 | …     - Example for a single recommendation object: {{"recommendation": "Improve test coverage", "reason": "Current tests are insuffi…
    |

src/repo_organizer/infrastructure/analysis/llm_service.py:324:89: E501 Line too long (168 > 88)
    |
322 | …
323 | …ent at the TOP LEVEL of the JSON object.
324 | …here EACH element is a JSON object with EXACTLY these keys: "recommendation", "reason", and "priority".
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E501
325 | …mmendation": "Improve test coverage", "reason": "Current tests are insufficient", "priority": "High"}}
326 | …., inside another key like "analysis". They must be top-level keys.
    |

src/repo_organizer/infrastructure/analysis/llm_service.py:325:89: E501 Line too long (167 > 88)
    |
323 | …sent at the TOP LEVEL of the JSON object.
324 | …where EACH element is a JSON object with EXACTLY these keys: "recommendation", "reason", and "priority".
325 | …ommendation": "Improve test coverage", "reason": "Current tests are insufficient", "priority": "High"}}
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E501
326 | …c., inside another key like "analysis". They must be top-level keys.
327 | …ith actual analysis content. Do not output the placeholders.
    |

src/repo_organizer/infrastructure/analysis/llm_service.py:326:89: E501 Line too long (132 > 88)
    |
324 | …be a JSON array, where EACH element is a JSON object with EXACTLY these keys: "recommendation", "reason", and "priority".
325 | …on object: {{"recommendation": "Improve test coverage", "reason": "Current tests are insufficient", "priority": "High"}}
326 | …, `strengths`, etc., inside another key like "analysis". They must be top-level keys.
    |                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E501
327 | …{some_value}}}} with actual analysis content. Do not output the placeholders.
328 | …t matches the schema.
    |

src/repo_organizer/infrastructure/analysis/llm_service.py:327:89: E501 Line too long (124 > 88)
    |
325 | …     - Example for a single recommendation object: {{"recommendation": "Improve test coverage", "reason": "Current tests are insuffi…
326 | …     - DO NOT nest fields like `summary`, `strengths`, etc., inside another key like "analysis". They must be top-level keys.
327 | …     - Replace ALL placeholders like {{{{some_value}}}} with actual analysis content. Do not output the placeholders.
    |                                                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E501
328 | …     - Generate ONLY the JSON object that matches the schema.
329 | …     """,
    |

src/repo_organizer/infrastructure/analysis/llm_service.py:347:13: ANN202 Missing return type annotation for private function `log_data_at_stage`
    |
346 |         # Define a log function to verify data at each stage
347 |         def log_data_at_stage(prefix):
    |             ^^^^^^^^^^^^^^^^^ ANN202
348 |             def _log_data(data_dict):
349 |                 if self.logger and self.logger.debug_enabled:
    |
    = help: Add return type annotation

src/repo_organizer/infrastructure/analysis/llm_service.py:347:31: ANN001 Missing type annotation for function argument `prefix`
    |
346 |         # Define a log function to verify data at each stage
347 |         def log_data_at_stage(prefix):
    |                               ^^^^^^ ANN001
348 |             def _log_data(data_dict):
349 |                 if self.logger and self.logger.debug_enabled:
    |

src/repo_organizer/infrastructure/analysis/llm_service.py:348:17: ANN202 Missing return type annotation for private function `_log_data`
    |
346 |         # Define a log function to verify data at each stage
347 |         def log_data_at_stage(prefix):
348 |             def _log_data(data_dict):
    |                 ^^^^^^^^^ ANN202
349 |                 if self.logger and self.logger.debug_enabled:
350 |                     if hasattr(data_dict, "keys"):
    |
    = help: Add return type annotation

src/repo_organizer/infrastructure/analysis/llm_service.py:348:27: ANN001 Missing type annotation for function argument `data_dict`
    |
346 |         # Define a log function to verify data at each stage
347 |         def log_data_at_stage(prefix):
348 |             def _log_data(data_dict):
    |                           ^^^^^^^^^ ANN001
349 |                 if self.logger and self.logger.debug_enabled:
350 |                     if hasattr(data_dict, "keys"):
    |

src/repo_organizer/infrastructure/analysis/llm_service.py:357:57: PLR2004 Magic value used in comparison, consider replacing `100` with a constant variable
    |
355 |                         content_preview = (
356 |                             data_dict.content[:100] + "..."
357 |                             if len(data_dict.content) > 100
    |                                                         ^^^ PLR2004
358 |                             else data_dict.content
359 |                         )
    |

src/repo_organizer/infrastructure/analysis/llm_service.py:382:9: C901 `analyze_repository` is too complex (48 > 10)
    |
380 |         return self._analysis_chain
381 |
382 |     def analyze_repository(self, repo_data: dict) -> RepoAnalysis:
    |         ^^^^^^^^^^^^^^^^^^ C901
383 |         """Analyze a repository using the LLM.
    |

src/repo_organizer/infrastructure/analysis/llm_service.py:382:9: PLR0912 Too many branches (50 > 12)
    |
380 |         return self._analysis_chain
381 |
382 |     def analyze_repository(self, repo_data: dict) -> RepoAnalysis:
    |         ^^^^^^^^^^^^^^^^^^ PLR0912
383 |         """Analyze a repository using the LLM.
    |

src/repo_organizer/infrastructure/analysis/llm_service.py:382:9: PLR0915 Too many statements (106 > 50)
    |
380 |         return self._analysis_chain
381 |
382 |     def analyze_repository(self, repo_data: dict) -> RepoAnalysis:
    |         ^^^^^^^^^^^^^^^^^^ PLR0915
383 |         """Analyze a repository using the LLM.
    |

src/repo_organizer/infrastructure/analysis/llm_service.py:414:89: E501 Line too long (89 > 88)
    |
412 |             if self.logger and getattr(self.logger, "debug_enabled", False):
413 |                 self.logger.log(
414 |                     f"Analysis data keys for {repo_name}: {list(data_for_chain.keys())}",
    |                                                                                         ^ E501
415 |                     level="debug",
416 |                 )
    |

src/repo_organizer/infrastructure/analysis/llm_service.py:423:69: PLR2004 Magic value used in comparison, consider replacing `200` with a constant variable
    |
421 |                         val_str = str(value) if value is not None else "None"
422 |                         preview = (
423 |                             val_str[:200] + "..." if len(val_str) > 200 else val_str
    |                                                                     ^^^ PLR2004
424 |                         )
425 |                         self.logger.log(
    |

src/repo_organizer/infrastructure/analysis/llm_service.py:458:89: E501 Line too long (110 > 88)
    |
456 |             if missing_required and self.logger:
457 |                 self.logger.log(
458 |                     f"WARNING: Repository {repo_name} missing critical fields: {', '.join(missing_required)}",
    |                                                                                         ^^^^^^^^^^^^^^^^^^^^^^ E501
459 |                     level="warning",
460 |                 )
    |

src/repo_organizer/infrastructure/analysis/llm_service.py:469:89: E501 Line too long (91 > 88)
    |
467 |                         if self.logger:
468 |                             self.logger.log(
469 |                                 f"Added default value for missing required field: {field}",
    |                                                                                         ^^^ E501
470 |                                 "debug",
471 |                             )
    |

src/repo_organizer/infrastructure/analysis/llm_service.py:476:89: E501 Line too long (91 > 88)
    |
474 |                         if self.logger:
475 |                             self.logger.log(
476 |                                 f"Added default value for missing required field: {field}",
    |                                                                                         ^^^ E501
477 |                                 "debug",
478 |                             )
    |

src/repo_organizer/infrastructure/analysis/llm_service.py:483:89: E501 Line too long (91 > 88)
    |
481 |                         if self.logger:
482 |                             self.logger.log(
483 |                                 f"Added default value for missing required field: {field}",
    |                                                                                         ^^^ E501
484 |                                 "debug",
485 |                             )
    |

src/repo_organizer/infrastructure/analysis/llm_service.py:490:89: E501 Line too long (91 > 88)
    |
488 |                         if self.logger:
489 |                             self.logger.log(
490 |                                 f"Added default value for missing required field: {field}",
    |                                                                                         ^^^ E501
491 |                                 "debug",
492 |                             )
    |

src/repo_organizer/infrastructure/analysis/llm_service.py:497:89: E501 Line too long (91 > 88)
    |
495 |                         if self.logger:
496 |                             self.logger.log(
497 |                                 f"Added default value for missing required field: {field}",
    |                                                                                         ^^^ E501
498 |                                 "debug",
499 |                             )
    |

src/repo_organizer/infrastructure/analysis/llm_service.py:534:89: E501 Line too long (89 > 88)
    |
532 |                 if self.logger.debug_enabled:
533 |                     self.logger.log(
534 |                         f"Final data keys: {list(data_for_chain.keys())}", level="debug",
    |                                                                                         ^ E501
535 |                     )
    |

src/repo_organizer/infrastructure/analysis/llm_service.py:549:58: PLR2004 Magic value used in comparison, consider replacing `100` with a constant variable
    |
547 | …                     preview = (
548 | …                         str(value)[:100] + "..."
549 | …                         if len(str(value)) > 100
    |                                                ^^^ PLR2004
550 | …                         else str(value)
551 | …                     )
    |

src/repo_organizer/infrastructure/analysis/llm_service.py:578:13: TRY300 Consider moving this statement to an `else` block
    |
576 |                 )
577 |
578 |             return result
    |             ^^^^^^^^^^^^^ TRY300
579 |         except Exception as e:
580 |             # ----------------------------------------------------------------
    |

src/repo_organizer/infrastructure/analysis/llm_service.py:579:16: BLE001 Do not catch blind exception: `Exception`
    |
578 |             return result
579 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
580 |             # ----------------------------------------------------------------
581 |             # Fallback path primarily for **unit tests** where the underlying
    |

src/repo_organizer/infrastructure/analysis/llm_service.py:596:89: E501 Line too long (90 > 88)
    |
594 |                     if self.logger and getattr(self.logger, "debug_enabled", False):
595 |                         self.logger.log(
596 |                             f"Attempting direct parsing. Raw content: {content[:500]}...",
    |                                                                                         ^^ E501
597 |                             level="debug",
598 |                         )
    |

src/repo_organizer/infrastructure/analysis/llm_service.py:629:32: BLE001 Do not catch blind exception: `Exception`
    |
627 |                         try:
628 |                             return RepoAnalysis.model_validate_json(content)
629 |                         except Exception as parse_err:
    |                                ^^^^^^^^^ BLE001
630 |                             if self.logger:
631 |                                 self.logger.log(
    |

src/repo_organizer/infrastructure/analysis/llm_service.py:635:24: BLE001 Do not catch blind exception: `Exception`
    |
633 |                                 )
634 |
635 |                 except Exception as fallback_err:
    |                        ^^^^^^^^^ BLE001
636 |                     if self.logger:
637 |                         self.logger.log(
    |

src/repo_organizer/infrastructure/analysis/llm_service.py:654:89: E501 Line too long (108 > 88)
    |
652 |                 if "readme_excerpt" in repo_data:
653 |                     self.logger.log(
654 |                         f"README excerpt (first 200 chars): {repo_data.get('readme_excerpt', '')[:200]}...",
    |                                                                                         ^^^^^^^^^^^^^^^^^^^^ E501
655 |                         level="debug",
656 |                     )
    |

src/repo_organizer/infrastructure/config/__init__.py:1:1: D200 One-line docstring should fit on one line
  |
1 | / """Configuration management for the GitHub Repository Organizer.
2 | | """
  | |___^ D200
3 |
4 |   from .settings import Settings, load_settings
  |
  = help: Reformat to one line

src/repo_organizer/infrastructure/config/auth_settings.py:23:9: FBT003 Boolean positional value in function call
   |
21 |     # Authentication settings
22 |     auth_enabled: bool = Field(
23 |         True, description="Whether authentication is globally enabled",
   |         ^^^^ FBT003
24 |     )
   |

src/repo_organizer/infrastructure/config/auth_settings.py:111:16: BLE001 Do not catch blind exception: `Exception`
    |
109 |                     overrides[op_name.strip()] = requirement.strip()
110 |             settings_dict["auth_operation_overrides"] = overrides
111 |         except Exception:
    |                ^^^^^^^^^ BLE001
112 |             # If parsing fails, use empty dict
113 |             settings_dict["auth_operation_overrides"] = {}
    |

src/repo_organizer/infrastructure/config/auth_settings.py:126:9: S110 `try`-`except`-`pass` detected, consider logging the exception
    |
124 |                       defaults[op_type.strip()] = requirement.strip()
125 |               settings_dict["auth_default_requirements"] = defaults
126 | /         except Exception:
127 | |             # If parsing fails, use default requirements
128 | |             pass
    | |________________^ S110
129 |
130 |       return AuthSettings(**settings_dict)
    |

src/repo_organizer/infrastructure/config/auth_settings.py:126:16: BLE001 Do not catch blind exception: `Exception`
    |
124 |                     defaults[op_type.strip()] = requirement.strip()
125 |             settings_dict["auth_default_requirements"] = defaults
126 |         except Exception:
    |                ^^^^^^^^^ BLE001
127 |             # If parsing fails, use default requirements
128 |             pass
    |

src/repo_organizer/infrastructure/config/settings.py:40:9: FBT003 Boolean positional value in function call
   |
38 |     llm_temperature: float = Field(0.2, description="LLM temperature (0.0-1.0)")
39 |     llm_thinking_enabled: bool = Field(
40 |         True, description="Enable extended thinking for LLM",
   |         ^^^^ FBT003
41 |     )
42 |     llm_thinking_budget: int = Field(16000, description="Token budget for LLM thinking")
   |

src/repo_organizer/infrastructure/config/settings.py:50:33: FBT003 Boolean positional value in function call
   |
49 |     # Debug settings
50 |     debug_logging: bool = Field(False, description="Enable debug logging")
   |                                 ^^^^^ FBT003
51 |     quiet_mode: bool = Field(False, description="Minimize console output")
   |

src/repo_organizer/infrastructure/config/settings.py:51:30: FBT003 Boolean positional value in function call
   |
49 |     # Debug settings
50 |     debug_logging: bool = Field(False, description="Enable debug logging")
51 |     quiet_mode: bool = Field(False, description="Minimize console output")
   |                              ^^^^^ FBT003
52 |
53 |     # Application settings
   |

src/repo_organizer/infrastructure/config/settings.py:62:36: FBT003 Boolean positional value in function call
   |
61 |     # Feature flags
62 |     enable_analytics: bool = Field(False, description="Enable usage analytics")
   |                                    ^^^^^ FBT003
63 |     debug_mode: bool = Field(
64 |         False, description="Enable debug mode with additional logging",
   |

src/repo_organizer/infrastructure/config/settings.py:64:9: FBT003 Boolean positional value in function call
   |
62 |     enable_analytics: bool = Field(False, description="Enable usage analytics")
63 |     debug_mode: bool = Field(
64 |         False, description="Enable debug mode with additional logging",
   |         ^^^^^ FBT003
65 |     )
   |

src/repo_organizer/infrastructure/config/settings.py:68:9: ANN201 Missing return type annotation for public function `validate_github_token`
   |
67 |     @field_validator("github_token")
68 |     def validate_github_token(cls, v):
   |         ^^^^^^^^^^^^^^^^^^^^^ ANN201
69 |         if not v or len(v) < 10:
70 |             raise ValueError("GitHub token is required and must be valid")
   |
   = help: Add return type annotation

src/repo_organizer/infrastructure/config/settings.py:68:9: D102 Missing docstring in public method
   |
67 |     @field_validator("github_token")
68 |     def validate_github_token(cls, v):
   |         ^^^^^^^^^^^^^^^^^^^^^ D102
69 |         if not v or len(v) < 10:
70 |             raise ValueError("GitHub token is required and must be valid")
   |

src/repo_organizer/infrastructure/config/settings.py:68:31: N805 First argument of a method should be named `self`
   |
67 |     @field_validator("github_token")
68 |     def validate_github_token(cls, v):
   |                               ^^^ N805
69 |         if not v or len(v) < 10:
70 |             raise ValueError("GitHub token is required and must be valid")
   |
   = help: Rename `cls` to `self`

src/repo_organizer/infrastructure/config/settings.py:68:36: ANN001 Missing type annotation for function argument `v`
   |
67 |     @field_validator("github_token")
68 |     def validate_github_token(cls, v):
   |                                    ^ ANN001
69 |         if not v or len(v) < 10:
70 |             raise ValueError("GitHub token is required and must be valid")
   |

src/repo_organizer/infrastructure/config/settings.py:69:30: PLR2004 Magic value used in comparison, consider replacing `10` with a constant variable
   |
67 |     @field_validator("github_token")
68 |     def validate_github_token(cls, v):
69 |         if not v or len(v) < 10:
   |                              ^^ PLR2004
70 |             raise ValueError("GitHub token is required and must be valid")
71 |         return v
   |

src/repo_organizer/infrastructure/config/settings.py:70:19: TRY003 Avoid specifying long messages outside the exception class
   |
68 |     def validate_github_token(cls, v):
69 |         if not v or len(v) < 10:
70 |             raise ValueError("GitHub token is required and must be valid")
   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
71 |         return v
   |

src/repo_organizer/infrastructure/config/settings.py:70:30: EM101 Exception must not use a string literal, assign to variable first
   |
68 |     def validate_github_token(cls, v):
69 |         if not v or len(v) < 10:
70 |             raise ValueError("GitHub token is required and must be valid")
   |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ EM101
71 |         return v
   |
   = help: Assign to variable; remove string literal

src/repo_organizer/infrastructure/config/settings.py:74:26: N805 First argument of a method should be named `self`
   |
73 |     @field_validator("output_dir", "logs_dir")
74 |     def create_directory(cls, v: str) -> str:
   |                          ^^^ N805
75 |         """Return a fully-qualified path and guarantee the directory exists.
   |
   = help: Rename `cls` to `self`

src/repo_organizer/infrastructure/config/settings.py:86:20: PTH111 `os.path.expanduser()` should be replaced by `Path.expanduser()`
   |
84 |         # Expand ``~`` to the user home and any *nix environment
85 |         # variables that may be present in the supplied string.
86 |         expanded = os.path.expanduser(os.path.expandvars(v))
   |                    ^^^^^^^^^^^^^^^^^^ PTH111
87 |
88 |         # Convert to an absolute path so there is only ever a single,
   |

src/repo_organizer/infrastructure/config/settings.py:91:20: PTH100 `os.path.abspath()` should be replaced by `Path.resolve()`
   |
89 |         # fully-qualified representation of the directory in the rest of
90 |         # the codebase.
91 |         abs_path = os.path.abspath(expanded)
   |                    ^^^^^^^^^^^^^^^ PTH100
92 |
93 |         # Finally, ensure the directory exists.  ``exist_ok=True`` makes
   |

src/repo_organizer/infrastructure/config/settings.py:96:9: PTH103 `os.makedirs()` should be replaced by `Path.mkdir(parents=True)`
   |
94 |         # the call idempotent so the validator can run multiple times
95 |         # safely during the lifetime of the application.
96 |         os.makedirs(abs_path, exist_ok=True)
   |         ^^^^^^^^^^^ PTH103
97 |
98 |         return abs_path
   |

src/repo_organizer/infrastructure/errors/error_handler.py:22:5: FBT001 Boolean-typed positional argument in function definition
   |
20 |     logger: Logger,
21 |     default_message: str = "An error occurred",
22 |     reraise: bool = True,
   |     ^^^^^^^ FBT001
23 |     handled_exceptions: list[type[Exception]] | None = None,
24 |     return_value: Any = None,
   |

src/repo_organizer/infrastructure/errors/error_handler.py:22:5: FBT002 Boolean default positional argument in function definition
   |
20 |     logger: Logger,
21 |     default_message: str = "An error occurred",
22 |     reraise: bool = True,
   |     ^^^^^^^ FBT002
23 |     handled_exceptions: list[type[Exception]] | None = None,
24 |     return_value: Any = None,
   |

src/repo_organizer/infrastructure/errors/error_handler.py:24:19: ANN401 Dynamically typed expressions (typing.Any) are disallowed in `return_value`
   |
22 |     reraise: bool = True,
23 |     handled_exceptions: list[type[Exception]] | None = None,
24 |     return_value: Any = None,
   |                   ^^^ ANN401
25 | ) -> Callable[[Callable[..., T]], Callable[..., T]]:
26 |     """Decorator for handling errors in a consistent way.
   |

src/repo_organizer/infrastructure/errors/error_handler.py:43:28: ANN401 Dynamically typed expressions (typing.Any) are disallowed in `*args`
   |
41 |     def decorator(func: Callable[..., T]) -> Callable[..., T]:
42 |         @functools.wraps(func)
43 |         def wrapper(*args: Any, **kwargs: Any) -> T:
   |                            ^^^ ANN401
44 |             try:
45 |                 return func(*args, **kwargs)
   |

src/repo_organizer/infrastructure/errors/error_handler.py:43:43: ANN401 Dynamically typed expressions (typing.Any) are disallowed in `**kwargs`
   |
41 |     def decorator(func: Callable[..., T]) -> Callable[..., T]:
42 |         @functools.wraps(func)
43 |         def wrapper(*args: Any, **kwargs: Any) -> T:
   |                                           ^^^ ANN401
44 |             try:
45 |                 return func(*args, **kwargs)
   |

src/repo_organizer/infrastructure/errors/error_handler.py:50:89: E501 Line too long (89 > 88)
   |
48 |                 tb = traceback.format_exc()
49 |
50 |                 # Error context no longer used, but might be useful for future extensions
   |                                                                                         ^ E501
51 |                 # Log without detailed context for now
   |

src/repo_organizer/infrastructure/errors/exceptions.py:14:9: ANN204 Missing return type annotation for special method `__init__`
   |
12 |     """Base exception for all application errors."""
13 |
14 |     def __init__(self, message: str, *args: Any, **kwargs: Any):
   |         ^^^^^^^^ ANN204
15 |         self.message = message
16 |         super().__init__(message, *args)
   |
   = help: Add return type annotation: `None`

src/repo_organizer/infrastructure/errors/exceptions.py:14:9: D107 Missing docstring in `__init__`
   |
12 |     """Base exception for all application errors."""
13 |
14 |     def __init__(self, message: str, *args: Any, **kwargs: Any):
   |         ^^^^^^^^ D107
15 |         self.message = message
16 |         super().__init__(message, *args)
   |

src/repo_organizer/infrastructure/errors/exceptions.py:14:45: ANN401 Dynamically typed expressions (typing.Any) are disallowed in `*args`
   |
12 |     """Base exception for all application errors."""
13 |
14 |     def __init__(self, message: str, *args: Any, **kwargs: Any):
   |                                             ^^^ ANN401
15 |         self.message = message
16 |         super().__init__(message, *args)
   |

src/repo_organizer/infrastructure/errors/exceptions.py:14:60: ANN401 Dynamically typed expressions (typing.Any) are disallowed in `**kwargs`
   |
12 |     """Base exception for all application errors."""
13 |
14 |     def __init__(self, message: str, *args: Any, **kwargs: Any):
   |                                                            ^^^ ANN401
15 |         self.message = message
16 |         super().__init__(message, *args)
   |

src/repo_organizer/infrastructure/errors/exceptions.py:134:7: A001 Variable `FileNotFoundError` is shadowing a Python builtin
    |
134 | class FileNotFoundError(FileSystemError):
    |       ^^^^^^^^^^^^^^^^^ A001
135 |     """Exception raised when a file is not found."""
    |

src/repo_organizer/infrastructure/github_rest.py:12:29: TC003 Move standard library import `collections.abc.Sequence` into a type-checking block
   |
11 | import base64
12 | from collections.abc import Sequence
   |                             ^^^^^^^^ TC003
13 |
14 | import requests
   |
   = help: Move into type-checking block

src/repo_organizer/infrastructure/github_rest.py:28:9: ANN204 Missing return type annotation for special method `__init__`
   |
26 |     """Adapter that fulfils ``SourceControlPort`` using the GitHub REST API."""
27 |
28 |     def __init__(
   |         ^^^^^^^^ ANN204
29 |         self,
30 |         github_username: str,
   |
   = help: Add return type annotation: `None`

src/repo_organizer/infrastructure/github_rest.py:31:23: RUF013 PEP 484 prohibits implicit `Optional`
   |
29 |         self,
30 |         github_username: str,
31 |         github_token: str = None,
   |                       ^^^ RUF013
32 |         rate_limiter=None,
33 |         logger=None,
   |
   = help: Convert to `T | None`

src/repo_organizer/infrastructure/github_rest.py:32:9: ANN001 Missing type annotation for function argument `rate_limiter`
   |
30 |         github_username: str,
31 |         github_token: str = None,
32 |         rate_limiter=None,
   |         ^^^^^^^^^^^^ ANN001
33 |         logger=None,
34 |     ):
   |

src/repo_organizer/infrastructure/github_rest.py:33:9: ANN001 Missing type annotation for function argument `logger`
   |
31 |         github_token: str = None,
32 |         rate_limiter=None,
33 |         logger=None,
   |         ^^^^^^ ANN001
34 |     ):
35 |         """Initialize the GitHub REST adapter.
   |

src/repo_organizer/infrastructure/github_rest.py:57:9: C901 `get_repositories` is too complex (11 > 10)
   |
55 |     # ------------------------------------------------------------------
56 |
57 |     def get_repositories(self, limit: int = 100) -> Sequence[Repository]:
   |         ^^^^^^^^^^^^^^^^ C901
58 |         """Get repositories for the configured user.
   |

src/repo_organizer/infrastructure/github_rest.py:89:40: PLR2004 Magic value used in comparison, consider replacing `200` with a constant variable
   |
87 |             response = self._session.get(url, params=params, timeout=15)
88 |
89 |             if response.status_code != 200:
   |                                        ^^^ PLR2004
90 |                 if self.logger:
91 |                     self.logger.log(
   |

src/repo_organizer/infrastructure/github_rest.py:92:89: E501 Line too long (90 > 88)
   |
90 |                 if self.logger:
91 |                     self.logger.log(
92 |                         f"Error fetching repos: {response.status_code} - {response.text}",
   |                                                                                         ^^ E501
93 |                         "error",
94 |                     )
   |

src/repo_organizer/infrastructure/github_rest.py:146:36: PLR2004 Magic value used in comparison, consider replacing `200` with a constant variable
    |
144 |         response = self._session.get(url, timeout=15)
145 |
146 |         if response.status_code != 200:
    |                                    ^^^ PLR2004
147 |             if self.logger:
148 |                 self.logger.log(
    |

src/repo_organizer/infrastructure/github_rest.py:184:40: PLR2004 Magic value used in comparison, consider replacing `200` with a constant variable
    |
182 |             response = self._session.get(url, timeout=15)
183 |
184 |             if response.status_code != 200:
    |                                        ^^^ PLR2004
185 |                 if self.logger:
186 |                     self.logger.log(
    |

src/repo_organizer/infrastructure/github_rest.py:197:21: TRY300 Consider moving this statement to an `else` block
    |
195 |                 try:
196 |                     decoded = base64.b64decode(content).decode("utf-8")
197 |                     return decoded
    |                     ^^^^^^^^^^^^^^ TRY300
198 |                 except Exception as e:
199 |                     if self.logger:
    |

src/repo_organizer/infrastructure/github_rest.py:197:28: RET504 Unnecessary assignment to `decoded` before `return` statement
    |
195 |                 try:
196 |                     decoded = base64.b64decode(content).decode("utf-8")
197 |                     return decoded
    |                            ^^^^^^^ RET504
198 |                 except Exception as e:
199 |                     if self.logger:
    |
    = help: Remove unnecessary assignment

src/repo_organizer/infrastructure/github_rest.py:198:24: BLE001 Do not catch blind exception: `Exception`
    |
196 |                     decoded = base64.b64decode(content).decode("utf-8")
197 |                     return decoded
198 |                 except Exception as e:
    |                        ^^^^^^^^^ BLE001
199 |                     if self.logger:
200 |                         self.logger.log(f"Error decoding README: {e}", "error")
    |

src/repo_organizer/infrastructure/github_rest.py:203:13: TRY300 Consider moving this statement to an `else` block
    |
201 |                     return ""
202 |
203 |             return ""
    |             ^^^^^^^^^ TRY300
204 |         except Exception as e:
205 |             if self.logger:
    |

src/repo_organizer/infrastructure/github_rest.py:204:16: BLE001 Do not catch blind exception: `Exception`
    |
203 |             return ""
204 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
205 |             if self.logger:
206 |                 self.logger.log(f"Error fetching README: {e}", "error")
    |

src/repo_organizer/infrastructure/github_rest.py:222:9: SIM102 Use a single `if` statement instead of nested `if` statements
    |
220 |           """
221 |           # Validate owner matches configured username
222 | /         if owner != self.github_username:
223 | |             if self.logger:
    | |___________________________^ SIM102
224 |                   self.logger.log(
225 |                       f"Owner mismatch: {owner} != {self.github_username}", "warning",
    |
    = help: Combine `if` statements using `and`

src/repo_organizer/infrastructure/github_rest.py:268:40: PLR2004 Magic value used in comparison, consider replacing `200` with a constant variable
    |
266 |             response = self._session.get(url, params=params, timeout=15)
267 |
268 |             if response.status_code != 200:
    |                                        ^^^ PLR2004
269 |                 if self.logger:
270 |                     self.logger.log(
    |

src/repo_organizer/infrastructure/github_rest.py:293:13: TRY300 Consider moving this statement to an `else` block
    |
291 |                 commits.append(commit)
292 |
293 |             return commits
    |             ^^^^^^^^^^^^^^ TRY300
294 |
295 |         except Exception as e:
    |

src/repo_organizer/infrastructure/github_rest.py:295:16: BLE001 Do not catch blind exception: `Exception`
    |
293 |             return commits
294 |
295 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
296 |             if self.logger:
297 |                 self.logger.log(f"Error fetching commits for {repo.name}: {e}", "error")
    |

src/repo_organizer/infrastructure/github_rest.py:318:40: PLR2004 Magic value used in comparison, consider replacing `200` with a constant variable
    |
316 |             response = self._session.get(url, params=params, timeout=15)
317 |
318 |             if response.status_code != 200:
    |                                        ^^^ PLR2004
319 |                 if self.logger:
320 |                     self.logger.log(
    |

src/repo_organizer/infrastructure/github_rest.py:336:13: TRY300 Consider moving this statement to an `else` block
    |
334 |                 contributors.append(contributor)
335 |
336 |             return contributors
    |             ^^^^^^^^^^^^^^^^^^^ TRY300
337 |
338 |         except Exception as e:
    |

src/repo_organizer/infrastructure/github_rest.py:338:16: BLE001 Do not catch blind exception: `Exception`
    |
336 |             return contributors
337 |
338 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
339 |             if self.logger:
340 |                 self.logger.log(
    |

src/repo_organizer/infrastructure/logging/auth_logger.py:30:9: ANN204 Missing return type annotation for special method `__init__`
   |
28 |     """
29 |
30 |     def __init__(
   |         ^^^^^^^^ ANN204
31 |         self,
32 |         console: Console | None = None,
   |
   = help: Add return type annotation: `None`

src/repo_organizer/infrastructure/logging/auth_logger.py:52:21: DTZ005 `datetime.datetime.now()` called without a `tz` argument
   |
51 |         # Create a timestamped log file specifically for auth events
52 |         timestamp = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
   |                     ^^^^^^^^^^^^^^^^^^^^^^^ DTZ005
53 |         self.log_file = self.log_dir / f"auth_log_{timestamp}.txt"
   |
   = help: Pass a `datetime.timezone` object to the `tz` parameter

src/repo_organizer/infrastructure/logging/auth_logger.py:57:18: PTH123 `open()` should be replaced by `Path.open()`
   |
55 |         # Create the log file if it doesn't exist
56 |         if not self.log_file.exists():
57 |             with open(self.log_file, "w") as f:
   |                  ^^^^ PTH123
58 |                 f.write(f"# Authentication Log - Started {timestamp}\n")
59 |                 f.write(f"# Version: {self.settings.version}\n\n")
   |

src/repo_organizer/infrastructure/logging/auth_logger.py:65:9: FBT001 Boolean-typed positional argument in function definition
   |
63 |         operation_name: str,
64 |         username: str | None,
65 |         success: bool,
   |         ^^^^^^^ FBT001
66 |         error_message: str | None = None,
67 |         metadata: dict | None = None,
   |

src/repo_organizer/infrastructure/logging/auth_logger.py:78:21: DTZ005 `datetime.datetime.now()` called without a `tz` argument
   |
76 |             metadata: Optional additional metadata about the authentication attempt
77 |         """
78 |         timestamp = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
   |                     ^^^^^^^^^^^^^^^^^^^^^^^ DTZ005
79 |
80 |         # Format username or "anonymous" if None
   |
   = help: Pass a `datetime.timezone` object to the `tz` parameter

src/repo_organizer/infrastructure/logging/auth_logger.py:107:14: PTH123 `open()` should be replaced by `Path.open()`
    |
106 |         # Write to auth log file
107 |         with open(self.log_file, "a") as f:
    |              ^^^^ PTH123
108 |             f.write(log_entry + "\n")
    |

src/repo_organizer/infrastructure/logging/logger.py:33:9: ANN204 Missing return type annotation for special method `__init__`
   |
31 |     """
32 |
33 |     def __init__(
   |         ^^^^^^^^ ANN204
34 |         self,
35 |         log_file: str,
   |
   = help: Add return type annotation: `None`

src/repo_organizer/infrastructure/logging/logger.py:37:9: FBT001 Boolean-typed positional argument in function definition
   |
35 |         log_file: str,
36 |         console: Console | None = None,
37 |         debug_enabled: bool = False,
   |         ^^^^^^^^^^^^^ FBT001
38 |         quiet_mode: bool = False,
39 |     ):
   |

src/repo_organizer/infrastructure/logging/logger.py:37:9: FBT002 Boolean default positional argument in function definition
   |
35 |         log_file: str,
36 |         console: Console | None = None,
37 |         debug_enabled: bool = False,
   |         ^^^^^^^^^^^^^ FBT002
38 |         quiet_mode: bool = False,
39 |     ):
   |

src/repo_organizer/infrastructure/logging/logger.py:38:9: FBT001 Boolean-typed positional argument in function definition
   |
36 |         console: Console | None = None,
37 |         debug_enabled: bool = False,
38 |         quiet_mode: bool = False,
   |         ^^^^^^^^^^ FBT001
39 |     ):
40 |         """Initialize the logger.
   |

src/repo_organizer/infrastructure/logging/logger.py:38:9: FBT002 Boolean default positional argument in function definition
   |
36 |         console: Console | None = None,
37 |         debug_enabled: bool = False,
38 |         quiet_mode: bool = False,
   |         ^^^^^^^^^^ FBT002
39 |     ):
40 |         """Initialize the logger.
   |

src/repo_organizer/infrastructure/logging/logger.py:69:9: PTH103 `os.makedirs()` should be replaced by `Path.mkdir(parents=True)`
   |
68 |         # Ensure the log directory exists
69 |         os.makedirs(os.path.dirname(log_file), exist_ok=True)
   |         ^^^^^^^^^^^ PTH103
70 |
71 |     def log(self, message: str, level: str = "info") -> None:
   |

src/repo_organizer/infrastructure/logging/logger.py:69:21: PTH120 `os.path.dirname()` should be replaced by `Path.parent`
   |
68 |         # Ensure the log directory exists
69 |         os.makedirs(os.path.dirname(log_file), exist_ok=True)
   |                     ^^^^^^^^^^^^^^^ PTH120
70 |
71 |     def log(self, message: str, level: str = "info") -> None:
   |

src/repo_organizer/infrastructure/logging/logger.py:71:9: C901 `log` is too complex (17 > 10)
   |
69 |         os.makedirs(os.path.dirname(log_file), exist_ok=True)
70 |
71 |     def log(self, message: str, level: str = "info") -> None:
   |         ^^^ C901
72 |         """Log a message to both console and log file.
   |

src/repo_organizer/infrastructure/logging/logger.py:71:9: PLR0912 Too many branches (16 > 12)
   |
69 |         os.makedirs(os.path.dirname(log_file), exist_ok=True)
70 |
71 |     def log(self, message: str, level: str = "info") -> None:
   |         ^^^ PLR0912
72 |         """Log a message to both console and log file.
   |

src/repo_organizer/infrastructure/logging/logger.py:89:13: SIM105 Use `contextlib.suppress(IndexError, ValueError)` instead of `try`-`except`-`pass`
   |
87 |           if level == "debug" and "Rate limit: Waiting" in message:
88 |               wait_time = 0.0
89 | /             try:
90 | |                 # Extract wait time from message
91 | |                 wait_time = float(message.split("Waiting ")[1].split("s")[0])
92 | |             except (IndexError, ValueError):
93 | |                 pass
   | |____________________^ SIM105
94 |
95 |               # Only print rate limit messages that exceed threshold
   |
   = help: Replace with `contextlib.suppress(IndexError, ValueError)`

src/repo_organizer/infrastructure/logging/logger.py:96:28: PLR2004 Magic value used in comparison, consider replacing `2.0` with a constant variable
   |
95 |             # Only print rate limit messages that exceed threshold
96 |             if wait_time < 2.0:
   |                            ^^^ PLR2004
97 |                 should_print_to_console = False
   |

src/repo_organizer/infrastructure/logging/logger.py:99:21: DTZ005 `datetime.datetime.now()` called without a `tz` argument
    |
 97 |                 should_print_to_console = False
 98 |
 99 |         timestamp = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    |                     ^^^^^^^^^^^^^^^^^^^^^^^ DTZ005
100 |
101 |         # Add color based on level
    |
    = help: Pass a `datetime.timezone` object to the `tz` parameter

src/repo_organizer/infrastructure/logging/logger.py:136:89: E501 Line too long (94 > 88)
    |
134 |             pass
135 |
136 |         # Ensure synchronization for console output to prevent interleaving with progress bars
    |                                                                                         ^^^^^^ E501
137 |         if should_print_to_console:
138 |             with self._console_lock:
    |

src/repo_organizer/infrastructure/logging/logger.py:139:89: E501 Line too long (91 > 88)
    |
137 |         if should_print_to_console:
138 |             with self._console_lock:
139 |                 # Add a newline before log message to separate from progress bar if present
    |                                                                                         ^^^ E501
140 |                 self.console.print(formatted_log_message)
141 |                 # Ensure a newline is printed after to avoid interference with progress bars
    |

src/repo_organizer/infrastructure/logging/logger.py:141:89: E501 Line too long (92 > 88)
    |
139 |                 # Add a newline before log message to separate from progress bar if present
140 |                 self.console.print(formatted_log_message)
141 |                 # Ensure a newline is printed after to avoid interference with progress bars
    |                                                                                         ^^^^ E501
142 |                 if not formatted_log_message.endswith("\n"):
143 |                     self.console.print("", end="\n")
    |

src/repo_organizer/infrastructure/logging/logger.py:149:9: SIM117 Use a single `with` statement with multiple contexts instead of nested `with` statements
    |
148 |           # Ensure only one thread writes to the log file at a time.
149 | /         with self._file_lock:
150 | |             with open(self.log_file, "a") as logf:
    | |__________________________________________________^ SIM117
151 |                   logf.write(plain_message + "\n")
    |
    = help: Combine `with` statements

src/repo_organizer/infrastructure/logging/logger.py:150:18: PTH123 `open()` should be replaced by `Path.open()`
    |
148 |         # Ensure only one thread writes to the log file at a time.
149 |         with self._file_lock:
150 |             with open(self.log_file, "a") as logf:
    |                  ^^^^ PTH123
151 |                 logf.write(plain_message + "\n")
    |

src/repo_organizer/infrastructure/logging/logger.py:153:45: ANN401 Dynamically typed expressions (typing.Any) are disallowed in `value`
    |
151 |                 logf.write(plain_message + "\n")
152 |
153 |     def update_stats(self, key: str, value: Any = 1, increment: bool = True) -> None:
    |                                             ^^^ ANN401
154 |         """Update statistics.
    |

src/repo_organizer/infrastructure/logging/logger.py:153:54: FBT001 Boolean-typed positional argument in function definition
    |
151 |                 logf.write(plain_message + "\n")
152 |
153 |     def update_stats(self, key: str, value: Any = 1, increment: bool = True) -> None:
    |                                                      ^^^^^^^^^ FBT001
154 |         """Update statistics.
    |

src/repo_organizer/infrastructure/logging/logger.py:153:54: FBT002 Boolean default positional argument in function definition
    |
151 |                 logf.write(plain_message + "\n")
152 |
153 |     def update_stats(self, key: str, value: Any = 1, increment: bool = True) -> None:
    |                                                      ^^^^^^^^^ FBT002
154 |         """Update statistics.
    |

src/repo_organizer/infrastructure/logging/logger.py:217:89: E501 Line too long (89 > 88)
    |
215 |     """Create a configured logger instance.
216 |
217 |     Factory function to create a logger with settings from the application configuration.
    |                                                                                         ^ E501
218 |
219 |     Args:
    |

src/repo_organizer/infrastructure/logging/logger.py:225:16: PTH118 `os.path.join()` should be replaced by `Path` with `/` operator
    |
223 |         Configured Logger instance
224 |     """
225 |     log_file = os.path.join(settings.logs_dir, "repo_organizer.log")
    |                ^^^^^^^^^^^^ PTH118
226 |     return Logger(
227 |         log_file=log_file,
    |

src/repo_organizer/infrastructure/logging/logger.py:242:5: PTH103 `os.makedirs()` should be replaced by `Path.mkdir(parents=True)`
    |
240 |     """
241 |     # Output directory
242 |     os.makedirs(settings.output_dir, exist_ok=True)
    |     ^^^^^^^^^^^ PTH103
243 |
244 |     # Logs directory
    |

src/repo_organizer/infrastructure/logging/logger.py:245:5: PTH103 `os.makedirs()` should be replaced by `Path.mkdir(parents=True)`
    |
244 |     # Logs directory
245 |     os.makedirs(settings.logs_dir, exist_ok=True)
    |     ^^^^^^^^^^^ PTH103
246 |
247 |     # Cache directory
    |

src/repo_organizer/infrastructure/logging/logger.py:248:17: PTH111 `os.path.expanduser()` should be replaced by `Path.expanduser()`
    |
247 |     # Cache directory
248 |     cache_dir = os.path.expanduser(os.path.expandvars(settings.cache_dir))
    |                 ^^^^^^^^^^^^^^^^^^ PTH111
249 |     os.makedirs(cache_dir, exist_ok=True)
    |

src/repo_organizer/infrastructure/logging/logger.py:249:5: PTH103 `os.makedirs()` should be replaced by `Path.mkdir(parents=True)`
    |
247 |     # Cache directory
248 |     cache_dir = os.path.expanduser(os.path.expandvars(settings.cache_dir))
249 |     os.makedirs(cache_dir, exist_ok=True)
    |     ^^^^^^^^^^^ PTH103
    |

src/repo_organizer/infrastructure/rate_limiting/rate_limiter.py:23:9: ANN204 Missing return type annotation for special method `__init__`
   |
21 |     """
22 |
23 |     def __init__(self, calls_per_minute: int = 60, name: str = "API"):
   |         ^^^^^^^^ ANN204
24 |         """Initialize rate limiter.
   |
   = help: Add return type annotation: `None`

src/repo_organizer/infrastructure/rate_limiting/rate_limiter.py:39:50: FBT001 Boolean-typed positional argument in function definition
   |
37 |         self.total_calls = 0
38 |
39 |     def wait(self, logger: Logger | None = None, debug: bool = False) -> float:
   |                                                  ^^^^^ FBT001
40 |         """Wait until next call is allowed according to rate limits.
   |

src/repo_organizer/infrastructure/rate_limiting/rate_limiter.py:39:50: FBT002 Boolean default positional argument in function definition
   |
37 |         self.total_calls = 0
38 |
39 |     def wait(self, logger: Logger | None = None, debug: bool = False) -> float:
   |                                                  ^^^^^ FBT002
40 |         """Wait until next call is allowed according to rate limits.
   |

src/repo_organizer/infrastructure/rate_limiting/rate_limiter.py:95:9: ANN204 Missing return type annotation for special method `__init__`
   |
93 |     """
94 |
95 |     def __init__(self, calls_per_minute: int = 30):
   |         ^^^^^^^^ ANN204
96 |         """Initialize GitHub rate limiter.
   |
   = help: Add return type annotation: `None`

src/repo_organizer/infrastructure/rate_limiting/rate_limiter.py:110:9: ANN204 Missing return type annotation for special method `__init__`
    |
108 |     """
109 |
110 |     def __init__(self, calls_per_minute: int = 10):
    |         ^^^^^^^^ ANN204
111 |         """Initialize LLM rate limiter.
    |
    = help: Add return type annotation: `None`

src/repo_organizer/infrastructure/rate_limiting/retry.py:16:5: PLR0913 Too many arguments in function definition (7 > 5)
   |
16 | def retry_with_backoff(
   |     ^^^^^^^^^^^^^^^^^^ PLR0913
17 |     retries: int = 3,
18 |     backoff_factor: float = 2.0,
   |

src/repo_organizer/infrastructure/rate_limiting/retry.py:16:5: ANN201 Missing return type annotation for public function `retry_with_backoff`
   |
16 | def retry_with_backoff(
   |     ^^^^^^^^^^^^^^^^^^ ANN201
17 |     retries: int = 3,
18 |     backoff_factor: float = 2.0,
   |
   = help: Add return type annotation

src/repo_organizer/infrastructure/rate_limiting/retry.py:23:5: FBT001 Boolean-typed positional argument in function definition
   |
21 |     exceptions: list[type[Exception]] = (Exception,),
22 |     logger: Logger | None = None,
23 |     jitter: bool = True,
   |     ^^^^^^ FBT001
24 | ):
25 |     """Retry decorator with exponential backoff.
   |

src/repo_organizer/infrastructure/rate_limiting/retry.py:23:5: FBT002 Boolean default positional argument in function definition
   |
21 |     exceptions: list[type[Exception]] = (Exception,),
22 |     logger: Logger | None = None,
23 |     jitter: bool = True,
   |     ^^^^^^ FBT002
24 | ):
25 |     """Retry decorator with exponential backoff.
   |

src/repo_organizer/infrastructure/rate_limiting/retry.py:42:28: ANN401 Dynamically typed expressions (typing.Any) are disallowed in `*args`
   |
40 |     def decorator(func: Callable[..., Any]) -> Callable[..., Any]:
41 |         @functools.wraps(func)
42 |         def wrapper(*args: Any, **kwargs: Any) -> Any:
   |                            ^^^ ANN401
43 |             last_exception = None
44 |             wait_time = initial_wait
   |

src/repo_organizer/infrastructure/rate_limiting/retry.py:42:43: ANN401 Dynamically typed expressions (typing.Any) are disallowed in `**kwargs`
   |
40 |     def decorator(func: Callable[..., Any]) -> Callable[..., Any]:
41 |         @functools.wraps(func)
42 |         def wrapper(*args: Any, **kwargs: Any) -> Any:
   |                                           ^^^ ANN401
43 |             last_exception = None
44 |             wait_time = initial_wait
   |

src/repo_organizer/infrastructure/rate_limiting/retry.py:42:51: ANN401 Dynamically typed expressions (typing.Any) are disallowed in `wrapper`
   |
40 |     def decorator(func: Callable[..., Any]) -> Callable[..., Any]:
41 |         @functools.wraps(func)
42 |         def wrapper(*args: Any, **kwargs: Any) -> Any:
   |                                                   ^^^ ANN401
43 |             last_exception = None
44 |             wait_time = initial_wait
   |

src/repo_organizer/infrastructure/rate_limiting/retry.py:61:25: B904 Within an `except` clause, raise exceptions with `raise ... from err` or `raise ... from None` to distinguish them from errors in exception handling
   |
59 |                                 level="error",
60 |                             )
61 |                         raise last_exception
   |                         ^^^^^^^^^^^^^^^^^^^^ B904
62 |
63 |                     # Calculate next wait time with exponential backoff
   |

src/repo_organizer/infrastructure/rate_limiting/retry.py:68:57: S311 Standard pseudo-random generators are not suitable for cryptographic purposes
   |
66 |                     # Add jitter if enabled
67 |                     if jitter:
68 |                         wait_time = wait_time * (0.75 + random.random() * 0.5)
   |                                                         ^^^^^^^^^^^^^^^ S311
69 |
70 |                     if logger:
   |

src/repo_organizer/infrastructure/rate_limiting/retry.py:72:89: E501 Line too long (94 > 88)
   |
70 |                     if logger:
71 |                         logger.log(
72 |                             f"Retry {attempt}/{retries} after {wait_time:.2f}s due to: {e!s}",
   |                                                                                         ^^^^^^ E501
73 |                             level="warning",
74 |                         )
   |

src/repo_organizer/infrastructure/rate_limiting/retry.py:127:9: PLR0913 Too many arguments in function definition (7 > 5)
    |
125 |     """
126 |
127 |     def __init__(
    |         ^^^^^^^^ PLR0913
128 |         self,
129 |         rate_limiters: list[Any],
    |

src/repo_organizer/infrastructure/rate_limiting/retry.py:127:9: ANN204 Missing return type annotation for special method `__init__`
    |
125 |     """
126 |
127 |     def __init__(
    |         ^^^^^^^^ ANN204
128 |         self,
129 |         rate_limiters: list[Any],
    |
    = help: Add return type annotation: `None`

src/repo_organizer/infrastructure/rate_limiting/retry.py:135:9: FBT001 Boolean-typed positional argument in function definition
    |
133 |         initial_wait: float = 1.0,
134 |         max_wait: float = 60.0,
135 |         debug: bool = False,
    |         ^^^^^ FBT001
136 |     ):
137 |         """Initialize the context manager.
    |

src/repo_organizer/infrastructure/rate_limiting/retry.py:135:9: FBT002 Boolean default positional argument in function definition
    |
133 |         initial_wait: float = 1.0,
134 |         max_wait: float = 60.0,
135 |         debug: bool = False,
    |         ^^^^^ FBT002
136 |     ):
137 |         """Initialize the context manager.
    |

src/repo_organizer/infrastructure/rate_limiting/retry.py:156:9: ANN204 Missing return type annotation for special method `__enter__`
    |
154 |         self.debug = debug
155 |
156 |     def __enter__(self):
    |         ^^^^^^^^^ ANN204
157 |         """Enter the context manager, applying all rate limiters.
    |
    = help: Add return type annotation

src/repo_organizer/infrastructure/rate_limiting/retry.py:166:9: ANN204 Missing return type annotation for special method `__exit__`
    |
164 |         return self
165 |
166 |     def __exit__(self, exc_type, exc_val, exc_tb):
    |         ^^^^^^^^ ANN204
167 |         """Exit the context manager.
    |
    = help: Add return type annotation

src/repo_organizer/infrastructure/rate_limiting/retry.py:166:24: ANN001 Missing type annotation for function argument `exc_type`
    |
164 |         return self
165 |
166 |     def __exit__(self, exc_type, exc_val, exc_tb):
    |                        ^^^^^^^^ ANN001
167 |         """Exit the context manager.
    |

src/repo_organizer/infrastructure/rate_limiting/retry.py:166:34: ANN001 Missing type annotation for function argument `exc_val`
    |
164 |         return self
165 |
166 |     def __exit__(self, exc_type, exc_val, exc_tb):
    |                                  ^^^^^^^ ANN001
167 |         """Exit the context manager.
    |

src/repo_organizer/infrastructure/rate_limiting/retry.py:166:43: ANN001 Missing type annotation for function argument `exc_tb`
    |
164 |         return self
165 |
166 |     def __exit__(self, exc_type, exc_val, exc_tb):
    |                                           ^^^^^^ ANN001
167 |         """Exit the context manager.
    |

src/repo_organizer/infrastructure/rate_limiting/retry.py:198:41: S311 Standard pseudo-random generators are not suitable for cryptographic purposes
    |
197 |         # Add jitter
198 |         wait_time = wait_time * (0.75 + random.random() * 0.5)
    |                                         ^^^^^^^^^^^^^^^ S311
199 |
200 |         if self.logger:
    |

src/repo_organizer/infrastructure/source_control/github_adapter.py:9:29: TC003 Move standard library import `collections.abc.Sequence` into a type-checking block
   |
 7 | from __future__ import annotations
 8 |
 9 | from collections.abc import Sequence
   |                             ^^^^^^^^ TC003
10 |
11 | from repo_organizer.domain.source_control.models import (
   |
   = help: Move into type-checking block

src/repo_organizer/infrastructure/source_control/github_adapter.py:17:59: TC001 Move application import `repo_organizer.infrastructure.config.settings.Settings` into a type-checking block
   |
15 |     Repository,
16 | )
17 | from repo_organizer.infrastructure.config.settings import Settings
   |                                                           ^^^^^^^^ TC001
18 | from repo_organizer.infrastructure.logging.logger import Logger
19 | from repo_organizer.infrastructure.rate_limiting.rate_limiter import GitHubRateLimiter
   |
   = help: Move into type-checking block

src/repo_organizer/infrastructure/source_control/github_adapter.py:18:58: TC001 Move application import `repo_organizer.infrastructure.logging.logger.Logger` into a type-checking block
   |
16 | )
17 | from repo_organizer.infrastructure.config.settings import Settings
18 | from repo_organizer.infrastructure.logging.logger import Logger
   |                                                          ^^^^^^ TC001
19 | from repo_organizer.infrastructure.rate_limiting.rate_limiter import GitHubRateLimiter
20 | from repo_organizer.infrastructure.source_control.github_service import GitHubService
   |
   = help: Move into type-checking block

src/repo_organizer/infrastructure/source_control/github_adapter.py:27:89: E501 Line too long (90 > 88)
   |
26 |     This adapter translates between the domain models and the infrastructure service,
27 |     following the Adapter pattern to separate domain concerns from infrastructure details.
   |                                                                                         ^^ E501
28 |     """
   |

src/repo_organizer/infrastructure/source_control/github_adapter.py:30:9: ANN204 Missing return type annotation for special method `__init__`
   |
28 |     """
29 |
30 |     def __init__(
   |         ^^^^^^^^ ANN204
31 |         self,
32 |         settings: Settings,
   |
   = help: Add return type annotation: `None`

src/repo_organizer/infrastructure/source_control/github_adapter.py:78:89: E501 Line too long (109 > 88)
   |
76 |             if self.logger:
77 |                 self.logger.log(
78 |                     f"Owner {owner} doesn't match configured username {self.github_service.github_username}",
   |                                                                                         ^^^^^^^^^^^^^^^^^^^^^ E501
79 |                     "warning",
80 |                 )
   |

src/repo_organizer/infrastructure/source_control/github_adapter.py:104:16: BLE001 Do not catch blind exception: `Exception`
    |
102 |                 for repo in repos_data
103 |             ]
104 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
105 |             if self.logger:
106 |                 self.logger.log(f"Error fetching repositories: {e!s}", "error")
    |

src/repo_organizer/infrastructure/source_control/github_adapter.py:130:16: BLE001 Do not catch blind exception: `Exception`
    |
128 |                 for lang, percentage in languages_data.items()
129 |             ]
130 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
131 |             if self.logger:
132 |                 self.logger.log(
    |

src/repo_organizer/infrastructure/source_control/github_adapter.py:137:51: ARG002 Unused method argument: `limit`
    |
135 |             return []
136 |
137 |     def recent_commits(self, repo: Repository, *, limit: int = 10) -> Sequence[Commit]:
    |                                                   ^^^^^ ARG002
138 |         """Return the *latest* ``limit`` commits for *repo*.
    |

src/repo_organizer/infrastructure/source_control/github_adapter.py:160:89: E501 Line too long (91 > 88)
    |
158 |             if self.logger:
159 |                 self.logger.log(
160 |                     f"Note: Detailed commit history requires a local clone of {repo.name}",
    |                                                                                         ^^^ E501
161 |                     "info",
162 |                 )
    |

src/repo_organizer/infrastructure/source_control/github_adapter.py:164:89: E501 Line too long (105 > 88)
    |
162 |                 )
163 |                 self.logger.log(
164 |                     f"Commit activity summary: {activity_data.get('recent_commits', 0)} recent commits, "
    |                                                                                         ^^^^^^^^^^^^^^^^^ E501
165 |                     f"{activity_data.get('active_weeks', 0)} active weeks",
166 |                     "debug",
    |

src/repo_organizer/infrastructure/source_control/github_adapter.py:172:13: TRY300 Consider moving this statement to an `else` block
    |
170 |             # 1. Clone the repository temporarily
171 |             # 2. Use GitHub API to fetch commit history directly
172 |             return []
    |             ^^^^^^^^^ TRY300
173 |         except Exception as e:
174 |             if self.logger:
    |

src/repo_organizer/infrastructure/source_control/github_adapter.py:173:16: BLE001 Do not catch blind exception: `Exception`
    |
171 |             # 2. Use GitHub API to fetch commit history directly
172 |             return []
173 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
174 |             if self.logger:
175 |                 self.logger.log(
    |

src/repo_organizer/infrastructure/source_control/github_adapter.py:198:89: E501 Line too long (95 > 88)
    |
196 |             )
197 |
198 |             # Log that we would need to add API endpoint or local clone for actual contributors
    |                                                                                         ^^^^^^^ E501
199 |             if self.logger:
200 |                 self.logger.log(
    |

src/repo_organizer/infrastructure/source_control/github_adapter.py:201:89: E501 Line too long (102 > 88)
    |
199 |             if self.logger:
200 |                 self.logger.log(
201 |                     f"Note: Detailed contributor list requires enhanced API endpoint for {repo.name}",
    |                                                                                         ^^^^^^^^^^^^^^ E501
202 |                     "info",
203 |                 )
    |

src/repo_organizer/infrastructure/source_control/github_adapter.py:205:89: E501 Line too long (106 > 88)
    |
203 |                 )
204 |                 self.logger.log(
205 |                     f"Contributor summary: {contributor_stats.get('contributor_count', 0)} contributors, "
    |                                                                                         ^^^^^^^^^^^^^^^^^^ E501
206 |                     f"{contributor_stats.get('active_contributors', 0)} active",
207 |                     "debug",
    |

src/repo_organizer/infrastructure/source_control/github_adapter.py:210:89: E501 Line too long (94 > 88)
    |
208 |                 )
209 |
210 |             # Return empty list - in a real implementation we would enhance the GitHub service
    |                                                                                         ^^^^^^ E501
211 |             # to fetch contributor details through the GitHub API
212 |             return []
    |

src/repo_organizer/infrastructure/source_control/github_adapter.py:212:13: TRY300 Consider moving this statement to an `else` block
    |
210 |             # Return empty list - in a real implementation we would enhance the GitHub service
211 |             # to fetch contributor details through the GitHub API
212 |             return []
    |             ^^^^^^^^^ TRY300
213 |         except Exception as e:
214 |             if self.logger:
    |

src/repo_organizer/infrastructure/source_control/github_adapter.py:213:16: BLE001 Do not catch blind exception: `Exception`
    |
211 |             # to fetch contributor details through the GitHub API
212 |             return []
213 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
214 |             if self.logger:
215 |                 self.logger.log(
    |

src/repo_organizer/infrastructure/source_control/github_service.py:35:41: TC001 Move application import `repo_organizer.utils.logger.Logger` into a type-checking block
   |
33 | from repo_organizer.infrastructure.analysis.pydantic_models import Commit, Contributor
34 | from repo_organizer.utils.exceptions import APIError
35 | from repo_organizer.utils.logger import Logger
   |                                         ^^^^^^ TC001
36 | from repo_organizer.utils.rate_limiter import RateLimiter
   |
   = help: Move into type-checking block

src/repo_organizer/infrastructure/source_control/github_service.py:36:47: TC001 Move application import `repo_organizer.utils.rate_limiter.RateLimiter` into a type-checking block
   |
34 | from repo_organizer.utils.exceptions import APIError
35 | from repo_organizer.utils.logger import Logger
36 | from repo_organizer.utils.rate_limiter import RateLimiter
   |                                               ^^^^^^^^^^^ TC001
   |
   = help: Move into type-checking block

src/repo_organizer/infrastructure/source_control/github_service.py:46:9: ANN204 Missing return type annotation for special method `__init__`
   |
44 |     """
45 |
46 |     def __init__(
   |         ^^^^^^^^ ANN204
47 |         self,
48 |         github_username: str,
   |
   = help: Add return type annotation: `None`

src/repo_organizer/infrastructure/source_control/github_service.py:95:9: C901 `get_repos` is too complex (12 > 10)
   |
93 |         retry=retry_if_exception_type(APIError),
94 |     )
95 |     def get_repos(self, limit: int = 100) -> list[dict[str, Any]]:
   |         ^^^^^^^^^ C901
96 |         """Return public (non-fork) repositories for *github_username*.
   |

src/repo_organizer/infrastructure/source_control/github_service.py:130:58: RUF003 Comment contains ambiguous `–` (EN DASH). Did you mean `-` (HYPHEN-MINUS)?
    |
128 |             try:
129 |                 response = self._session.get(url, params=params, timeout=30)
130 |             except Exception as exc:  # pragma: no cover – network errors
    |                                                          ^ RUF003
131 |                 if self.logger:
132 |                     self.logger.log(f"Network error fetching repos: {exc}", "error")
    |

src/repo_organizer/infrastructure/source_control/github_service.py:135:40: PLR2004 Magic value used in comparison, consider replacing `400` with a constant variable
    |
133 |                 raise APIError(str(exc)) from exc
134 |
135 |             if response.status_code >= 400:
    |                                        ^^^ PLR2004
136 |                 if self.logger:
137 |                     self.logger.log(
    |

src/repo_organizer/infrastructure/source_control/github_service.py:138:89: E501 Line too long (107 > 88)
    |
136 |                 if self.logger:
137 |                     self.logger.log(
138 |                         f"GitHub API error ({response.status_code}) while fetching repos: {response.text}",
    |                                                                                         ^^^^^^^^^^^^^^^^^^^ E501
139 |                         "error",
140 |                     )
    |

src/repo_organizer/infrastructure/source_control/github_service.py:141:64: RUF003 Comment contains ambiguous `–` (EN DASH). Did you mean `-` (HYPHEN-MINUS)?
    |
139 |                         "error",
140 |                     )
141 |                     # Count *all* 4xx/5xx responses as retries – they are
    |                                                                ^ RUF003
142 |                     # potentially transient (e.g. 502/503) or can be retried
143 |                     # after back-off (e.g. 403 rate limited without token).
    |

src/repo_organizer/infrastructure/source_control/github_service.py:145:23: TRY003 Avoid specifying long messages outside the exception class
    |
143 |                     # after back-off (e.g. 403 rate limited without token).
144 |                     self.logger.update_stats("retries")
145 |                 raise APIError(f"GitHub API responded with {response.status_code}")
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
146 |
147 |             try:
    |

src/repo_organizer/infrastructure/source_control/github_service.py:145:32: EM102 Exception must not use an f-string literal, assign to variable first
    |
143 |                     # after back-off (e.g. 403 rate limited without token).
144 |                     self.logger.update_stats("retries")
145 |                 raise APIError(f"GitHub API responded with {response.status_code}")
    |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ EM102
146 |
147 |             try:
    |
    = help: Assign to variable; remove f-string literal

src/repo_organizer/infrastructure/source_control/github_service.py:153:23: TRY003 Avoid specifying long messages outside the exception class
    |
151 |                     self.logger.log("Invalid JSON when fetching repos", "error")
152 |                     self.logger.update_stats("retries")
153 |                 raise APIError("Invalid JSON when fetching repos") from exc
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
154 |
155 |             # ``type: owner`` already filters forks, but be defensive in case
    |

src/repo_organizer/infrastructure/source_control/github_service.py:153:32: EM101 Exception must not use a string literal, assign to variable first
    |
151 |                     self.logger.log("Invalid JSON when fetching repos", "error")
152 |                     self.logger.update_stats("retries")
153 |                 raise APIError("Invalid JSON when fetching repos") from exc
    |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ EM101
154 |
155 |             # ``type: owner`` already filters forks, but be defensive in case
    |
    = help: Assign to variable; remove string literal

src/repo_organizer/infrastructure/source_control/github_service.py:181:89: E501 Line too long (95 > 88)
    |
179 |         if self.logger:
180 |             self.logger.log(
181 |                 f"Successfully fetched {len(results)} repositories for {self.github_username}",
    |                                                                                         ^^^^^^^ E501
182 |                 "success",
183 |             )
    |

src/repo_organizer/infrastructure/source_control/github_service.py:192:9: C901 `get_repo_languages` is too complex (11 > 10)
    |
190 |         retry=retry_if_exception_type(APIError),
191 |     )
192 |     def get_repo_languages(self, repo_name: str) -> dict[str, float]:
    |         ^^^^^^^^^^^^^^^^^^ C901
193 |         """Get the language breakdown for a repository.
    |

src/repo_organizer/infrastructure/source_control/github_service.py:224:36: PLR2004 Magic value used in comparison, consider replacing `404` with a constant variable
    |
222 |             raise APIError(str(exc)) from exc
223 |
224 |         if response.status_code == 404:
    |                                    ^^^ PLR2004
225 |             # Repository deleted or made private – treat as empty
226 |             return {}
    |

src/repo_organizer/infrastructure/source_control/github_service.py:225:50: RUF003 Comment contains ambiguous `–` (EN DASH). Did you mean `-` (HYPHEN-MINUS)?
    |
224 |         if response.status_code == 404:
225 |             # Repository deleted or made private – treat as empty
    |                                                  ^ RUF003
226 |             return {}
    |

src/repo_organizer/infrastructure/source_control/github_service.py:228:36: PLR2004 Magic value used in comparison, consider replacing `400` with a constant variable
    |
226 |             return {}
227 |
228 |         if response.status_code >= 400:
    |                                    ^^^ PLR2004
229 |             if self.logger:
230 |                 self.logger.log(
    |

src/repo_organizer/infrastructure/source_control/github_service.py:231:89: E501 Line too long (100 > 88)
    |
229 |             if self.logger:
230 |                 self.logger.log(
231 |                     f"GitHub API error ({response.status_code}) fetching languages for {repo_name}",
    |                                                                                         ^^^^^^^^^^^^ E501
232 |                     "warning",
233 |                 )
    |

src/repo_organizer/infrastructure/source_control/github_service.py:235:19: TRY003 Avoid specifying long messages outside the exception class
    |
233 |                 )
234 |                 self.logger.update_stats("retries")
235 |             raise APIError("Error fetching languages")
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
236 |
237 |         try:
    |

src/repo_organizer/infrastructure/source_control/github_service.py:235:28: EM101 Exception must not use a string literal, assign to variable first
    |
233 |                 )
234 |                 self.logger.update_stats("retries")
235 |             raise APIError("Error fetching languages")
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^ EM101
236 |
237 |         try:
    |
    = help: Assign to variable; remove string literal

src/repo_organizer/infrastructure/source_control/github_service.py:242:19: TRY003 Avoid specifying long messages outside the exception class
    |
240 |             if self.logger:
241 |                 self.logger.log("Invalid JSON response for languages", "warning")
242 |             raise APIError("Invalid JSON response for languages") from exc
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
243 |
244 |         if not languages_bytes:
    |

src/repo_organizer/infrastructure/source_control/github_service.py:242:28: EM101 Exception must not use a string literal, assign to variable first
    |
240 |             if self.logger:
241 |                 self.logger.log("Invalid JSON response for languages", "warning")
242 |             raise APIError("Invalid JSON response for languages") from exc
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ EM101
243 |
244 |         if not languages_bytes:
    |
    = help: Assign to variable; remove string literal

src/repo_organizer/infrastructure/source_control/github_service.py:301:36: PLR2004 Magic value used in comparison, consider replacing `404` with a constant variable
    |
299 |             raise APIError(str(exc)) from exc
300 |
301 |         if response.status_code == 404:
    |                                    ^^^ PLR2004
302 |             # README may legitimately be missing – treat 404 as empty.
303 |             if self.logger:
    |

src/repo_organizer/infrastructure/source_control/github_service.py:302:50: RUF003 Comment contains ambiguous `–` (EN DASH). Did you mean `-` (HYPHEN-MINUS)?
    |
301 |         if response.status_code == 404:
302 |             # README may legitimately be missing – treat 404 as empty.
    |                                                  ^ RUF003
303 |             if self.logger:
304 |                 self.logger.log(f"No README found for {repo_name}", "debug")
    |

src/repo_organizer/infrastructure/source_control/github_service.py:307:36: PLR2004 Magic value used in comparison, consider replacing `400` with a constant variable
    |
305 |             return ""
306 |
307 |         if response.status_code >= 400:
    |                                    ^^^ PLR2004
308 |             if self.logger:
309 |                 self.logger.log(
    |

src/repo_organizer/infrastructure/source_control/github_service.py:310:89: E501 Line too long (97 > 88)
    |
308 |             if self.logger:
309 |                 self.logger.log(
310 |                     f"GitHub API error ({response.status_code}) fetching README for {repo_name}",
    |                                                                                         ^^^^^^^^^ E501
311 |                     "warning",
312 |                 )
    |

src/repo_organizer/infrastructure/source_control/github_service.py:314:19: TRY003 Avoid specifying long messages outside the exception class
    |
312 |                 )
313 |                 self.logger.update_stats("retries")
314 |             raise APIError("Error fetching README")
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
315 |
316 |         # Truncate to *max_bytes* characters to stay within context limits.
    |

src/repo_organizer/infrastructure/source_control/github_service.py:314:28: EM101 Exception must not use a string literal, assign to variable first
    |
312 |                 )
313 |                 self.logger.update_stats("retries")
314 |             raise APIError("Error fetching README")
    |                            ^^^^^^^^^^^^^^^^^^^^^^^ EM101
315 |
316 |         # Truncate to *max_bytes* characters to stay within context limits.
    |
    = help: Assign to variable; remove string literal

src/repo_organizer/infrastructure/source_control/github_service.py:325:16: RET504 Unnecessary assignment to `readme_content` before `return` statement
    |
323 |         )
324 |
325 |         return readme_content
    |                ^^^^^^^^^^^^^^ RET504
326 |
327 |     def get_repo_commits(self, repo_path: str, limit: int = 10) -> list[Commit]:
    |
    = help: Remove unnecessary assignment

src/repo_organizer/infrastructure/source_control/github_service.py:338:20: PTH112 `os.path.isdir()` should be replaced by `Path.is_dir()`
    |
336 |         """
337 |         try:
338 |             if not os.path.isdir(repo_path):
    |                    ^^^^^^^^^^^^^ PTH112
339 |                 return []
    |

src/repo_organizer/infrastructure/source_control/github_service.py:345:17: PERF401 Use a list comprehension to create a transformed list
    |
344 |               for commit in list(repo.iter_commits("HEAD", max_count=limit)):
345 | /                 commits.append(
346 | |                     Commit(
347 | |                         hash=commit.hexsha[:7],
348 | |                         message=commit.message.split("\n")[0],
349 | |                         author=commit.author.name,
350 | |                         date=datetime.datetime.fromtimestamp(
351 | |                             commit.committed_date,
352 | |                         ).strftime("%Y-%m-%d"),
353 | |                     ),
354 | |                 )
    | |_________________^ PERF401
355 |
356 |               return commits
    |
    = help: Replace for loop with list comprehension

src/repo_organizer/infrastructure/source_control/github_service.py:350:30: DTZ006 `datetime.datetime.fromtimestamp()` called without a `tz` argument
    |
348 |                           message=commit.message.split("\n")[0],
349 |                           author=commit.author.name,
350 |                           date=datetime.datetime.fromtimestamp(
    |  ______________________________^
351 | |                             commit.committed_date,
352 | |                         ).strftime("%Y-%m-%d"),
    | |_________________________^ DTZ006
353 |                       ),
354 |                   )
    |
    = help: Pass a `datetime.timezone` object to the `tz` parameter

src/repo_organizer/infrastructure/source_control/github_service.py:356:13: TRY300 Consider moving this statement to an `else` block
    |
354 |                 )
355 |
356 |             return commits
    |             ^^^^^^^^^^^^^^ TRY300
357 |         except Exception as e:
358 |             if self.logger:
    |

src/repo_organizer/infrastructure/source_control/github_service.py:357:16: BLE001 Do not catch blind exception: `Exception`
    |
356 |             return commits
357 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
358 |             if self.logger:
359 |                 self.logger.log(
    |

src/repo_organizer/infrastructure/source_control/github_service.py:374:20: PTH112 `os.path.isdir()` should be replaced by `Path.is_dir()`
    |
372 |         """
373 |         try:
374 |             if not os.path.isdir(repo_path):
    |                    ^^^^^^^^^^^^^ PTH112
375 |                 return []
    |

src/repo_organizer/infrastructure/source_control/github_service.py:377:22: S603 `subprocess` call: check for execution of untrusted input
    |
375 |                 return []
376 |
377 |             result = subprocess.run(
    |                      ^^^^^^^^^^^^^^ S603
378 |                 ["git", "shortlog", "-sn", "--no-merges"],
379 |                 capture_output=True,
    |

src/repo_organizer/infrastructure/source_control/github_service.py:378:17: S607 Starting a process with a partial executable path
    |
377 |             result = subprocess.run(
378 |                 ["git", "shortlog", "-sn", "--no-merges"],
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ S607
379 |                 capture_output=True,
380 |                 text=True,
    |

src/repo_organizer/infrastructure/source_control/github_service.py:390:42: PLR2004 Magic value used in comparison, consider replacing `2` with a constant variable
    |
388 |                     if line.strip():
389 |                         parts = line.strip().split("\t")
390 |                         if len(parts) == 2:
    |                                          ^ PLR2004
391 |                             count, name = parts
392 |                             contributors.append(
    |

src/repo_organizer/infrastructure/source_control/github_service.py:398:13: TRY300 Consider moving this statement to an `else` block
    |
396 |                             )
397 |
398 |             return contributors
    |             ^^^^^^^^^^^^^^^^^^^ TRY300
399 |         except Exception as e:
400 |             if self.logger:
    |

src/repo_organizer/infrastructure/source_control/github_service.py:399:16: BLE001 Do not catch blind exception: `Exception`
    |
398 |             return contributors
399 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
400 |             if self.logger:
401 |                 self.logger.log(
    |

src/repo_organizer/infrastructure/source_control/github_service.py:411:9: C901 `get_repo_issues_stats` is too complex (24 > 10)
    |
409 |         retry=retry_if_exception_type(APIError),
410 |     )
411 |     def get_repo_issues_stats(self, repo_name: str) -> dict[str, Any]:
    |         ^^^^^^^^^^^^^^^^^^^^^ C901
412 |         """Get issue statistics for a repository.
    |

src/repo_organizer/infrastructure/source_control/github_service.py:411:9: PLR0912 Too many branches (23 > 12)
    |
409 |         retry=retry_if_exception_type(APIError),
410 |     )
411 |     def get_repo_issues_stats(self, repo_name: str) -> dict[str, Any]:
    |         ^^^^^^^^^^^^^^^^^^^^^ PLR0912
412 |         """Get issue statistics for a repository.
    |

src/repo_organizer/infrastructure/source_control/github_service.py:411:9: PLR0915 Too many statements (59 > 50)
    |
409 |         retry=retry_if_exception_type(APIError),
410 |     )
411 |     def get_repo_issues_stats(self, repo_name: str) -> dict[str, Any]:
    |         ^^^^^^^^^^^^^^^^^^^^^ PLR0915
412 |         """Get issue statistics for a repository.
    |

src/repo_organizer/infrastructure/source_control/github_service.py:437:45: PLR2004 Magic value used in comparison, consider replacing `404` with a constant variable
    |
435 |             open_response = self._session.get(open_url, params=params, timeout=15)
436 |
437 |             if open_response.status_code == 404:
    |                                             ^^^ PLR2004
438 |                 return {"open_count": 0, "closed_count": 0, "recent_activity": False}
    |

src/repo_organizer/infrastructure/source_control/github_service.py:440:45: PLR2004 Magic value used in comparison, consider replacing `400` with a constant variable
    |
438 |                 return {"open_count": 0, "closed_count": 0, "recent_activity": False}
439 |
440 |             if open_response.status_code >= 400:
    |                                             ^^^ PLR2004
441 |                 if self.logger:
442 |                     self.logger.log(
    |

src/repo_organizer/infrastructure/source_control/github_service.py:460:24: BLE001 Do not catch blind exception: `Exception`
    |
458 |                     # Just count what we got
459 |                     total_open = len(open_response.json())
460 |                 except Exception:  # Handle any JSON decode or other errors
    |                        ^^^^^^^^^ BLE001
461 |                     total_open = 0
    |

src/repo_organizer/infrastructure/source_control/github_service.py:476:55: PLR2004 Magic value used in comparison, consider replacing `200` with a constant variable
    |
474 |                         open_url, params=recent_params, timeout=15,
475 |                     )
476 |                     if recent_response.status_code == 200:
    |                                                       ^^^ PLR2004
477 |                         recent_issues = recent_response.json()
478 |                         if recent_issues:
    |

src/repo_organizer/infrastructure/source_control/github_service.py:479:35: DTZ005 `datetime.datetime.now()` called without a `tz` argument
    |
477 |                         recent_issues = recent_response.json()
478 |                         if recent_issues:
479 |                             now = datetime.datetime.now()
    |                                   ^^^^^^^^^^^^^^^^^^^^^^^ DTZ005
480 |                             for issue in recent_issues:
481 |                                 updated_at = issue.get("updated_at")
    |
    = help: Pass a `datetime.timezone` object to the `tz` parameter

src/repo_organizer/infrastructure/source_control/github_service.py:486:69: PLR2004 Magic value used in comparison, consider replacing `30` with a constant variable
    |
484 | …                         updated_at.rstrip("Z"),
485 | …                     )
486 | …                     if (now - updated_date).days <= 30:
    |                                                       ^^ PLR2004
487 | …                         recent_activity = True
488 | …                         break
    |

src/repo_organizer/infrastructure/source_control/github_service.py:489:24: BLE001 Do not catch blind exception: `Exception`
    |
487 |                                         recent_activity = True
488 |                                         break
489 |                 except Exception as e:
    |                        ^^^^^^^^^ BLE001
490 |                     if self.logger:
491 |                         self.logger.log(f"Error checking recent activity: {e}", "debug")
    |

src/repo_organizer/infrastructure/source_control/github_service.py:501:50: PLR2004 Magic value used in comparison, consider replacing `200` with a constant variable
    |
499 |             try:
500 |                 stats_response = self._session.get(stats_url, timeout=15)
501 |                 if stats_response.status_code == 200:
    |                                                  ^^^ PLR2004
502 |                     repo_data = stats_response.json()
503 |                     total_issues = repo_data.get("open_issues_count", 0)
    |

src/repo_organizer/infrastructure/source_control/github_service.py:504:89: E501 Line too long (93 > 88)
    |
502 |                     repo_data = stats_response.json()
503 |                     total_issues = repo_data.get("open_issues_count", 0)
504 |                     # Total issues count in GitHub API includes PRs, so it's an approximation
    |                                                                                         ^^^^^ E501
505 |                     # but we know open_issues_count includes PRs, so closed issues estimate is rough
506 |                     if total_issues >= total_open:
    |

src/repo_organizer/infrastructure/source_control/github_service.py:505:89: E501 Line too long (100 > 88)
    |
503 |                     total_issues = repo_data.get("open_issues_count", 0)
504 |                     # Total issues count in GitHub API includes PRs, so it's an approximation
505 |                     # but we know open_issues_count includes PRs, so closed issues estimate is rough
    |                                                                                         ^^^^^^^^^^^^ E501
506 |                     if total_issues >= total_open:
507 |                         closed_count = max(0, total_issues - total_open)
    |

src/repo_organizer/infrastructure/source_control/github_service.py:508:20: BLE001 Do not catch blind exception: `Exception`
    |
506 |                     if total_issues >= total_open:
507 |                         closed_count = max(0, total_issues - total_open)
508 |             except Exception as e:
    |                    ^^^^^^^^^ BLE001
509 |                 if self.logger:
510 |                     self.logger.log(f"Error fetching repo stats: {e}", "debug")
    |

src/repo_organizer/infrastructure/source_control/github_service.py:512:13: TRY300 Consider moving this statement to an `else` block
    |
510 |                       self.logger.log(f"Error fetching repo stats: {e}", "debug")
511 |
512 | /             return {
513 | |                 "open_count": total_open,
514 | |                 "closed_count": closed_count,
515 | |                 "recent_activity": recent_activity,
516 | |             }
    | |_____________^ TRY300
517 |           except Exception as e:
518 |               if self.logger:
    |

src/repo_organizer/infrastructure/source_control/github_service.py:521:19: TRY003 Avoid specifying long messages outside the exception class
    |
519 |                 self.logger.log(f"Error fetching issues stats: {e!s}", "warning")
520 |                 self.logger.update_stats("retries")
521 |             raise APIError(f"Error fetching issues stats: {e!s}") from e
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
522 |
523 |     @retry(
    |

src/repo_organizer/infrastructure/source_control/github_service.py:521:28: EM102 Exception must not use an f-string literal, assign to variable first
    |
519 |                 self.logger.log(f"Error fetching issues stats: {e!s}", "warning")
520 |                 self.logger.update_stats("retries")
521 |             raise APIError(f"Error fetching issues stats: {e!s}") from e
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ EM102
522 |
523 |     @retry(
    |
    = help: Assign to variable; remove f-string literal

src/repo_organizer/infrastructure/source_control/github_service.py:528:9: C901 `get_repo_commit_activity` is too complex (15 > 10)
    |
526 |         retry=retry_if_exception_type(APIError),
527 |     )
528 |     def get_repo_commit_activity(self, repo_name: str) -> dict[str, Any]:
    |         ^^^^^^^^^^^^^^^^^^^^^^^^ C901
529 |         """Get commit activity statistics for a repository.
    |

src/repo_organizer/infrastructure/source_control/github_service.py:528:9: PLR0912 Too many branches (14 > 12)
    |
526 |         retry=retry_if_exception_type(APIError),
527 |     )
528 |     def get_repo_commit_activity(self, repo_name: str) -> dict[str, Any]:
    |         ^^^^^^^^^^^^^^^^^^^^^^^^ PLR0912
529 |         """Get commit activity statistics for a repository.
    |

src/repo_organizer/infrastructure/source_control/github_service.py:550:40: PLR2004 Magic value used in comparison, consider replacing `202` with a constant variable
    |
548 |             response = self._session.get(url, timeout=20)
549 |
550 |             if response.status_code == 202:
    |                                        ^^^ PLR2004
551 |                 # GitHub is computing the stats asynchronously
552 |                 if self.logger:
    |

src/repo_organizer/infrastructure/source_control/github_service.py:554:89: E501 Line too long (89 > 88)
    |
552 |                 if self.logger:
553 |                     self.logger.log(
554 |                         f"GitHub is computing commit stats for {repo_name}, retrying...",
    |                                                                                         ^ E501
555 |                         "debug",
556 |                     )
    |

src/repo_organizer/infrastructure/source_control/github_service.py:558:17: TRY301 Abstract `raise` to an inner function
    |
556 |                     )
557 |                 # This will trigger a retry through the decorator
558 |                 raise APIError("GitHub is computing stats, retry needed")
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY301
559 |
560 |             if response.status_code == 204 or response.status_code == 404:
    |

src/repo_organizer/infrastructure/source_control/github_service.py:558:23: TRY003 Avoid specifying long messages outside the exception class
    |
556 |                     )
557 |                 # This will trigger a retry through the decorator
558 |                 raise APIError("GitHub is computing stats, retry needed")
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
559 |
560 |             if response.status_code == 204 or response.status_code == 404:
    |

src/repo_organizer/infrastructure/source_control/github_service.py:558:32: EM101 Exception must not use a string literal, assign to variable first
    |
556 |                     )
557 |                 # This will trigger a retry through the decorator
558 |                 raise APIError("GitHub is computing stats, retry needed")
    |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ EM101
559 |
560 |             if response.status_code == 204 or response.status_code == 404:
    |
    = help: Assign to variable; remove string literal

src/repo_organizer/infrastructure/source_control/github_service.py:560:16: PLR1714 Consider merging multiple comparisons: `response.status_code in {204, 404}`.
    |
558 |                 raise APIError("GitHub is computing stats, retry needed")
559 |
560 |             if response.status_code == 204 or response.status_code == 404:
    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ PLR1714
561 |                 return {"recent_commits": 0, "active_weeks": 0, "total_commits": 0}
    |
    = help: Merge multiple comparisons

src/repo_organizer/infrastructure/source_control/github_service.py:560:40: PLR2004 Magic value used in comparison, consider replacing `204` with a constant variable
    |
558 |                 raise APIError("GitHub is computing stats, retry needed")
559 |
560 |             if response.status_code == 204 or response.status_code == 404:
    |                                        ^^^ PLR2004
561 |                 return {"recent_commits": 0, "active_weeks": 0, "total_commits": 0}
    |

src/repo_organizer/infrastructure/source_control/github_service.py:560:71: PLR2004 Magic value used in comparison, consider replacing `404` with a constant variable
    |
558 |                 raise APIError("GitHub is computing stats, retry needed")
559 |
560 |             if response.status_code == 204 or response.status_code == 404:
    |                                                                       ^^^ PLR2004
561 |                 return {"recent_commits": 0, "active_weeks": 0, "total_commits": 0}
    |

src/repo_organizer/infrastructure/source_control/github_service.py:563:40: PLR2004 Magic value used in comparison, consider replacing `400` with a constant variable
    |
561 |                 return {"recent_commits": 0, "active_weeks": 0, "total_commits": 0}
562 |
563 |             if response.status_code >= 400:
    |                                        ^^^ PLR2004
564 |                 if self.logger:
565 |                     self.logger.log(
    |

src/repo_organizer/infrastructure/source_control/github_service.py:591:28: PLR2004 Magic value used in comparison, consider replacing `4` with a constant variable
    |
590 |                     # Count recent commits (last 4 weeks)
591 |                     if i < 4:  # Most recent 4 weeks
    |                            ^ PLR2004
592 |                         recent_commits += week_commits
    |

src/repo_organizer/infrastructure/source_control/github_service.py:594:13: TRY300 Consider moving this statement to an `else` block
    |
592 |                           recent_commits += week_commits
593 |
594 | /             return {
595 | |                 "recent_commits": recent_commits,
596 | |                 "active_weeks": active_weeks,
597 | |                 "total_commits": total_commits,
598 | |             }
    | |_____________^ TRY300
599 |           except Exception as e:
600 |               if self.logger:
    |

src/repo_organizer/infrastructure/source_control/github_service.py:603:19: TRY003 Avoid specifying long messages outside the exception class
    |
601 |                 self.logger.log(f"Error fetching commit activity: {e!s}", "warning")
602 |                 self.logger.update_stats("retries")
603 |             raise APIError(f"Error fetching commit activity: {e!s}") from e
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
604 |
605 |     @retry(
    |

src/repo_organizer/infrastructure/source_control/github_service.py:603:28: EM102 Exception must not use an f-string literal, assign to variable first
    |
601 |                 self.logger.log(f"Error fetching commit activity: {e!s}", "warning")
602 |                 self.logger.update_stats("retries")
603 |             raise APIError(f"Error fetching commit activity: {e!s}") from e
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ EM102
604 |
605 |     @retry(
    |
    = help: Assign to variable; remove f-string literal

src/repo_organizer/infrastructure/source_control/github_service.py:610:9: C901 `get_repo_contributors_stats` is too complex (15 > 10)
    |
608 |         retry=retry_if_exception_type(APIError),
609 |     )
610 |     def get_repo_contributors_stats(self, repo_name: str) -> dict[str, Any]:
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^ C901
611 |         """Get contributor statistics for a repository.
    |

src/repo_organizer/infrastructure/source_control/github_service.py:610:9: PLR0912 Too many branches (14 > 12)
    |
608 |         retry=retry_if_exception_type(APIError),
609 |     )
610 |     def get_repo_contributors_stats(self, repo_name: str) -> dict[str, Any]:
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^ PLR0912
611 |         """Get contributor statistics for a repository.
    |

src/repo_organizer/infrastructure/source_control/github_service.py:632:40: PLR2004 Magic value used in comparison, consider replacing `202` with a constant variable
    |
630 |             response = self._session.get(url, timeout=20)
631 |
632 |             if response.status_code == 202:
    |                                        ^^^ PLR2004
633 |                 # GitHub is computing the stats asynchronously
634 |                 if self.logger:
    |

src/repo_organizer/infrastructure/source_control/github_service.py:636:89: E501 Line too long (94 > 88)
    |
634 |                 if self.logger:
635 |                     self.logger.log(
636 |                         f"GitHub is computing contributor stats for {repo_name}, retrying...",
    |                                                                                         ^^^^^^ E501
637 |                         "debug",
638 |                     )
    |

src/repo_organizer/infrastructure/source_control/github_service.py:640:17: TRY301 Abstract `raise` to an inner function
    |
638 |                     )
639 |                 # This will trigger a retry through the decorator
640 |                 raise APIError("GitHub is computing stats, retry needed")
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY301
641 |
642 |             if response.status_code == 204 or response.status_code == 404:
    |

src/repo_organizer/infrastructure/source_control/github_service.py:640:23: TRY003 Avoid specifying long messages outside the exception class
    |
638 |                     )
639 |                 # This will trigger a retry through the decorator
640 |                 raise APIError("GitHub is computing stats, retry needed")
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
641 |
642 |             if response.status_code == 204 or response.status_code == 404:
    |

src/repo_organizer/infrastructure/source_control/github_service.py:640:32: EM101 Exception must not use a string literal, assign to variable first
    |
638 |                     )
639 |                 # This will trigger a retry through the decorator
640 |                 raise APIError("GitHub is computing stats, retry needed")
    |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ EM101
641 |
642 |             if response.status_code == 204 or response.status_code == 404:
    |
    = help: Assign to variable; remove string literal

src/repo_organizer/infrastructure/source_control/github_service.py:642:16: PLR1714 Consider merging multiple comparisons: `response.status_code in {204, 404}`.
    |
640 |                 raise APIError("GitHub is computing stats, retry needed")
641 |
642 |             if response.status_code == 204 or response.status_code == 404:
    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ PLR1714
643 |                 return {"contributor_count": 0, "active_contributors": 0}
    |
    = help: Merge multiple comparisons

src/repo_organizer/infrastructure/source_control/github_service.py:642:40: PLR2004 Magic value used in comparison, consider replacing `204` with a constant variable
    |
640 |                 raise APIError("GitHub is computing stats, retry needed")
641 |
642 |             if response.status_code == 204 or response.status_code == 404:
    |                                        ^^^ PLR2004
643 |                 return {"contributor_count": 0, "active_contributors": 0}
    |

src/repo_organizer/infrastructure/source_control/github_service.py:642:71: PLR2004 Magic value used in comparison, consider replacing `404` with a constant variable
    |
640 |                 raise APIError("GitHub is computing stats, retry needed")
641 |
642 |             if response.status_code == 204 or response.status_code == 404:
    |                                                                       ^^^ PLR2004
643 |                 return {"contributor_count": 0, "active_contributors": 0}
    |

src/repo_organizer/infrastructure/source_control/github_service.py:645:40: PLR2004 Magic value used in comparison, consider replacing `400` with a constant variable
    |
643 |                 return {"contributor_count": 0, "active_contributors": 0}
644 |
645 |             if response.status_code >= 400:
    |                                        ^^^ PLR2004
646 |                 if self.logger:
647 |                     self.logger.log(
    |

src/repo_organizer/infrastructure/source_control/github_service.py:668:66: PLR2004 Magic value used in comparison, consider replacing `12` with a constant variable
    |
666 |                 for contributor in contributors_data:
667 |                     weeks = contributor.get("weeks", [])
668 |                     if isinstance(weeks, list) and len(weeks) >= 12:  # Last ~3 months
    |                                                                  ^^ PLR2004
669 |                         recent_commits = sum(week.get("c", 0) for week in weeks[-12:])
670 |                         if recent_commits > 0:
    |

src/repo_organizer/infrastructure/source_control/github_service.py:673:13: TRY300 Consider moving this statement to an `else` block
    |
671 |                               active_contributors += 1
672 |
673 | /             return {
674 | |                 "contributor_count": contributor_count,
675 | |                 "active_contributors": active_contributors,
676 | |             }
    | |_____________^ TRY300
677 |           except Exception as e:
678 |               if self.logger:
    |

src/repo_organizer/infrastructure/source_control/github_service.py:683:19: TRY003 Avoid specifying long messages outside the exception class
    |
681 |                 )
682 |                 self.logger.update_stats("retries")
683 |             raise APIError(f"Error fetching contributor stats: {e!s}") from e
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
684 |
685 |     @retry(
    |

src/repo_organizer/infrastructure/source_control/github_service.py:683:28: EM102 Exception must not use an f-string literal, assign to variable first
    |
681 |                 )
682 |                 self.logger.update_stats("retries")
683 |             raise APIError(f"Error fetching contributor stats: {e!s}") from e
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ EM102
684 |
685 |     @retry(
    |
    = help: Assign to variable; remove f-string literal

src/repo_organizer/infrastructure/source_control/github_service.py:690:9: C901 `get_repo_dependency_files` is too complex (18 > 10)
    |
688 |         retry=retry_if_exception_type(APIError),
689 |     )
690 |     def get_repo_dependency_files(self, repo_name: str) -> dict[str, Any]:
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^ C901
691 |         """Get dependency files for a repository (package.json, requirements.txt, etc).
    |

src/repo_organizer/infrastructure/source_control/github_service.py:690:9: PLR0912 Too many branches (18 > 12)
    |
688 |         retry=retry_if_exception_type(APIError),
689 |     )
690 |     def get_repo_dependency_files(self, repo_name: str) -> dict[str, Any]:
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^ PLR0912
691 |         """Get dependency files for a repository (package.json, requirements.txt, etc).
    |

src/repo_organizer/infrastructure/source_control/github_service.py:730:44: PLR2004 Magic value used in comparison, consider replacing `200` with a constant variable
    |
728 |                 response = self._session.get(url, timeout=15)
729 |
730 |                 if response.status_code == 200:
    |                                            ^^^ PLR2004
731 |                     try:
732 |                         content_data = response.json()
    |

src/repo_organizer/infrastructure/source_control/github_service.py:740:28: BLE001 Do not catch blind exception: `Exception`
    |
738 |                             results[file_path] = content
739 |                             found_any = True
740 |                     except Exception as e:
    |                            ^^^^^^^^^ BLE001
741 |                         if self.logger:
742 |                             self.logger.log(
    |

src/repo_organizer/infrastructure/source_control/github_service.py:745:20: BLE001 Do not catch blind exception: `Exception`
    |
743 |                                 f"Error parsing {file_path} content: {e}", "debug",
744 |                             )
745 |             except Exception as e:
    |                    ^^^^^^^^^ BLE001
746 |                 if self.logger:
747 |                     self.logger.log(f"Error fetching {file_path}: {e!s}", "debug")
    |

src/repo_organizer/infrastructure/source_control/github_service.py:759:89: E501 Line too long (114 > 88)
    |
757 |                         dev_deps = list(data.get("devDependencies", {}).keys())
758 |                         summary.append(
759 |                             f"Node.js project with {len(deps)} dependencies and {len(dev_deps)} dev dependencies",
    |                                                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^ E501
760 |                         )
761 |                     except Exception:
    |

src/repo_organizer/infrastructure/source_control/github_service.py:761:28: BLE001 Do not catch blind exception: `Exception`
    |
759 |                             f"Node.js project with {len(deps)} dependencies and {len(dev_deps)} dev dependencies",
760 |                         )
761 |                     except Exception:
    |                            ^^^^^^^^^ BLE001
762 |                         summary.append("Node.js project (could not parse package.json)")
763 |                 elif file == "requirements.txt":
    |

src/repo_organizer/interface/cli/commands.py:60:18: PTH123 `open()` should be replaced by `Path.open()`
   |
58 |             reasoning = ""
59 |
60 |             with open(md_file) as f:
   |                  ^^^^ PTH123
61 |                 content = f.read()
   |

src/repo_organizer/interface/cli/commands.py:90:16: BLE001 Do not catch blind exception: `Exception`
   |
89 |                 analyses.append(analysis)
90 |         except Exception as e:
   |                ^^^^^^^^^ BLE001
91 |             console.print(f"[red]Error loading analysis {md_file}: {e}[/]")
   |

src/repo_organizer/interface/cli/commands.py:96:5: C901 `execute_actions` is too complex (19 > 10)
   |
96 | def execute_actions(
   |     ^^^^^^^^^^^^^^^ C901
97 |     dry_run: bool = True,
98 |     force: bool = False,
   |

src/repo_organizer/interface/cli/commands.py:96:5: PLR0912 Too many branches (20 > 12)
   |
96 | def execute_actions(
   |     ^^^^^^^^^^^^^^^ PLR0912
97 |     dry_run: bool = True,
98 |     force: bool = False,
   |

src/repo_organizer/interface/cli/commands.py:96:5: PLR0915 Too many statements (55 > 50)
   |
96 | def execute_actions(
   |     ^^^^^^^^^^^^^^^ PLR0915
97 |     dry_run: bool = True,
98 |     force: bool = False,
   |

src/repo_organizer/interface/cli/commands.py:96:5: ANN201 Missing return type annotation for public function `execute_actions`
   |
96 | def execute_actions(
   |     ^^^^^^^^^^^^^^^ ANN201
97 |     dry_run: bool = True,
98 |     force: bool = False,
   |
   = help: Add return type annotation: `None`

src/repo_organizer/interface/cli/commands.py:97:5: FBT001 Boolean-typed positional argument in function definition
   |
96 | def execute_actions(
97 |     dry_run: bool = True,
   |     ^^^^^^^ FBT001
98 |     force: bool = False,
99 |     output_dir: str | None = None,
   |

src/repo_organizer/interface/cli/commands.py:97:5: FBT002 Boolean default positional argument in function definition
   |
96 | def execute_actions(
97 |     dry_run: bool = True,
   |     ^^^^^^^ FBT002
98 |     force: bool = False,
99 |     output_dir: str | None = None,
   |

src/repo_organizer/interface/cli/commands.py:98:5: FBT001 Boolean-typed positional argument in function definition
    |
 96 | def execute_actions(
 97 |     dry_run: bool = True,
 98 |     force: bool = False,
    |     ^^^^^ FBT001
 99 |     output_dir: str | None = None,
100 |     github_token: str | None = None,
    |

src/repo_organizer/interface/cli/commands.py:98:5: FBT002 Boolean default positional argument in function definition
    |
 96 | def execute_actions(
 97 |     dry_run: bool = True,
 98 |     force: bool = False,
    |     ^^^^^ FBT002
 99 |     output_dir: str | None = None,
100 |     github_token: str | None = None,
    |

src/repo_organizer/interface/cli/commands.py:160:5: SIM102 Use a single `if` statement instead of nested `if` statements
    |
159 |       # Confirm execution
160 | /     if not force and not dry_run:
161 | |         if not typer.confirm("Execute these actions?"):
    | |_______________________________________________________^ SIM102
162 |               console.print("[yellow]Operation cancelled[/]")
163 |               raise typer.Exit(code=0)
    |
    = help: Combine `if` statements using `and`

src/repo_organizer/interface/cli/commands.py:191:89: E501 Line too long (94 > 88)
    |
189 |                     # Delete repository logic
190 |                     console.print(f"[red]Deleting {repo_name}...[/]")
191 |                     # In the future, we would use the GitHub REST API to delete the repository
    |                                                                                         ^^^^^^ E501
192 |                 elif action == "ARCHIVE":
193 |                     # Archive repository logic
    |

src/repo_organizer/interface/cli/commands.py:195:89: E501 Line too long (95 > 88)
    |
193 |                     # Archive repository logic
194 |                     console.print(f"[yellow]Archiving {repo_name}...[/]")
195 |                     # In the future, we would use the GitHub REST API to archive the repository
    |                                                                                         ^^^^^^^ E501
196 |                 elif action == "EXTRACT":
197 |                     # Extract repository logic
    |

src/repo_organizer/interface/cli/commands.py:201:89: E501 Line too long (94 > 88)
    |
199 |                         f"[blue]Extracting valuable parts from {repo_name}...[/]",
200 |                     )
201 |                     # In the future, we would extract valuable parts before archiving/deleting
    |                                                                                         ^^^^^^ E501
202 |                 elif action == "PIN":
203 |                     # Pin repository logic
    |

src/repo_organizer/interface/cli/commands.py:205:89: E501 Line too long (91 > 88)
    |
203 |                     # Pin repository logic
204 |                     console.print(f"[green]Pinning {repo_name}...[/]")
205 |                     # In the future, we would use the GitHub REST API to pin the repository
    |                                                                                         ^^^ E501
206 |             except Exception as e:
207 |                 console.print(f"[red]Error executing {action} for {repo_name}: {e}[/]")
    |

src/repo_organizer/interface/cli/commands.py:206:20: BLE001 Do not catch blind exception: `Exception`
    |
204 |                     console.print(f"[green]Pinning {repo_name}...[/]")
205 |                     # In the future, we would use the GitHub REST API to pin the repository
206 |             except Exception as e:
    |                    ^^^^^^^^^ BLE001
207 |                 console.print(f"[red]Error executing {action} for {repo_name}: {e}[/]")
    |

src/repo_organizer/services/llm_service.py:19:52: PGH003 Use specific rule codes when ignoring type issues
   |
18 | try:
19 |     from langchain_anthropic import ChatAnthropic  # type: ignore
   |                                                    ^^^^^^^^^^^^^^ PGH003
20 | except ModuleNotFoundError:  # pragma: no cover – executed in test env only
   |

src/repo_organizer/services/llm_service.py:20:49: RUF003 Comment contains ambiguous `–` (EN DASH). Did you mean `-` (HYPHEN-MINUS)?
   |
18 | try:
19 |     from langchain_anthropic import ChatAnthropic  # type: ignore
20 | except ModuleNotFoundError:  # pragma: no cover – executed in test env only
   |                                                 ^ RUF003
21 |
22 |     class _StubChatAnthropic:
   |

src/repo_organizer/services/llm_service.py:25:13: ANN204 Missing return type annotation for special method `__init__`
   |
23 |         """Very small stub that fulfils the interface used in tests."""
24 |
25 |         def __init__(self, *args, **kwargs):
   |             ^^^^^^^^ ANN204
26 |             pass
   |
   = help: Add return type annotation: `None`

src/repo_organizer/services/llm_service.py:25:28: ANN002 Missing type annotation for `*args`
   |
23 |         """Very small stub that fulfils the interface used in tests."""
24 |
25 |         def __init__(self, *args, **kwargs):
   |                            ^^^^^ ANN002
26 |             pass
   |

src/repo_organizer/services/llm_service.py:25:35: ANN003 Missing type annotation for `**kwargs`
   |
23 |         """Very small stub that fulfils the interface used in tests."""
24 |
25 |         def __init__(self, *args, **kwargs):
   |                                   ^^^^^^^^ ANN003
26 |             pass
   |

src/repo_organizer/services/llm_service.py:32:13: ANN202 Missing return type annotation for private function `invoke`
   |
30 |         # ``ChatAnthropic`` anyway, so we just raise to signal unintended
31 |         # usage in production.
32 |         def invoke(self, *args, **kwargs):
   |             ^^^^^^ ANN202
33 |             raise RuntimeError(
34 |                 "ChatAnthropic stub invoked – install 'langchain_anthropic' for production use.",
   |
   = help: Add return type annotation: `Never`

src/repo_organizer/services/llm_service.py:32:26: ANN002 Missing type annotation for `*args`
   |
30 |         # ``ChatAnthropic`` anyway, so we just raise to signal unintended
31 |         # usage in production.
32 |         def invoke(self, *args, **kwargs):
   |                          ^^^^^ ANN002
33 |             raise RuntimeError(
34 |                 "ChatAnthropic stub invoked – install 'langchain_anthropic' for production use.",
   |

src/repo_organizer/services/llm_service.py:32:27: ARG002 Unused method argument: `args`
   |
30 |         # ``ChatAnthropic`` anyway, so we just raise to signal unintended
31 |         # usage in production.
32 |         def invoke(self, *args, **kwargs):
   |                           ^^^^ ARG002
33 |             raise RuntimeError(
34 |                 "ChatAnthropic stub invoked – install 'langchain_anthropic' for production use.",
   |

src/repo_organizer/services/llm_service.py:32:33: ANN003 Missing type annotation for `**kwargs`
   |
30 |         # ``ChatAnthropic`` anyway, so we just raise to signal unintended
31 |         # usage in production.
32 |         def invoke(self, *args, **kwargs):
   |                                 ^^^^^^^^ ANN003
33 |             raise RuntimeError(
34 |                 "ChatAnthropic stub invoked – install 'langchain_anthropic' for production use.",
   |

src/repo_organizer/services/llm_service.py:32:35: ARG002 Unused method argument: `kwargs`
   |
30 |         # ``ChatAnthropic`` anyway, so we just raise to signal unintended
31 |         # usage in production.
32 |         def invoke(self, *args, **kwargs):
   |                                   ^^^^^^ ARG002
33 |             raise RuntimeError(
34 |                 "ChatAnthropic stub invoked – install 'langchain_anthropic' for production use.",
   |

src/repo_organizer/services/llm_service.py:33:19: TRY003 Avoid specifying long messages outside the exception class
   |
31 |           # usage in production.
32 |           def invoke(self, *args, **kwargs):
33 |               raise RuntimeError(
   |  ___________________^
34 | |                 "ChatAnthropic stub invoked – install 'langchain_anthropic' for production use.",
35 | |             )
   | |_____________^ TRY003
36 |
37 |       ChatAnthropic = _StubChatAnthropic  # type: ignore
   |

src/repo_organizer/services/llm_service.py:34:17: EM101 Exception must not use a string literal, assign to variable first
   |
32 |         def invoke(self, *args, **kwargs):
33 |             raise RuntimeError(
34 |                 "ChatAnthropic stub invoked – install 'langchain_anthropic' for production use.",
   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ EM101
35 |             )
   |
   = help: Assign to variable; remove string literal

src/repo_organizer/services/llm_service.py:34:45: RUF001 String contains ambiguous `–` (EN DASH). Did you mean `-` (HYPHEN-MINUS)?
   |
32 |         def invoke(self, *args, **kwargs):
33 |             raise RuntimeError(
34 |                 "ChatAnthropic stub invoked – install 'langchain_anthropic' for production use.",
   |                                             ^ RUF001
35 |             )
   |

src/repo_organizer/services/llm_service.py:34:89: E501 Line too long (97 > 88)
   |
32 |         def invoke(self, *args, **kwargs):
33 |             raise RuntimeError(
34 |                 "ChatAnthropic stub invoked – install 'langchain_anthropic' for production use.",
   |                                                                                         ^^^^^^^^^ E501
35 |             )
   |

src/repo_organizer/services/llm_service.py:37:41: PGH003 Use specific rule codes when ignoring type issues
   |
35 |             )
36 |
37 |     ChatAnthropic = _StubChatAnthropic  # type: ignore
   |                                         ^^^^^^^^^^^^^^ PGH003
38 | from langchain.output_parsers import OutputFixingParser
39 | from langchain_core.messages import HumanMessage
   |

src/repo_organizer/services/llm_service.py:56:9: PLR0913 Too many arguments in function definition (7 > 5)
   |
54 |     """
55 |
56 |     def __init__(
   |         ^^^^^^^^ PLR0913
57 |         self,
58 |         api_key: str,
   |

src/repo_organizer/services/llm_service.py:56:9: ANN204 Missing return type annotation for special method `__init__`
   |
54 |     """
55 |
56 |     def __init__(
   |         ^^^^^^^^ ANN204
57 |         self,
58 |         api_key: str,
   |
   = help: Add return type annotation: `None`

src/repo_organizer/services/llm_service.py:61:9: FBT001 Boolean-typed positional argument in function definition
   |
59 |         model_name: str = "claude-3-7-sonnet-latest",
60 |         temperature: float = 0.2,
61 |         thinking_enabled: bool = True,
   |         ^^^^^^^^^^^^^^^^ FBT001
62 |         thinking_budget: int = 16000,
63 |         rate_limiter: RateLimiter | None = None,
   |

src/repo_organizer/services/llm_service.py:61:9: FBT002 Boolean default positional argument in function definition
   |
59 |         model_name: str = "claude-3-7-sonnet-latest",
60 |         temperature: float = 0.2,
61 |         thinking_enabled: bool = True,
   |         ^^^^^^^^^^^^^^^^ FBT002
62 |         thinking_budget: int = 16000,
63 |         rate_limiter: RateLimiter | None = None,
   |

src/repo_organizer/services/llm_service.py:106:39: RUF003 Comment contains ambiguous `–` (EN DASH). Did you mean `-` (HYPHEN-MINUS)?
    |
104 |         self.llm = ChatAnthropic(**kwargs)
105 |
106 |         # Lazily-built analysis chain – constructed on first use and then
    |                                       ^ RUF003
107 |         # cached for subsequent repository analyses.  Creating the chain can be
108 |         # expensive (especially `OutputFixingParser.from_llm`, which may
    |

src/repo_organizer/services/llm_service.py:114:34: ANN401 Dynamically typed expressions (typing.Any) are disallowed in `x`
    |
112 |         self._analysis_chain: Any | None = None
113 |
114 |     def _log_raw_output(self, x: Any) -> Any:
    |                                  ^^^ ANN401
115 |         """Logs the raw output before parsing only if debug is enabled.
    |

src/repo_organizer/services/llm_service.py:114:42: ANN401 Dynamically typed expressions (typing.Any) are disallowed in `_log_raw_output`
    |
112 |         self._analysis_chain: Any | None = None
113 |
114 |     def _log_raw_output(self, x: Any) -> Any:
    |                                          ^^^ ANN401
115 |         """Logs the raw output before parsing only if debug is enabled.
    |

src/repo_organizer/services/llm_service.py:128:40: ANN401 Dynamically typed expressions (typing.Any) are disallowed in `create_analysis_chain`
    |
126 |         return x
127 |
128 |     def create_analysis_chain(self) -> Any:
    |                                        ^^^ ANN401
129 |         """Create a runnable chain for repository analysis.
    |

src/repo_organizer/services/llm_service.py:141:73: RUF003 Comment contains ambiguous `–` (EN DASH). Did you mean `-` (HYPHEN-MINUS)?
    |
139 |             return self._analysis_chain
140 |
141 |         # Apply rate limiting if available for the *chain build* itself – this
    |                                                                         ^ RUF003
142 |         # can trigger a call to the LLM through OutputFixingParser.
143 |         if self.rate_limiter:
    |

src/repo_organizer/services/llm_service.py:161:89: E501 Line too long (270 > 88)
    |
159 | …
160 | …
161 | …d generating detailed reports. Your task is to evaluate a repository based on its README content and provide valuable insights, recommendations, and a decision on the repository's future.
    |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E501
162 | …
163 | …
    |

src/repo_organizer/services/llm_service.py:174:1: W293 Blank line contains whitespace
    |
172 |             - Forks: {forks}
173 |             - Programming Languages: {languages}
174 |             
    | ^^^^^^^^^^^^ W293
175 |             Activity Information:
176 |             - Open Issues: {open_issues}
    |
    = help: Remove whitespace from blank line

src/repo_organizer/services/llm_service.py:181:1: W293 Blank line contains whitespace
    |
179 |             - Recent Commits: {recent_commits_count}
180 |             - Contributors: {contributor_summary}
181 |             
    | ^^^^^^^^^^^^ W293
182 |             Dependencies:
183 |             - {dependency_info}
    |
    = help: Remove whitespace from blank line

src/repo_organizer/services/llm_service.py:185:1: W293 Blank line contains whitespace
    |
183 |             - {dependency_info}
184 |             - {dependency_context}
185 |             
    | ^^^^^^^^^^^^ W293
186 |             README Content:
187 |             {readme_excerpt}
    |
    = help: Remove whitespace from blank line

src/repo_organizer/services/llm_service.py:189:89: E501 Line too long (168 > 88)
    |
187 | …
188 | …
189 | …ed analysis. Before writing the final report, conduct a thorough evaluation inside your thinking block:
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E501
190 | …
191 | …
    |

src/repo_organizer/services/llm_service.py:192:89: E501 Line too long (89 > 88)
    |
191 |             1. Summarize the key points from the README:
192 |                - Quote relevant sections that describe the main purpose of the repository
    |                                                                                         ^ E501
193 |                - List and count the key features or functionalities (e.g., 1. Feature A, 2. Feature B, etc.)
194 |                - Identify the target audience or use cases
    |

src/repo_organizer/services/llm_service.py:193:89: E501 Line too long (108 > 88)
    |
191 |             1. Summarize the key points from the README:
192 |                - Quote relevant sections that describe the main purpose of the repository
193 |                - List and count the key features or functionalities (e.g., 1. Feature A, 2. Feature B, etc.)
    |                                                                                         ^^^^^^^^^^^^^^^^^^^^ E501
194 |                - Identify the target audience or use cases
    |

src/repo_organizer/services/llm_service.py:197:89: E501 Line too long (91 > 88)
    |
196 |             2. Evaluate the repository's strengths:
197 |                - Consider code quality, documentation, uniqueness, and potential usefulness
    |                                                                                         ^^^ E501
198 |                - Quote specific sections that highlight these strengths
    |

src/repo_organizer/services/llm_service.py:205:89: E501 Line too long (93 > 88)
    |
204 |             4. Assess the repository's overall value and activity level:
205 |                - Consider factors such as last update, stars, forks, and community engagement
    |                                                                                         ^^^^^ E501
206 |                - Quote any relevant statistics or information from the README
    |

src/repo_organizer/services/llm_service.py:221:89: E501 Line too long (96 > 88)
    |
219 |             2. Key strengths.
220 |             3. Areas for improvement (weaknesses).
221 |             4. Specific recommendations (each with a reason and priority: High, Medium, or Low).
    |                                                                                         ^^^^^^^^ E501
222 |             5. An assessment of the repository's activity level.
223 |             6. An estimated value/importance of the repository (High, Medium, or Low).
    |

src/repo_organizer/services/llm_service.py:228:89: E501 Line too long (118 > 88)
    |
227 |             CRITICAL INSTRUCTIONS FOR OUTPUT FORMATTING:
228 |             - Your output MUST be ONLY a valid JSON object. No introductory text, no markdown, no trailing characters.
    |                                                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E501
229 |             - The JSON object MUST strictly adhere to the following schema:
230 |             {format_instructions}
    |

src/repo_organizer/services/llm_service.py:231:89: E501 Line too long (105 > 88)
    |
229 | …     - The JSON object MUST strictly adhere to the following schema:
230 | …     {format_instructions}
231 | …     - Ensure ALL required fields from the schema are present at the TOP LEVEL of the JSON object.
    |                                                                                   ^^^^^^^^^^^^^^^^^ E501
232 | …     - The `recommendations` field MUST be a JSON array, where EACH element is a JSON object with EXACTLY these keys: "recommendatio…
233 | …     - Example for a single recommendation object: {{"recommendation": "Improve test coverage", "reason": "Current tests are insuffi…
    |

src/repo_organizer/services/llm_service.py:232:89: E501 Line too long (168 > 88)
    |
230 | …
231 | …ent at the TOP LEVEL of the JSON object.
232 | …here EACH element is a JSON object with EXACTLY these keys: "recommendation", "reason", and "priority".
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E501
233 | …mmendation": "Improve test coverage", "reason": "Current tests are insufficient", "priority": "High"}}
234 | …., inside another key like "analysis". They must be top-level keys.
    |

src/repo_organizer/services/llm_service.py:233:89: E501 Line too long (167 > 88)
    |
231 | …sent at the TOP LEVEL of the JSON object.
232 | …where EACH element is a JSON object with EXACTLY these keys: "recommendation", "reason", and "priority".
233 | …ommendation": "Improve test coverage", "reason": "Current tests are insufficient", "priority": "High"}}
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E501
234 | …c., inside another key like "analysis". They must be top-level keys.
235 | …ith actual analysis content. Do not output the placeholders.
    |

src/repo_organizer/services/llm_service.py:234:89: E501 Line too long (132 > 88)
    |
232 | …be a JSON array, where EACH element is a JSON object with EXACTLY these keys: "recommendation", "reason", and "priority".
233 | …on object: {{"recommendation": "Improve test coverage", "reason": "Current tests are insufficient", "priority": "High"}}
234 | …, `strengths`, etc., inside another key like "analysis". They must be top-level keys.
    |                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E501
235 | …{some_value}}}} with actual analysis content. Do not output the placeholders.
236 | …t matches the schema.
    |

src/repo_organizer/services/llm_service.py:235:89: E501 Line too long (124 > 88)
    |
233 | …     - Example for a single recommendation object: {{"recommendation": "Improve test coverage", "reason": "Current tests are insuffi…
234 | …     - DO NOT nest fields like `summary`, `strengths`, etc., inside another key like "analysis". They must be top-level keys.
235 | …     - Replace ALL placeholders like {{{{some_value}}}} with actual analysis content. Do not output the placeholders.
    |                                                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E501
236 | …     - Generate ONLY the JSON object that matches the schema.
237 | …     """,
    |

src/repo_organizer/services/llm_service.py:266:89: E501 Line too long (119 > 88)
    |
264 |             "dependency_context": lambda x: x.get("dependency_context", ""),
265 |             "readme_excerpt": lambda x: x.get("readme_excerpt", ""),
266 |             "format_instructions": lambda _: pydantic_parser.get_format_instructions(),  # Use base parser instructions
    |                                                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E501
267 |         }
    |

src/repo_organizer/services/llm_service.py:280:9: C901 `analyze_repository` is too complex (17 > 10)
    |
278 |         return self._analysis_chain
279 |
280 |     def analyze_repository(self, repo_data: dict) -> RepoAnalysis:
    |         ^^^^^^^^^^^^^^^^^^ C901
281 |         """Analyze a repository using the LLM.
    |

src/repo_organizer/services/llm_service.py:280:9: PLR0912 Too many branches (16 > 12)
    |
278 |         return self._analysis_chain
279 |
280 |     def analyze_repository(self, repo_data: dict) -> RepoAnalysis:
    |         ^^^^^^^^^^^^^^^^^^ PLR0912
281 |         """Analyze a repository using the LLM.
    |

src/repo_organizer/services/llm_service.py:313:13: TRY300 Consider moving this statement to an `else` block
    |
311 |                 )
312 |
313 |             return result
    |             ^^^^^^^^^^^^^ TRY300
314 |         except Exception as e:
315 |             # ----------------------------------------------------------------
    |

src/repo_organizer/services/llm_service.py:314:16: BLE001 Do not catch blind exception: `Exception`
    |
313 |             return result
314 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
315 |             # ----------------------------------------------------------------
316 |             # Fallback path primarily for **unit tests** where the underlying
    |

src/repo_organizer/services/llm_service.py:331:89: E501 Line too long (90 > 88)
    |
329 |                     if self.logger and getattr(self.logger, "debug_enabled", False):
330 |                         self.logger.log(
331 |                             f"Attempting direct parsing. Raw content: {content[:500]}...",
    |                                                                                         ^^ E501
332 |                             level="debug",
333 |                         )
    |

src/repo_organizer/services/llm_service.py:364:32: BLE001 Do not catch blind exception: `Exception`
    |
362 |                         try:
363 |                             return RepoAnalysis.model_validate_json(content)
364 |                         except Exception as parse_err:
    |                                ^^^^^^^^^ BLE001
365 |                             if self.logger:
366 |                                 self.logger.log(
    |

src/repo_organizer/services/llm_service.py:370:24: BLE001 Do not catch blind exception: `Exception`
    |
368 |                                 )
369 |
370 |                 except Exception as fallback_err:
    |                        ^^^^^^^^^ BLE001
371 |                     if self.logger:
372 |                         self.logger.log(
    |

src/repo_organizer/services/progress_reporter.py:42:9: ANN204 Missing return type annotation for special method `__init__`
   |
40 |     """
41 |
42 |     def __init__(self):
   |         ^^^^^^^^ ANN204
43 |         """Initialize the progress reporter."""
44 |         self._observers: list[ProgressObserver] = []
   |
   = help: Add return type annotation: `None`

src/repo_organizer/services/repository_analyzer_service.py:24:9: PLR0913 Too many arguments in function definition (9 > 5)
   |
22 |     """
23 |
24 |     def __init__(
   |         ^^^^^^^^ PLR0913
25 |         self,
26 |         output_dir: str = ".out",
   |

src/repo_organizer/services/repository_analyzer_service.py:24:9: ANN204 Missing return type annotation for special method `__init__`
   |
22 |     """
23 |
24 |     def __init__(
   |         ^^^^^^^^ ANN204
25 |         self,
26 |         output_dir: str = ".out",
   |
   = help: Add return type annotation: `None`

src/repo_organizer/services/repository_analyzer_service.py:24:9: D417 Missing argument description in the docstring for `__init__`: `logger`
   |
22 |     """
23 |
24 |     def __init__(
   |         ^^^^^^^^ D417
25 |         self,
26 |         output_dir: str = ".out",
   |

src/repo_organizer/services/repository_analyzer_service.py:31:9: FBT001 Boolean-typed positional argument in function definition
   |
29 |         analyzer: AnalyzerPort | None = None,
30 |         max_repos: int | None = None,
31 |         debug: bool = False,
   |         ^^^^^ FBT001
32 |         repo_filter: str | None = None,
33 |         force_reanalyze: bool = False,
   |

src/repo_organizer/services/repository_analyzer_service.py:31:9: FBT002 Boolean default positional argument in function definition
   |
29 |         analyzer: AnalyzerPort | None = None,
30 |         max_repos: int | None = None,
31 |         debug: bool = False,
   |         ^^^^^ FBT002
32 |         repo_filter: str | None = None,
33 |         force_reanalyze: bool = False,
   |

src/repo_organizer/services/repository_analyzer_service.py:33:9: FBT001 Boolean-typed positional argument in function definition
   |
31 |         debug: bool = False,
32 |         repo_filter: str | None = None,
33 |         force_reanalyze: bool = False,
   |         ^^^^^^^^^^^^^^^ FBT001
34 |         *,
35 |         logger: Logger | None = None,
   |

src/repo_organizer/services/repository_analyzer_service.py:33:9: FBT002 Boolean default positional argument in function definition
   |
31 |         debug: bool = False,
32 |         repo_filter: str | None = None,
33 |         force_reanalyze: bool = False,
   |         ^^^^^^^^^^^^^^^ FBT002
34 |         *,
35 |         logger: Logger | None = None,
   |

src/repo_organizer/services/repository_analyzer_service.py:70:25: PTH118 `os.path.join()` should be replaced by `Path` with `/` operator
   |
68 |             # Keep the legacy behaviour: write a single analysis.log file next
69 |             # to the output directory.  Ensure its parent directory exists.
70 |             logs_path = os.path.join(os.path.dirname(self.output_dir), "analysis.log")
   |                         ^^^^^^^^^^^^ PTH118
71 |             os.makedirs(os.path.dirname(logs_path), exist_ok=True)
72 |             self.logger = Logger(logs_path, debug_enabled=debug)
   |

src/repo_organizer/services/repository_analyzer_service.py:70:38: PTH120 `os.path.dirname()` should be replaced by `Path.parent`
   |
68 |             # Keep the legacy behaviour: write a single analysis.log file next
69 |             # to the output directory.  Ensure its parent directory exists.
70 |             logs_path = os.path.join(os.path.dirname(self.output_dir), "analysis.log")
   |                                      ^^^^^^^^^^^^^^^ PTH120
71 |             os.makedirs(os.path.dirname(logs_path), exist_ok=True)
72 |             self.logger = Logger(logs_path, debug_enabled=debug)
   |

src/repo_organizer/services/repository_analyzer_service.py:71:13: PTH103 `os.makedirs()` should be replaced by `Path.mkdir(parents=True)`
   |
69 |             # to the output directory.  Ensure its parent directory exists.
70 |             logs_path = os.path.join(os.path.dirname(self.output_dir), "analysis.log")
71 |             os.makedirs(os.path.dirname(logs_path), exist_ok=True)
   |             ^^^^^^^^^^^ PTH103
72 |             self.logger = Logger(logs_path, debug_enabled=debug)
   |

src/repo_organizer/services/repository_analyzer_service.py:71:25: PTH120 `os.path.dirname()` should be replaced by `Path.parent`
   |
69 |             # to the output directory.  Ensure its parent directory exists.
70 |             logs_path = os.path.join(os.path.dirname(self.output_dir), "analysis.log")
71 |             os.makedirs(os.path.dirname(logs_path), exist_ok=True)
   |                         ^^^^^^^^^^^^^^^ PTH120
72 |             self.logger = Logger(logs_path, debug_enabled=debug)
   |

src/repo_organizer/services/repository_analyzer_service.py:75:9: PTH103 `os.makedirs()` should be replaced by `Path.mkdir(parents=True)`
   |
74 |         # Create output directories
75 |         os.makedirs(self.output_dir, exist_ok=True)
   |         ^^^^^^^^^^^ PTH103
76 |
77 |     def _should_analyze_repo(self, repo_name: str) -> bool:
   |

src/repo_organizer/services/repository_analyzer_service.py:86:23: PTH118 `os.path.join()` should be replaced by `Path` with `/` operator
   |
84 |             bool: Whether the repository should be analyzed.
85 |         """
86 |         report_path = os.path.join(self.output_dir, f"{repo_name}.md")
   |                       ^^^^^^^^^^^^ PTH118
87 |
88 |         # Skip if report already exists and we're not forcing reanalysis
   |

src/repo_organizer/services/repository_analyzer_service.py:89:12: PTH110 `os.path.exists()` should be replaced by `Path.exists()`
   |
88 |         # Skip if report already exists and we're not forcing reanalysis
89 |         if os.path.exists(report_path) and not self.force_reanalyze:
   |            ^^^^^^^^^^^^^^ PTH110
90 |             self.logger.log(
91 |                 f"Skipping {repo_name} - report already exists", level="info",
   |

src/repo_organizer/services/repository_analyzer_service.py:149:89: E501 Line too long (94 > 88)
    |
147 |                 analysis = domain_analysis.to_pydantic()
148 |
149 |                 # Ensure the repository name in the analysis matches the real repository name.
    |                                                                                         ^^^^^^ E501
150 |                 # The LLM occasionally "corrects" or reformats the name, which causes issues
151 |                 # with filename consistency
    |

src/repo_organizer/services/repository_analyzer_service.py:150:89: E501 Line too long (92 > 88)
    |
149 |                 # Ensure the repository name in the analysis matches the real repository name.
150 |                 # The LLM occasionally "corrects" or reformats the name, which causes issues
    |                                                                                         ^^^^ E501
151 |                 # with filename consistency
152 |                 analysis.repo_name = repo_name
    |

src/repo_organizer/services/repository_analyzer_service.py:174:16: BLE001 Do not catch blind exception: `Exception`
    |
172 |                 tags=["error", "service-unavailable"],
173 |             )
174 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
175 |             self.logger.log(f"Error analyzing {repo_name}: {e!s}", level="error")
176 |             self.logger.update_stats("repos_failed")
    |

src/repo_organizer/services/repository_analyzer_service.py:190:9: C901 `_prepare_repo_data` is too complex (13 > 10)
    |
188 |             )
189 |
190 |     def _prepare_repo_data(self, repo_info: dict[str, Any]) -> dict[str, Any]:
    |         ^^^^^^^^^^^^^^^^^^ C901
191 |         """Prepare repository data for LLM analysis.
    |

src/repo_organizer/services/repository_analyzer_service.py:190:9: PLR0912 Too many branches (13 > 12)
    |
188 |             )
189 |
190 |     def _prepare_repo_data(self, repo_info: dict[str, Any]) -> dict[str, Any]:
    |         ^^^^^^^^^^^^^^^^^^ PLR0912
191 |         """Prepare repository data for LLM analysis.
    |

src/repo_organizer/services/repository_analyzer_service.py:238:68: RUF003 Comment contains ambiguous `–` (EN DASH). Did you mean `-` (HYPHEN-MINUS)?
    |
236 |         # attributes (e.g. ``updated_at`` vs ``updatedAt``).  The service was
237 |         # originally built against GraphQL but was later migrated to the REST
238 |         # endpoints for simplicity.  To remain backward-compatible – and more
    |                                                                    ^ RUF003
239 |         # importantly to *always* populate the prompt with correct values – we
240 |         # transparently fall back to the REST field names when the GraphQL
    |

src/repo_organizer/services/repository_analyzer_service.py:239:75: RUF003 Comment contains ambiguous `–` (EN DASH). Did you mean `-` (HYPHEN-MINUS)?
    |
237 |         # originally built against GraphQL but was later migrated to the REST
238 |         # endpoints for simplicity.  To remain backward-compatible – and more
239 |         # importantly to *always* populate the prompt with correct values – we
    |                                                                           ^ RUF003
240 |         # transparently fall back to the REST field names when the GraphQL
241 |         # ones are missing.
    |

src/repo_organizer/services/repository_analyzer_service.py:334:9: PLR0915 Too many statements (59 > 50)
    |
332 |         }
333 |
334 |     def _write_single_report(
    |         ^^^^^^^^^^^^^^^^^^^^ PLR0915
335 |         self, analysis: RepoAnalysis, repo_info: dict[str, Any],
336 |     ) -> None:
    |

src/repo_organizer/services/repository_analyzer_service.py:344:26: PTH118 `os.path.join()` should be replaced by `Path` with `/` operator
    |
342 |         """
343 |         repo_name = analysis.repo_name
344 |         repo_file_path = os.path.join(self.output_dir, f"{repo_name}.md")
    |                          ^^^^^^^^^^^^ PTH118
345 |         self.logger.log(
346 |             f"Saving report for {repo_name} to {repo_file_path}...", level="debug",
    |

src/repo_organizer/services/repository_analyzer_service.py:350:18: PTH123 `open()` should be replaced by `Path.open()`
    |
349 |         try:
350 |             with open(repo_file_path, "w") as f:
    |                  ^^^^ PTH123
351 |                 f.write(f"# {repo_name}\n\n")
    |

src/repo_organizer/services/repository_analyzer_service.py:361:89: E501 Line too long (93 > 88)
    |
359 |                 f.write(f"- **URL**: [{repo_link}]({repo_link})\n")
360 |                 f.write(
361 |                     f"- **Description**: {repo_info.get('description', 'No description')}\n",
    |                                                                                         ^^^^^ E501
362 |                 )
363 |                 # Handle both GraphQL and REST field names (see above)
    |

src/repo_organizer/services/repository_analyzer_service.py:447:16: BLE001 Do not catch blind exception: `Exception`
    |
445 |                 f"Successfully saved report for {repo_name}", level="success",
446 |             )
447 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
448 |             self.logger.log(
449 |                 f"ERROR saving report for {repo_name} at {repo_file_path}: {e}",
    |

src/repo_organizer/services/repository_analyzer_service.py:460:9: C901 `generate_report` is too complex (11 > 10)
    |
458 |                 )
459 |
460 |     def generate_report(
    |         ^^^^^^^^^^^^^^^ C901
461 |         self, repos: list[dict[str, Any]], analyses: list[RepoAnalysis],
462 |     ) -> None:
    |

src/repo_organizer/services/repository_analyzer_service.py:460:9: PLR0912 Too many branches (13 > 12)
    |
458 |                 )
459 |
460 |     def generate_report(
    |         ^^^^^^^^^^^^^^^ PLR0912
461 |         self, repos: list[dict[str, Any]], analyses: list[RepoAnalysis],
462 |     ) -> None:
    |

src/repo_organizer/services/repository_analyzer_service.py:461:15: ARG002 Unused method argument: `repos`
    |
460 |     def generate_report(
461 |         self, repos: list[dict[str, Any]], analyses: list[RepoAnalysis],
    |               ^^^^^ ARG002
462 |     ) -> None:
463 |         """Generate a summary report of all repository analyses.
    |

src/repo_organizer/services/repository_analyzer_service.py:469:23: PTH118 `os.path.join()` should be replaced by `Path` with `/` operator
    |
467 |             analyses: List of repository analysis results
468 |         """
469 |         report_path = os.path.join(self.output_dir, "repositories_report.md")
    |                       ^^^^^^^^^^^^ PTH118
470 |         self.logger.log(f"Generating summary report at {report_path}...", level="info")
    |

src/repo_organizer/services/repository_analyzer_service.py:473:18: PTH123 `open()` should be replaced by `Path.open()`
    |
472 |         try:
473 |             with open(report_path, "w") as f:
    |                  ^^^^ PTH123
474 |                 f.write("# GitHub Repositories Summary Report\n\n")
475 |                 import datetime
    |

src/repo_organizer/services/repository_analyzer_service.py:478:38: DTZ005 `datetime.datetime.now()` called without a `tz` argument
    |
477 |                 f.write(
478 |                     f"Generated on: {datetime.datetime.now().strftime('%Y-%m-%d')}\n\n",
    |                                      ^^^^^^^^^^^^^^^^^^^^^^^ DTZ005
479 |                 )
    |
    = help: Pass a `datetime.timezone` object to the `tz` parameter

src/repo_organizer/services/repository_analyzer_service.py:556:16: BLE001 Do not catch blind exception: `Exception`
    |
554 |                 level="success",
555 |             )
556 |         except Exception as e:
    |                ^^^^^^^^^ BLE001
557 |             self.logger.log(f"ERROR generating summary report: {e}", level="error")
558 |             if hasattr(self.logger, "debug_enabled") and self.logger.debug_enabled:
    |

src/repo_organizer/services/service_interfaces.py:24:45: ANN401 Dynamically typed expressions (typing.Any) are disallowed in `value`
   |
22 |         ...
23 |
24 |     def update_stats(self, key: str, value: Any = 1, increment: bool = True) -> None:
   |                                             ^^^ ANN401
25 |         """Update statistics."""
26 |         ...
   |

src/repo_organizer/services/service_interfaces.py:24:54: FBT001 Boolean-typed positional argument in function definition
   |
22 |         ...
23 |
24 |     def update_stats(self, key: str, value: Any = 1, increment: bool = True) -> None:
   |                                                      ^^^^^^^^^ FBT001
25 |         """Update statistics."""
26 |         ...
   |

src/repo_organizer/services/service_interfaces.py:24:54: FBT002 Boolean default positional argument in function definition
   |
22 |         ...
23 |
24 |     def update_stats(self, key: str, value: Any = 1, increment: bool = True) -> None:
   |                                                      ^^^^^^^^^ FBT002
25 |         """Update statistics."""
26 |         ...
   |

src/repo_organizer/services/service_interfaces.py:37:53: FBT001 Boolean-typed positional argument in function definition
   |
36 |     def wait(
37 |         self, logger: LoggerProtocol | None = None, debug: bool = False,
   |                                                     ^^^^^ FBT001
38 |     ) -> float:
39 |         """Wait until next call is allowed according to rate limits."""
   |

src/repo_organizer/services/service_interfaces.py:37:53: FBT002 Boolean default positional argument in function definition
   |
36 |     def wait(
37 |         self, logger: LoggerProtocol | None = None, debug: bool = False,
   |                                                     ^^^^^ FBT002
38 |     ) -> float:
39 |         """Wait until next call is allowed according to rate limits."""
   |

src/repo_organizer/services/service_interfaces.py:70:40: ANN401 Dynamically typed expressions (typing.Any) are disallowed in `create_analysis_chain`
   |
68 |     """Interface for language model service implementations."""
69 |
70 |     def create_analysis_chain(self) -> Any:
   |                                        ^^^ ANN401
71 |         """Create a runnable chain for repository analysis."""
72 |         ...
   |

src/repo_organizer/services/service_interfaces.py:87:9: FBT001 Boolean-typed positional argument in function definition
   |
85 |         model_name: str = "claude-3-opus-20240229",
86 |         max_repos: int | None = None,
87 |         retry_failed: bool = False,
   |         ^^^^^^^^^^^^ FBT001
88 |         force_repull: bool = False,
89 |     ) -> list[RepoAnalysis]:
   |

src/repo_organizer/services/service_interfaces.py:87:9: FBT002 Boolean default positional argument in function definition
   |
85 |         model_name: str = "claude-3-opus-20240229",
86 |         max_repos: int | None = None,
87 |         retry_failed: bool = False,
   |         ^^^^^^^^^^^^ FBT002
88 |         force_repull: bool = False,
89 |     ) -> list[RepoAnalysis]:
   |

src/repo_organizer/services/service_interfaces.py:88:9: FBT001 Boolean-typed positional argument in function definition
   |
86 |         max_repos: int | None = None,
87 |         retry_failed: bool = False,
88 |         force_repull: bool = False,
   |         ^^^^^^^^^^^^ FBT001
89 |     ) -> list[RepoAnalysis]:
90 |         """Analyze multiple GitHub repositories and generate reports."""
   |

src/repo_organizer/services/service_interfaces.py:88:9: FBT002 Boolean default positional argument in function definition
   |
86 |         max_repos: int | None = None,
87 |         retry_failed: bool = False,
88 |         force_repull: bool = False,
   |         ^^^^^^^^^^^^ FBT002
89 |     ) -> list[RepoAnalysis]:
90 |         """Analyze multiple GitHub repositories and generate reports."""
   |

src/repo_organizer/shared/__init__.py:18:41: PLC0414 Import alias does not rename original package
   |
17 | from repo_organizer.utils.exceptions import APIError
18 | from repo_organizer.utils.logger import Logger as Logger
   |                                         ^^^^^^^^^^^^^^^^ PLC0414
19 | from repo_organizer.utils.rate_limiter import RateLimiter as RateLimiter
   |
   = help: Remove import alias

src/repo_organizer/shared/__init__.py:19:47: PLC0414 Import alias does not rename original package
   |
17 | from repo_organizer.utils.exceptions import APIError
18 | from repo_organizer.utils.logger import Logger as Logger
19 | from repo_organizer.utils.rate_limiter import RateLimiter as RateLimiter
   |                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^ PLC0414
20 |
21 | __all__ = [
   |
   = help: Remove import alias

src/repo_organizer/utils/__init__.py:1:1: D200 One-line docstring should fit on one line
  |
1 | / """Utility modules for GitHub Repository Organizer.
2 | | """
  | |___^ D200
3 |
4 |   from repo_organizer.utils.exceptions import APIError
  |
  = help: Reformat to one line

src/repo_organizer/utils/exceptions.py:1:1: D200 One-line docstring should fit on one line
  |
1 | / """Custom exceptions for the GitHub Repository Organizer.
2 | | """
  | |___^ D200
  |
  = help: Reformat to one line

src/repo_organizer/utils/logger.py:35:9: ANN204 Missing return type annotation for special method `__init__`
   |
33 |     """
34 |
35 |     def __init__(
   |         ^^^^^^^^ ANN204
36 |         self,
37 |         log_file: str,
   |
   = help: Add return type annotation: `None`

src/repo_organizer/utils/logger.py:39:9: FBT001 Boolean-typed positional argument in function definition
   |
37 |         log_file: str,
38 |         console: Console | None = None,
39 |         debug_enabled: bool = False,
   |         ^^^^^^^^^^^^^ FBT001
40 |         quiet_mode: bool = False,
41 |         username: str | None = None,
   |

src/repo_organizer/utils/logger.py:39:9: FBT002 Boolean default positional argument in function definition
   |
37 |         log_file: str,
38 |         console: Console | None = None,
39 |         debug_enabled: bool = False,
   |         ^^^^^^^^^^^^^ FBT002
40 |         quiet_mode: bool = False,
41 |         username: str | None = None,
   |

src/repo_organizer/utils/logger.py:40:9: FBT001 Boolean-typed positional argument in function definition
   |
38 |         console: Console | None = None,
39 |         debug_enabled: bool = False,
40 |         quiet_mode: bool = False,
   |         ^^^^^^^^^^ FBT001
41 |         username: str | None = None,
42 |     ):
   |

src/repo_organizer/utils/logger.py:40:9: FBT002 Boolean default positional argument in function definition
   |
38 |         console: Console | None = None,
39 |         debug_enabled: bool = False,
40 |         quiet_mode: bool = False,
   |         ^^^^^^^^^^ FBT002
41 |         username: str | None = None,
42 |     ):
   |

src/repo_organizer/utils/logger.py:82:9: C901 `log` is too complex (17 > 10)
   |
80 |         self.log(f"Username set to {username}", level="debug")
81 |
82 |     def log(
   |         ^^^ C901
83 |         self, message: str, level: str = "info", username: str | None = None,
84 |     ) -> None:
   |

src/repo_organizer/utils/logger.py:82:9: PLR0912 Too many branches (16 > 12)
   |
80 |         self.log(f"Username set to {username}", level="debug")
81 |
82 |     def log(
   |         ^^^ PLR0912
83 |         self, message: str, level: str = "info", username: str | None = None,
84 |     ) -> None:
   |

src/repo_organizer/utils/logger.py:107:13: SIM105 Use `contextlib.suppress(IndexError, ValueError)` instead of `try`-`except`-`pass`
    |
105 |           if level == "debug" and "Rate limit: Waiting" in message:
106 |               wait_time = 0.0
107 | /             try:
108 | |                 # Extract wait time from message
109 | |                 wait_time = float(message.split("Waiting ")[1].split("s")[0])
110 | |             except (IndexError, ValueError):
111 | |                 pass
    | |____________________^ SIM105
112 |
113 |               # Only print rate limit messages that exceed threshold
    |
    = help: Replace with `contextlib.suppress(IndexError, ValueError)`

src/repo_organizer/utils/logger.py:114:28: PLR2004 Magic value used in comparison, consider replacing `2.0` with a constant variable
    |
113 |             # Only print rate limit messages that exceed threshold
114 |             if wait_time < 2.0:
    |                            ^^^ PLR2004
115 |                 should_print_to_console = False
    |

src/repo_organizer/utils/logger.py:117:21: DTZ005 `datetime.datetime.now()` called without a `tz` argument
    |
115 |                 should_print_to_console = False
116 |
117 |         timestamp = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    |                     ^^^^^^^^^^^^^^^^^^^^^^^ DTZ005
118 |
119 |         # Add color based on level
    |
    = help: Pass a `datetime.timezone` object to the `tz` parameter

src/repo_organizer/utils/logger.py:156:89: E501 Line too long (94 > 88)
    |
154 |             pass
155 |
156 |         # Ensure synchronization for console output to prevent interleaving with progress bars
    |                                                                                         ^^^^^^ E501
157 |         if should_print_to_console:
158 |             with self._console_lock:
    |

src/repo_organizer/utils/logger.py:159:89: E501 Line too long (91 > 88)
    |
157 |         if should_print_to_console:
158 |             with self._console_lock:
159 |                 # Add a newline before log message to separate from progress bar if present
    |                                                                                         ^^^ E501
160 |                 self.console.print(formatted_log_message)
161 |                 # Ensure a newline is printed after to avoid interference with progress bars
    |

src/repo_organizer/utils/logger.py:161:89: E501 Line too long (92 > 88)
    |
159 |                 # Add a newline before log message to separate from progress bar if present
160 |                 self.console.print(formatted_log_message)
161 |                 # Ensure a newline is printed after to avoid interference with progress bars
    |                                                                                         ^^^^ E501
162 |                 if not formatted_log_message.endswith("\n"):
163 |                     self.console.print("", end="\n")
    |

src/repo_organizer/utils/logger.py:170:9: SIM117 Use a single `with` statement with multiple contexts instead of nested `with` statements
    |
169 |           # Ensure only one thread writes to the log file at a time.
170 | /         with self._file_lock:
171 | |             with open(self.log_file, "a") as logf:
    | |__________________________________________________^ SIM117
172 |                   logf.write(plain_message + "\n")
    |
    = help: Combine `with` statements

src/repo_organizer/utils/logger.py:171:18: PTH123 `open()` should be replaced by `Path.open()`
    |
169 |         # Ensure only one thread writes to the log file at a time.
170 |         with self._file_lock:
171 |             with open(self.log_file, "a") as logf:
    |                  ^^^^ PTH123
172 |                 logf.write(plain_message + "\n")
    |

src/repo_organizer/utils/logger.py:174:45: ANN401 Dynamically typed expressions (typing.Any) are disallowed in `value`
    |
172 |                 logf.write(plain_message + "\n")
173 |
174 |     def update_stats(self, key: str, value: Any = 1, increment: bool = True) -> None:
    |                                             ^^^ ANN401
175 |         """Update statistics.
    |

src/repo_organizer/utils/logger.py:174:54: FBT001 Boolean-typed positional argument in function definition
    |
172 |                 logf.write(plain_message + "\n")
173 |
174 |     def update_stats(self, key: str, value: Any = 1, increment: bool = True) -> None:
    |                                                      ^^^^^^^^^ FBT001
175 |         """Update statistics.
    |

src/repo_organizer/utils/logger.py:174:54: FBT002 Boolean default positional argument in function definition
    |
172 |                 logf.write(plain_message + "\n")
173 |
174 |     def update_stats(self, key: str, value: Any = 1, increment: bool = True) -> None:
    |                                                      ^^^^^^^^^ FBT002
175 |         """Update statistics.
    |

src/repo_organizer/utils/rate_limiter.py:1:1: D200 One-line docstring should fit on one line
  |
1 | / """Rate limiter for API calls to respect service limits.
2 | | """
  | |___^ D200
3 |
4 |   import time
  |
  = help: Reformat to one line

src/repo_organizer/utils/rate_limiter.py:14:9: ANN204 Missing return type annotation for special method `__init__`
   |
12 |     """Rate limiter for API calls to respect service limits."""
13 |
14 |     def __init__(
   |         ^^^^^^^^ ANN204
15 |         self,
16 |         calls_per_minute: int = 60,
   |
   = help: Add return type annotation: `None`

src/repo_organizer/utils/rate_limiter.py:19:9: FBT001 Boolean-typed positional argument in function definition
   |
17 |         name: str = "API",
18 |         max_wait_time: float | None = None,
19 |         fail_on_limit: bool = False,
   |         ^^^^^^^^^^^^^ FBT001
20 |     ):
21 |         """Initialize rate limiter.
   |

src/repo_organizer/utils/rate_limiter.py:19:9: FBT002 Boolean default positional argument in function definition
   |
17 |         name: str = "API",
18 |         max_wait_time: float | None = None,
19 |         fail_on_limit: bool = False,
   |         ^^^^^^^^^^^^^ FBT002
20 |     ):
21 |         """Initialize rate limiter.
   |

src/repo_organizer/utils/rate_limiter.py:27:89: E501 Line too long (93 > 88)
   |
25 |             name: Name of the API being rate limited (for logging)
26 |             max_wait_time: Maximum time to wait in seconds (None for unlimited)
27 |             fail_on_limit: If True, raise an exception instead of waiting when limit exceeded
   |                                                                                         ^^^^^ E501
28 |         """
29 |         self.calls_per_minute = calls_per_minute
   |

src/repo_organizer/utils/rate_limiter.py:41:9: ANN201 Missing return type annotation for public function `wait`
   |
39 |         self.rate_limit_exceptions = 0
40 |
41 |     def wait(self, logger=None, debug=False):
   |         ^^^^ ANN201
42 |         """Wait until next call is allowed according to rate limits.
   |
   = help: Add return type annotation

src/repo_organizer/utils/rate_limiter.py:41:20: ANN001 Missing type annotation for function argument `logger`
   |
39 |         self.rate_limit_exceptions = 0
40 |
41 |     def wait(self, logger=None, debug=False):
   |                    ^^^^^^ ANN001
42 |         """Wait until next call is allowed according to rate limits.
   |

src/repo_organizer/utils/rate_limiter.py:41:33: FBT002 Boolean default positional argument in function definition
   |
39 |         self.rate_limit_exceptions = 0
40 |
41 |     def wait(self, logger=None, debug=False):
   |                                 ^^^^^ FBT002
42 |         """Wait until next call is allowed according to rate limits.
   |

src/repo_organizer/utils/rate_limiter.py:41:33: ANN001 Missing type annotation for function argument `debug`
   |
39 |         self.rate_limit_exceptions = 0
40 |
41 |     def wait(self, logger=None, debug=False):
   |                                 ^^^^^ ANN001
42 |         """Wait until next call is allowed according to rate limits.
   |

src/repo_organizer/utils/rate_limiter.py:52:89: E501 Line too long (96 > 88)
   |
51 |         Raises:
52 |             RateLimitExceededError: If fail_on_limit is True and wait time exceeds max_wait_time
   |                                                                                         ^^^^^^^^ E501
53 |         """
54 |         with self.lock:
   |

src/repo_organizer/utils/rate_limiter.py:67:89: E501 Line too long (109 > 88)
   |
65 |                         self.rate_limit_exceptions += 1
66 |                         error_msg = (
67 |                             f"Rate limit exceeded for {self.name} API: would need to wait {wait_time:.2f}s, "
   |                                                                                         ^^^^^^^^^^^^^^^^^^^^^ E501
68 |                             f"max allowed is {self.max_wait_time:.2f}s"
69 |                         )
   |

src/repo_organizer/utils/rate_limiter.py:77:89: E501 Line too long (101 > 88)
   |
75 |                     if logger:
76 |                         logger.log(
77 |                             f"Rate limit: Capping wait time to {wait_time:.2f}s for {self.name} API",
   |                                                                                         ^^^^^^^^^^^^^ E501
78 |                             level="warning" if debug else "info",
79 |                         )
   |

tests/application/test_single_repo_mode.py:1:1: INP001 File `tests/application/test_single_repo_mode.py` is part of an implicit namespace package. Add an `__init__.py`.
tests/application/test_single_repo_mode.py:1:1: D200 One-line docstring should fit on one line
  |
1 | / """Test the single repository limitation mode functionality.
2 | | """
  | |___^ D200
3 |
4 |   from unittest.mock import MagicMock
  |
  = help: Reformat to one line

tests/application/test_single_repo_mode.py:13:5: ANN201 Missing return type annotation for public function `mock_source_control`
   |
12 | @pytest.fixture
13 | def mock_source_control():
   |     ^^^^^^^^^^^^^^^^^^^ ANN201
14 |     """Create a mock source control adapter."""
15 |     mock = MagicMock()
   |
   = help: Add return type annotation

tests/application/test_single_repo_mode.py:61:5: ANN201 Missing return type annotation for public function `mock_analyzer`
   |
60 | @pytest.fixture
61 | def mock_analyzer():
   |     ^^^^^^^^^^^^^ ANN201
62 |     """Create a mock analyzer."""
63 |     mock = MagicMock()
   |
   = help: Add return type annotation

tests/application/test_single_repo_mode.py:66:9: ANN202 Missing return type annotation for private function `mock_analyze`
   |
65 |     # Configure the mock to return a sample analysis
66 |     def mock_analyze(repo_data):
   |         ^^^^^^^^^^^^ ANN202
67 |         from repo_organizer.domain.analysis.models import RepoAnalysis
   |
   = help: Add return type annotation

tests/application/test_single_repo_mode.py:66:22: ANN001 Missing type annotation for function argument `repo_data`
   |
65 |     # Configure the mock to return a sample analysis
66 |     def mock_analyze(repo_data):
   |                      ^^^^^^^^^ ANN001
67 |         from repo_organizer.domain.analysis.models import RepoAnalysis
   |

tests/application/test_single_repo_mode.py:85:5: ANN201 Missing return type annotation for public function `test_analyze_repositories_normal_mode`
   |
85 | def test_analyze_repositories_normal_mode(mock_source_control, mock_analyzer):
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ANN201
86 |     """Test analyze_repositories without single repository mode."""
87 |     # Call the function without specifying a single repository
   |
   = help: Add return type annotation: `None`

tests/application/test_single_repo_mode.py:85:43: ANN001 Missing type annotation for function argument `mock_source_control`
   |
85 | def test_analyze_repositories_normal_mode(mock_source_control, mock_analyzer):
   |                                           ^^^^^^^^^^^^^^^^^^^ ANN001
86 |     """Test analyze_repositories without single repository mode."""
87 |     # Call the function without specifying a single repository
   |

tests/application/test_single_repo_mode.py:85:64: ANN001 Missing type annotation for function argument `mock_analyzer`
   |
85 | def test_analyze_repositories_normal_mode(mock_source_control, mock_analyzer):
   |                                                                ^^^^^^^^^^^^^ ANN001
86 |     """Test analyze_repositories without single repository mode."""
87 |     # Call the function without specifying a single repository
   |

tests/application/test_single_repo_mode.py:100:5: ANN201 Missing return type annotation for public function `test_analyze_repositories_single_repo_mode`
    |
100 | def test_analyze_repositories_single_repo_mode(mock_source_control, mock_analyzer):
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ANN201
101 |     """Test analyze_repositories with single repository mode."""
102 |     # Call the function with a single repository specified
    |
    = help: Add return type annotation: `None`

tests/application/test_single_repo_mode.py:100:48: ANN001 Missing type annotation for function argument `mock_source_control`
    |
100 | def test_analyze_repositories_single_repo_mode(mock_source_control, mock_analyzer):
    |                                                ^^^^^^^^^^^^^^^^^^^ ANN001
101 |     """Test analyze_repositories with single repository mode."""
102 |     # Call the function with a single repository specified
    |

tests/application/test_single_repo_mode.py:100:69: ANN001 Missing type annotation for function argument `mock_analyzer`
    |
100 | def test_analyze_repositories_single_repo_mode(mock_source_control, mock_analyzer):
    |                                                                     ^^^^^^^^^^^^^ ANN001
101 |     """Test analyze_repositories with single repository mode."""
102 |     # Call the function with a single repository specified
    |

tests/application/test_single_repo_mode.py:117:5: ANN201 Missing return type annotation for public function `test_analyze_repositories_single_repo_not_found`
    |
117 | def test_analyze_repositories_single_repo_not_found(mock_source_control, mock_analyzer):
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ANN201
118 |     """Test analyze_repositories with a non-existent repository."""
119 |     # Call the function with a non-existent repository
    |
    = help: Add return type annotation: `None`

tests/application/test_single_repo_mode.py:117:53: ANN001 Missing type annotation for function argument `mock_source_control`
    |
117 | def test_analyze_repositories_single_repo_not_found(mock_source_control, mock_analyzer):
    |                                                     ^^^^^^^^^^^^^^^^^^^ ANN001
118 |     """Test analyze_repositories with a non-existent repository."""
119 |     # Call the function with a non-existent repository
    |

tests/application/test_single_repo_mode.py:117:74: ANN001 Missing type annotation for function argument `mock_analyzer`
    |
117 | def test_analyze_repositories_single_repo_not_found(mock_source_control, mock_analyzer):
    |                                                                          ^^^^^^^^^^^^^ ANN001
118 |     """Test analyze_repositories with a non-existent repository."""
119 |     # Call the function with a non-existent repository
    |

tests/cli/__init__.py:1:1: D200 One-line docstring should fit on one line
  |
1 | / """Tests for the CLI package.
2 | | """
  | |___^ D200
  |
  = help: Reformat to one line

tests/cli/test_auth_middleware.py:24:1: ERA001 Found commented-out code
   |
23 | # We'll mock this for testing
24 | # from repo_organizer.infrastructure.logging.auth_logger import AuthLogger
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
   |
   = help: Remove commented-out code

tests/cli/test_auth_middleware.py:28:5: ANN201 Missing return type annotation for public function `mock_console`
   |
27 | @pytest.fixture
28 | def mock_console():
   |     ^^^^^^^^^^^^ ANN201
29 |     """Provide a mock console for testing."""
30 |     with patch("repo_organizer.cli.auth_middleware.console") as mock:
   |
   = help: Add return type annotation

tests/cli/test_auth_middleware.py:35:5: ANN201 Missing return type annotation for public function `mock_auth_logger`
   |
34 | @pytest.fixture
35 | def mock_auth_logger():
   |     ^^^^^^^^^^^^^^^^ ANN201
36 |     """Provide a mock authentication logger."""
37 |     mock_logger = MagicMock()
   |
   = help: Add return type annotation

tests/cli/test_auth_middleware.py:44:5: ANN201 Missing return type annotation for public function `test_auth_config`
   |
43 | @pytest.fixture
44 | def test_auth_config():
   |     ^^^^^^^^^^^^^^^^ ANN201
45 |     """Provide a test authentication configuration."""
46 |     config = AuthConfig()
   |
   = help: Add return type annotation

tests/cli/test_auth_middleware.py:66:9: ANN201 Missing return type annotation for public function `test_authenticate_command_success`
   |
64 |     """Tests for the authentication middleware."""
65 |
66 |     def test_authenticate_command_success(self, test_auth_config):
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ANN201
67 |         """Test successful authentication with the decorator."""
68 |         # Create a mock function
   |
   = help: Add return type annotation: `None`

tests/cli/test_auth_middleware.py:66:49: ANN001 Missing type annotation for function argument `test_auth_config`
   |
64 |     """Tests for the authentication middleware."""
65 |
66 |     def test_authenticate_command_success(self, test_auth_config):
   |                                                 ^^^^^^^^^^^^^^^^ ANN001
67 |         """Test successful authentication with the decorator."""
68 |         # Create a mock function
   |

tests/cli/test_auth_middleware.py:84:9: ANN201 Missing return type annotation for public function `test_authenticate_command_with_logging_success`
   |
82 |         assert result == "success"
83 |
84 |     def test_authenticate_command_with_logging_success(
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ANN201
85 |         self, test_auth_config, mock_auth_logger,
86 |     ):
   |
   = help: Add return type annotation: `None`

tests/cli/test_auth_middleware.py:85:15: ANN001 Missing type annotation for function argument `test_auth_config`
   |
84 |     def test_authenticate_command_with_logging_success(
85 |         self, test_auth_config, mock_auth_logger,
   |               ^^^^^^^^^^^^^^^^ ANN001
86 |     ):
87 |         """Test successful authentication with logging."""
   |

tests/cli/test_auth_middleware.py:85:33: ANN001 Missing type annotation for function argument `mock_auth_logger`
   |
84 |     def test_authenticate_command_with_logging_success(
85 |         self, test_auth_config, mock_auth_logger,
   |                                 ^^^^^^^^^^^^^^^^ ANN001
86 |     ):
87 |         """Test successful authentication with logging."""
   |

tests/cli/test_auth_middleware.py:112:9: ANN201 Missing return type annotation for public function `test_authenticate_command_failure`
    |
110 |         assert call_args["error_message"] is None
111 |
112 |     def test_authenticate_command_failure(self, test_auth_config, mock_console):
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ANN201
113 |         """Test failed authentication with the decorator."""
114 |         # Create a mock function
    |
    = help: Add return type annotation: `None`

tests/cli/test_auth_middleware.py:112:49: ANN001 Missing type annotation for function argument `test_auth_config`
    |
110 |         assert call_args["error_message"] is None
111 |
112 |     def test_authenticate_command_failure(self, test_auth_config, mock_console):
    |                                                 ^^^^^^^^^^^^^^^^ ANN001
113 |         """Test failed authentication with the decorator."""
114 |         # Create a mock function
    |

tests/cli/test_auth_middleware.py:112:67: ANN001 Missing type annotation for function argument `mock_console`
    |
110 |         assert call_args["error_message"] is None
111 |
112 |     def test_authenticate_command_failure(self, test_auth_config, mock_console):
    |                                                                   ^^^^^^^^^^^^ ANN001
113 |         """Test failed authentication with the decorator."""
114 |         # Create a mock function
    |

tests/cli/test_auth_middleware.py:136:9: ANN201 Missing return type annotation for public function `test_authenticate_command_with_logging_failure`
    |
134 |         mock_console.print.assert_called()
135 |
136 |     def test_authenticate_command_with_logging_failure(
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ANN201
137 |         self, test_auth_config, mock_console, mock_auth_logger,
138 |     ):
    |
    = help: Add return type annotation: `None`

tests/cli/test_auth_middleware.py:137:15: ANN001 Missing type annotation for function argument `test_auth_config`
    |
136 |     def test_authenticate_command_with_logging_failure(
137 |         self, test_auth_config, mock_console, mock_auth_logger,
    |               ^^^^^^^^^^^^^^^^ ANN001
138 |     ):
139 |         """Test failed authentication with logging."""
    |

tests/cli/test_auth_middleware.py:137:15: ARG002 Unused method argument: `test_auth_config`
    |
136 |     def test_authenticate_command_with_logging_failure(
137 |         self, test_auth_config, mock_console, mock_auth_logger,
    |               ^^^^^^^^^^^^^^^^ ARG002
138 |     ):
139 |         """Test failed authentication with logging."""
    |

tests/cli/test_auth_middleware.py:137:33: ANN001 Missing type annotation for function argument `mock_console`
    |
136 |     def test_authenticate_command_with_logging_failure(
137 |         self, test_auth_config, mock_console, mock_auth_logger,
    |                                 ^^^^^^^^^^^^ ANN001
138 |     ):
139 |         """Test failed authentication with logging."""
    |

tests/cli/test_auth_middleware.py:137:33: ARG002 Unused method argument: `mock_console`
    |
136 |     def test_authenticate_command_with_logging_failure(
137 |         self, test_auth_config, mock_console, mock_auth_logger,
    |                                 ^^^^^^^^^^^^ ARG002
138 |     ):
139 |         """Test failed authentication with logging."""
    |

tests/cli/test_auth_middleware.py:137:47: ANN001 Missing type annotation for function argument `mock_auth_logger`
    |
136 |     def test_authenticate_command_with_logging_failure(
137 |         self, test_auth_config, mock_console, mock_auth_logger,
    |                                               ^^^^^^^^^^^^^^^^ ANN001
138 |     ):
139 |         """Test failed authentication with logging."""
    |

tests/cli/test_auth_middleware.py:150:89: E501 Line too long (89 > 88)
    |
148 |         # Apply decorator with test config and mocks
149 |         decorated = authenticate_command(
150 |             "test_command", auth_service=mock_auth_service, auth_logger=mock_auth_logger,
    |                                                                                         ^ E501
151 |         )(mock_func)
    |

tests/cli/test_auth_middleware.py:171:9: ANN201 Missing return type annotation for public function `test_authenticate_command_not_required`
    |
169 |         assert call_args["error_message"] == "Username required"
170 |
171 |     def test_authenticate_command_not_required(self, test_auth_config):
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ANN201
172 |         """Test command that doesn't require authentication."""
173 |         # Create a mock function
    |
    = help: Add return type annotation: `None`

tests/cli/test_auth_middleware.py:171:54: ANN001 Missing type annotation for function argument `test_auth_config`
    |
169 |         assert call_args["error_message"] == "Username required"
170 |
171 |     def test_authenticate_command_not_required(self, test_auth_config):
    |                                                      ^^^^^^^^^^^^^^^^ ANN001
172 |         """Test command that doesn't require authentication."""
173 |         # Create a mock function
    |

tests/cli/test_auth_middleware.py:189:9: ANN201 Missing return type annotation for public function `test_validate_command_auth_success`
    |
187 |         assert result == "success"
188 |
189 |     def test_validate_command_auth_success(self, test_auth_config):
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ANN201
190 |         """Test validate_command_auth with valid credentials."""
191 |         with patch(
    |
    = help: Add return type annotation: `None`

tests/cli/test_auth_middleware.py:189:50: ANN001 Missing type annotation for function argument `test_auth_config`
    |
187 |         assert result == "success"
188 |
189 |     def test_validate_command_auth_success(self, test_auth_config):
    |                                                  ^^^^^^^^^^^^^^^^ ANN001
190 |         """Test validate_command_auth with valid credentials."""
191 |         with patch(
    |

tests/cli/test_auth_middleware.py:189:50: ARG002 Unused method argument: `test_auth_config`
    |
187 |         assert result == "success"
188 |
189 |     def test_validate_command_auth_success(self, test_auth_config):
    |                                                  ^^^^^^^^^^^^^^^^ ARG002
190 |         """Test validate_command_auth with valid credentials."""
191 |         with patch(
    |

tests/cli/test_auth_middleware.py:212:9: ANN201 Missing return type annotation for public function `test_validate_command_auth_failure`
    |
210 |             )
211 |
212 |     def test_validate_command_auth_failure(self, test_auth_config, mock_console):
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ANN201
213 |         """Test validate_command_auth with invalid credentials."""
214 |         with patch(
    |
    = help: Add return type annotation: `None`

tests/cli/test_auth_middleware.py:212:50: ANN001 Missing type annotation for function argument `test_auth_config`
    |
210 |             )
211 |
212 |     def test_validate_command_auth_failure(self, test_auth_config, mock_console):
    |                                                  ^^^^^^^^^^^^^^^^ ANN001
213 |         """Test validate_command_auth with invalid credentials."""
214 |         with patch(
    |

tests/cli/test_auth_middleware.py:212:50: ARG002 Unused method argument: `test_auth_config`
    |
210 |             )
211 |
212 |     def test_validate_command_auth_failure(self, test_auth_config, mock_console):
    |                                                  ^^^^^^^^^^^^^^^^ ARG002
213 |         """Test validate_command_auth with invalid credentials."""
214 |         with patch(
    |

tests/cli/test_auth_middleware.py:212:68: ANN001 Missing type annotation for function argument `mock_console`
    |
210 |             )
211 |
212 |     def test_validate_command_auth_failure(self, test_auth_config, mock_console):
    |                                                                    ^^^^^^^^^^^^ ANN001
213 |         """Test validate_command_auth with invalid credentials."""
214 |         with patch(
    |

tests/cli/test_auth_middleware.py:253:9: ANN201 Missing return type annotation for public function `test_with_auth_option`
    |
251 |             mock_console.print.assert_called()
252 |
253 |     def test_with_auth_option(self):
    |         ^^^^^^^^^^^^^^^^^^^^^ ANN201
254 |         """Test with_auth_option adds username option to commands."""
255 |         # Create a mock Typer app
    |
    = help: Add return type annotation: `None`

tests/cli/test_auth_middleware.py:269:13: ANN202 Missing return type annotation for private function `test_cmd`
    |
267 |         # Create a test command
268 |         @app.command()
269 |         def test_cmd():
    |             ^^^^^^^^ ANN202
270 |             pass
    |
    = help: Add return type annotation: `None`

tests/cli/test_auth_middleware.py:276:9: ANN201 Missing return type annotation for public function `test_auth_logger_integration`
    |
274 |         # The presence of the username option is indirectly verified by other tests
275 |
276 |     def test_auth_logger_integration(self):
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ANN201
277 |         """Test the authentication logging integration."""
278 |         # Create a mock AuthLogger
    |
    = help: Add return type annotation: `None`

tests/cli/test_auth_middleware.py:292:13: ANN202 Missing return type annotation for private function `test_func`
    |
290 |             auth_logger=mock_auth_logger,
291 |         )
292 |         def test_func(username: str = "default_user"):
    |             ^^^^^^^^^ ANN202
293 |             return f"Success with {username}"
    |
    = help: Add return type annotation: `str`

tests/cli/test_commands.py:1:1: D200 One-line docstring should fit on one line
  |
1 | / """Tests for CLI commands to ensure integration with authentication.
2 | | """
  | |___^ D200
3 |
4 |   from unittest.mock import Mock, patch
  |
  = help: Reformat to one line

tests/cli/test_commands.py:12:5: ANN201 Missing return type annotation for public function `mock_settings`
   |
11 | @pytest.fixture
12 | def mock_settings():
   |     ^^^^^^^^^^^^^ ANN201
13 |     """Provide mock settings."""
14 |     with patch("repo_organizer.cli.commands.load_settings") as mock:
   |
   = help: Add return type annotation

tests/cli/test_commands.py:16:31: S108 Probable insecure usage of temporary file or directory: "/tmp/test_output"
   |
14 |     with patch("repo_organizer.cli.commands.load_settings") as mock:
15 |         settings = Mock()
16 |         settings.output_dir = "/tmp/test_output"
   |                               ^^^^^^^^^^^^^^^^^^ S108
17 |         settings.logs_dir = "/tmp/test_logs"  # Add logs_dir
18 |         settings.github_token = "dummy_token"
   |

tests/cli/test_commands.py:17:29: S108 Probable insecure usage of temporary file or directory: "/tmp/test_logs"
   |
15 |         settings = Mock()
16 |         settings.output_dir = "/tmp/test_output"
17 |         settings.logs_dir = "/tmp/test_logs"  # Add logs_dir
   |                             ^^^^^^^^^^^^^^^^ S108
18 |         settings.github_token = "dummy_token"
19 |         settings.github_rate_limit = 60
   |

tests/cli/test_commands.py:18:33: S105 Possible hardcoded password assigned to: "github_token"
   |
16 |         settings.output_dir = "/tmp/test_output"
17 |         settings.logs_dir = "/tmp/test_logs"  # Add logs_dir
18 |         settings.github_token = "dummy_token"
   |                                 ^^^^^^^^^^^^^ S105
19 |         settings.github_rate_limit = 60
20 |         mock.return_value = settings
   |

tests/cli/test_commands.py:25:5: ANN201 Missing return type annotation for public function `mock_load_analyses`
   |
24 | @pytest.fixture
25 | def mock_load_analyses():
   |     ^^^^^^^^^^^^^^^^^^ ANN201
26 |     """Mock the _load_analyses function."""
27 |     with patch("repo_organizer.cli.commands._load_analyses") as mock:
   |
   = help: Add return type annotation

tests/cli/test_commands.py:33:5: ANN201 Missing return type annotation for public function `mock_analysis_service`
   |
32 | @pytest.fixture
33 | def mock_analysis_service():
   |     ^^^^^^^^^^^^^^^^^^^^^ ANN201
34 |     """Mock the AnalysisService."""
35 |     with patch("repo_organizer.cli.commands.AnalysisService") as mock:
   |
   = help: Add return type annotation

tests/cli/test_commands.py:44:9: ANN201 Missing return type annotation for public function `test_execute_actions_with_username`
   |
43 |     @patch("repo_organizer.utils.logger.Logger.log")
44 |     def test_execute_actions_with_username(
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ANN201
45 |         self, mock_log_method, mock_settings, mock_load_analyses, mock_analysis_service,
46 |     ):
   |
   = help: Add return type annotation: `None`

tests/cli/test_commands.py:45:15: ANN001 Missing type annotation for function argument `mock_log_method`
   |
43 |     @patch("repo_organizer.utils.logger.Logger.log")
44 |     def test_execute_actions_with_username(
45 |         self, mock_log_method, mock_settings, mock_load_analyses, mock_analysis_service,
   |               ^^^^^^^^^^^^^^^ ANN001
46 |     ):
47 |         """Test execute_actions accepts and uses username parameter."""
   |

tests/cli/test_commands.py:45:15: ARG002 Unused method argument: `mock_log_method`
   |
43 |     @patch("repo_organizer.utils.logger.Logger.log")
44 |     def test_execute_actions_with_username(
45 |         self, mock_log_method, mock_settings, mock_load_analyses, mock_analysis_service,
   |               ^^^^^^^^^^^^^^^ ARG002
46 |     ):
47 |         """Test execute_actions accepts and uses username parameter."""
   |

tests/cli/test_commands.py:45:32: ANN001 Missing type annotation for function argument `mock_settings`
   |
43 |     @patch("repo_organizer.utils.logger.Logger.log")
44 |     def test_execute_actions_with_username(
45 |         self, mock_log_method, mock_settings, mock_load_analyses, mock_analysis_service,
   |                                ^^^^^^^^^^^^^ ANN001
46 |     ):
47 |         """Test execute_actions accepts and uses username parameter."""
   |

tests/cli/test_commands.py:45:47: ANN001 Missing type annotation for function argument `mock_load_analyses`
   |
43 |     @patch("repo_organizer.utils.logger.Logger.log")
44 |     def test_execute_actions_with_username(
45 |         self, mock_log_method, mock_settings, mock_load_analyses, mock_analysis_service,
   |                                               ^^^^^^^^^^^^^^^^^^ ANN001
46 |     ):
47 |         """Test execute_actions accepts and uses username parameter."""
   |

tests/cli/test_commands.py:45:67: ANN001 Missing type annotation for function argument `mock_analysis_service`
   |
43 |     @patch("repo_organizer.utils.logger.Logger.log")
44 |     def test_execute_actions_with_username(
45 |         self, mock_log_method, mock_settings, mock_load_analyses, mock_analysis_service,
   |                                                                   ^^^^^^^^^^^^^^^^^^^^^ ANN001
46 |     ):
47 |         """Test execute_actions accepts and uses username parameter."""
   |

tests/cli/test_commands.py:55:89: E501 Line too long (109 > 88)
   |
53 |             mock_logger_class.return_value = mock_logger
54 |
55 |             # Call execute_actions with a username - it will raise typer.Exit since there are no repositories
   |                                                                                         ^^^^^^^^^^^^^^^^^^^^^ E501
56 |             try:
57 |                 execute_actions(
   |

tests/cli/test_commands.py:56:13: SIM105 Use `contextlib.suppress(typer.Exit)` instead of `try`-`except`-`pass`
   |
55 |               # Call execute_actions with a username - it will raise typer.Exit since there are no repositories
56 | /             try:
57 | |                 execute_actions(
58 | |                     dry_run=True,
59 | |                     force=False,
60 | |                     output_dir="/tmp/test_output",
61 | |                     github_token="test_token",
62 | |                     action_type="ARCHIVE",
63 | |                     username="test-user",
64 | |                 )
65 | |             except typer.Exit:
66 | |                 # Expected exit due to no repositories found for the action
67 | |                 pass
   | |____________________^ SIM105
68 |
69 |           # Verify that load_settings was called
   |
   = help: Replace with `contextlib.suppress(typer.Exit)`

tests/cli/test_commands.py:60:32: S108 Probable insecure usage of temporary file or directory: "/tmp/test_output"
   |
58 |                     dry_run=True,
59 |                     force=False,
60 |                     output_dir="/tmp/test_output",
   |                                ^^^^^^^^^^^^^^^^^^ S108
61 |                     github_token="test_token",
62 |                     action_type="ARCHIVE",
   |

tests/cli/test_commands.py:61:21: S106 Possible hardcoded password assigned to argument: "github_token"
   |
59 |                     force=False,
60 |                     output_dir="/tmp/test_output",
61 |                     github_token="test_token",
   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^ S106
62 |                     action_type="ARCHIVE",
63 |                     username="test-user",
   |

tests/cli/test_execute_actions.py:1:1: D200 One-line docstring should fit on one line
  |
1 | / """Simple test for execute_actions parameter checking.
2 | | """
  | |___^ D200
  |
  = help: Reformat to one line

tests/cli/test_execute_actions.py:6:5: ANN201 Missing return type annotation for public function `test_execute_actions_signature`
  |
6 | def test_execute_actions_signature():
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ANN201
7 |     """Test that the execute_actions function accepts a username parameter.
  |
  = help: Add return type annotation: `None`

tests/debug_langchain_claude_adapter.py:1:89: E501 Line too long (93 > 88)
  |
1 | """Debug script to trace the issue with LangChain Claude Adapter not passing repository data.
  |                                                                                         ^^^^^ E501
2 |
3 | This script isolates the issue by tracking data flow through the adapter pipeline.
  |

tests/debug_langchain_claude_adapter.py:15:1: E402 Module level import not at top of file
   |
13 |   sys.path.insert(0, str(project_root))
14 |
15 | / from repo_organizer.infrastructure.analysis.langchain_claude_adapter import (
16 | |     LangChainClaudeAdapter,
17 | | )
   | |_^ E402
18 |   from repo_organizer.utils.logger import Logger
   |

tests/debug_langchain_claude_adapter.py:18:1: E402 Module level import not at top of file
   |
16 |     LangChainClaudeAdapter,
17 | )
18 | from repo_organizer.utils.logger import Logger
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E402
   |

tests/debug_langchain_claude_adapter.py:24:9: ANN204 Missing return type annotation for special method `__init__`
   |
22 |     """Enhanced logger for debugging that always outputs debug messages."""
23 |
24 |     def __init__(self):
   |         ^^^^^^^^ ANN204
25 |         self.debug_enabled = True
26 |         self.logs = []
   |
   = help: Add return type annotation: `None`

tests/debug_langchain_claude_adapter.py:24:9: D107 Missing docstring in `__init__`
   |
22 |     """Enhanced logger for debugging that always outputs debug messages."""
23 |
24 |     def __init__(self):
   |         ^^^^^^^^ D107
25 |         self.debug_enabled = True
26 |         self.logs = []
   |

tests/debug_langchain_claude_adapter.py:28:9: ANN201 Missing return type annotation for public function `log`
   |
26 |         self.logs = []
27 |
28 |     def log(self, message, level="info"):
   |         ^^^ ANN201
29 |         """Log a message with specified level."""
30 |         formatted = f"[{level.upper()}] {message}"
   |
   = help: Add return type annotation: `None`

tests/debug_langchain_claude_adapter.py:28:19: ANN001 Missing type annotation for function argument `message`
   |
26 |         self.logs = []
27 |
28 |     def log(self, message, level="info"):
   |                   ^^^^^^^ ANN001
29 |         """Log a message with specified level."""
30 |         formatted = f"[{level.upper()}] {message}"
   |

tests/debug_langchain_claude_adapter.py:28:28: ANN001 Missing type annotation for function argument `level`
   |
26 |         self.logs = []
27 |
28 |     def log(self, message, level="info"):
   |                            ^^^^^ ANN001
29 |         """Log a message with specified level."""
30 |         formatted = f"[{level.upper()}] {message}"
   |

tests/debug_langchain_claude_adapter.py:31:9: T201 `print` found
   |
29 |         """Log a message with specified level."""
30 |         formatted = f"[{level.upper()}] {message}"
31 |         print(formatted)
   |         ^^^^^ T201
32 |         self.logs.append((level, message))
   |
   = help: Remove `print`

tests/debug_langchain_claude_adapter.py:35:5: ANN201 Missing return type annotation for public function `main`
   |
35 | def main():
   |     ^^^^ ANN201
36 |     """Run the debug script to trace where repository data is lost."""
37 |     # Load test data
   |
   = help: Add return type annotation: `None`

tests/debug_langchain_claude_adapter.py:39:10: PTH123 `open()` should be replaced by `Path.open()`
   |
37 |     # Load test data
38 |     fixtures_path = Path(__file__).parent / "fixtures"
39 |     with open(fixtures_path / "sample_repo_data.json") as f:
   |          ^^^^ PTH123
40 |         sample_repo_data = json.load(f)
   |

tests/debug_langchain_claude_adapter.py:48:9: T201 `print` found
   |
46 |     api_key = os.environ.get("ANTHROPIC_API_KEY")
47 |     if not api_key:
48 |         print("ERROR: ANTHROPIC_API_KEY environment variable not set")
   |         ^^^^^ T201
49 |         return
   |
   = help: Remove `print`

tests/debug_langchain_claude_adapter.py:51:5: T201 `print` found
   |
49 |         return
50 |
51 |     print("\n=== Testing LangChain Claude Adapter ===\n")
   |     ^^^^^ T201
52 |
53 |     # Create the adapter with debug logging
   |
   = help: Remove `print`

tests/debug_langchain_claude_adapter.py:77:5: T201 `print` found
   |
75 |     )
76 |
77 |     print("\n=== Repository Data Before Analysis ===\n")
   |     ^^^^^ T201
78 |     for key, value in test_data.items():
79 |         print(f"{key}: {str(value)[:100]}{'...' if len(str(value)) > 100 else ''}")
   |
   = help: Remove `print`

tests/debug_langchain_claude_adapter.py:79:9: T201 `print` found
   |
77 |     print("\n=== Repository Data Before Analysis ===\n")
78 |     for key, value in test_data.items():
79 |         print(f"{key}: {str(value)[:100]}{'...' if len(str(value)) > 100 else ''}")
   |         ^^^^^ T201
80 |
81 |     print("\n=== Starting Analysis ===\n")
   |
   = help: Remove `print`

tests/debug_langchain_claude_adapter.py:81:5: T201 `print` found
   |
79 |         print(f"{key}: {str(value)[:100]}{'...' if len(str(value)) > 100 else ''}")
80 |
81 |     print("\n=== Starting Analysis ===\n")
   |     ^^^^^ T201
82 |
83 |     try:
   |
   = help: Remove `print`

tests/debug_langchain_claude_adapter.py:87:9: T201 `print` found
   |
85 |         result = adapter.analyze(test_data)
86 |
87 |         print("\n=== Analysis Result ===\n")
   |         ^^^^^ T201
88 |         print(f"Repository: {result.repo_name}")
89 |         print(f"Summary: {result.summary[:200]}...")
   |
   = help: Remove `print`

tests/debug_langchain_claude_adapter.py:88:9: T201 `print` found
   |
87 |         print("\n=== Analysis Result ===\n")
88 |         print(f"Repository: {result.repo_name}")
   |         ^^^^^ T201
89 |         print(f"Summary: {result.summary[:200]}...")
90 |         print(f"Strengths: {result.strengths}")
   |
   = help: Remove `print`

tests/debug_langchain_claude_adapter.py:89:9: T201 `print` found
   |
87 |         print("\n=== Analysis Result ===\n")
88 |         print(f"Repository: {result.repo_name}")
89 |         print(f"Summary: {result.summary[:200]}...")
   |         ^^^^^ T201
90 |         print(f"Strengths: {result.strengths}")
91 |         print(f"Weaknesses: {result.weaknesses}")
   |
   = help: Remove `print`

tests/debug_langchain_claude_adapter.py:90:9: T201 `print` found
   |
88 |         print(f"Repository: {result.repo_name}")
89 |         print(f"Summary: {result.summary[:200]}...")
90 |         print(f"Strengths: {result.strengths}")
   |         ^^^^^ T201
91 |         print(f"Weaknesses: {result.weaknesses}")
92 |         print(f"Recommendations: {len(result.recommendations)} items")
   |
   = help: Remove `print`

tests/debug_langchain_claude_adapter.py:91:9: T201 `print` found
   |
89 |         print(f"Summary: {result.summary[:200]}...")
90 |         print(f"Strengths: {result.strengths}")
91 |         print(f"Weaknesses: {result.weaknesses}")
   |         ^^^^^ T201
92 |         print(f"Recommendations: {len(result.recommendations)} items")
93 |         print(f"Activity: {result.activity_assessment}")
   |
   = help: Remove `print`

tests/debug_langchain_claude_adapter.py:92:9: T201 `print` found
   |
90 |         print(f"Strengths: {result.strengths}")
91 |         print(f"Weaknesses: {result.weaknesses}")
92 |         print(f"Recommendations: {len(result.recommendations)} items")
   |         ^^^^^ T201
93 |         print(f"Activity: {result.activity_assessment}")
94 |         print(f"Value: {result.estimated_value}")
   |
   = help: Remove `print`

tests/debug_langchain_claude_adapter.py:93:9: T201 `print` found
   |
91 |         print(f"Weaknesses: {result.weaknesses}")
92 |         print(f"Recommendations: {len(result.recommendations)} items")
93 |         print(f"Activity: {result.activity_assessment}")
   |         ^^^^^ T201
94 |         print(f"Value: {result.estimated_value}")
95 |         print(f"Tags: {result.tags}")
   |
   = help: Remove `print`

tests/debug_langchain_claude_adapter.py:94:9: T201 `print` found
   |
92 |         print(f"Recommendations: {len(result.recommendations)} items")
93 |         print(f"Activity: {result.activity_assessment}")
94 |         print(f"Value: {result.estimated_value}")
   |         ^^^^^ T201
95 |         print(f"Tags: {result.tags}")
96 |         print(f"Recommended Action: {result.recommended_action}")
   |
   = help: Remove `print`

tests/debug_langchain_claude_adapter.py:95:9: T201 `print` found
   |
93 |         print(f"Activity: {result.activity_assessment}")
94 |         print(f"Value: {result.estimated_value}")
95 |         print(f"Tags: {result.tags}")
   |         ^^^^^ T201
96 |         print(f"Recommended Action: {result.recommended_action}")
   |
   = help: Remove `print`

tests/debug_langchain_claude_adapter.py:96:9: T201 `print` found
   |
94 |         print(f"Value: {result.estimated_value}")
95 |         print(f"Tags: {result.tags}")
96 |         print(f"Recommended Action: {result.recommended_action}")
   |         ^^^^^ T201
97 |
98 |         # Print adapter metrics for insight
   |
   = help: Remove `print`

tests/debug_langchain_claude_adapter.py:99:9: T201 `print` found
    |
 98 |         # Print adapter metrics for insight
 99 |         print("\n=== Adapter Metrics ===\n")
    |         ^^^^^ T201
100 |         metrics = adapter.get_metrics()
101 |         for key, value in metrics.items():
    |
    = help: Remove `print`

tests/debug_langchain_claude_adapter.py:102:13: T201 `print` found
    |
100 |         metrics = adapter.get_metrics()
101 |         for key, value in metrics.items():
102 |             print(f"{key}: {value}")
    |             ^^^^^ T201
103 |
104 |     except Exception as e:
    |
    = help: Remove `print`

tests/debug_langchain_claude_adapter.py:104:12: BLE001 Do not catch blind exception: `Exception`
    |
102 |             print(f"{key}: {value}")
103 |
104 |     except Exception as e:
    |            ^^^^^^^^^ BLE001
105 |         print(f"\n=== ERROR: {e!s} ===\n")
106 |         import traceback
    |

tests/debug_langchain_claude_adapter.py:105:9: T201 `print` found
    |
104 |     except Exception as e:
105 |         print(f"\n=== ERROR: {e!s} ===\n")
    |         ^^^^^ T201
106 |         import traceback
    |
    = help: Remove `print`

tests/debug_langchain_claude_adapter.py:110:5: T201 `print` found
    |
108 |         traceback.print_exc()
109 |
110 |     print("\n=== Logger Messages Summary ===\n")
    |     ^^^^^ T201
111 |     print(f"Total log messages: {len(logger.logs)}")
112 |     warning_logs = [msg for level, msg in logger.logs if level == "warning"]
    |
    = help: Remove `print`

tests/debug_langchain_claude_adapter.py:111:5: T201 `print` found
    |
110 |     print("\n=== Logger Messages Summary ===\n")
111 |     print(f"Total log messages: {len(logger.logs)}")
    |     ^^^^^ T201
112 |     warning_logs = [msg for level, msg in logger.logs if level == "warning"]
113 |     error_logs = [msg for level, msg in logger.logs if level == "error"]
    |
    = help: Remove `print`

tests/debug_langchain_claude_adapter.py:116:9: T201 `print` found
    |
115 |     if warning_logs:
116 |         print(f"\nWarnings ({len(warning_logs)}):")
    |         ^^^^^ T201
117 |         for msg in warning_logs:
118 |             print(f"- {msg}")
    |
    = help: Remove `print`

tests/debug_langchain_claude_adapter.py:118:13: T201 `print` found
    |
116 |         print(f"\nWarnings ({len(warning_logs)}):")
117 |         for msg in warning_logs:
118 |             print(f"- {msg}")
    |             ^^^^^ T201
119 |
120 |     if error_logs:
    |
    = help: Remove `print`

tests/debug_langchain_claude_adapter.py:121:9: T201 `print` found
    |
120 |     if error_logs:
121 |         print(f"\nErrors ({len(error_logs)}):")
    |         ^^^^^ T201
122 |         for msg in error_logs:
123 |             print(f"- {msg}")
    |
    = help: Remove `print`

tests/debug_langchain_claude_adapter.py:123:13: T201 `print` found
    |
121 |         print(f"\nErrors ({len(error_logs)}):")
122 |         for msg in error_logs:
123 |             print(f"- {msg}")
    |             ^^^^^ T201
    |
    = help: Remove `print`

tests/domain/analysis/test_action_recommendation_service.py:1:1: D200 One-line docstring should fit on one line
  |
1 | / """Unit tests for the ActionRecommendationService.
2 | | """
  | |___^ D200
3 |
4 |   from unittest.mock import MagicMock, patch
  |
  = help: Reformat to one line

tests/domain/analysis/test_action_recommendation_service.py:21:9: ANN201 Missing return type annotation for public function `mock_event_bus`
   |
20 |     @pytest.fixture
21 |     def mock_event_bus(self, monkeypatch):
   |         ^^^^^^^^^^^^^^ ANN201
22 |         """Mock the event bus to avoid actually dispatching events."""
   |
   = help: Add return type annotation

tests/domain/analysis/test_action_recommendation_service.py:21:30: ANN001 Missing type annotation for function argument `monkeypatch`
   |
20 |     @pytest.fixture
21 |     def mock_event_bus(self, monkeypatch):
   |                              ^^^^^^^^^^^ ANN001
22 |         """Mock the event bus to avoid actually dispatching events."""
   |

tests/domain/analysis/test_action_recommendation_service.py:25:19: ANN202 Missing return type annotation for private function `mock_dispatch_coro`
   |
24 |         # Create a coroutine function mock
25 |         async def mock_dispatch_coro(*args, **kwargs):
   |                   ^^^^^^^^^^^^^^^^^^ ANN202
26 |             return None
   |
   = help: Add return type annotation: `None`

tests/domain/analysis/test_action_recommendation_service.py:25:38: ANN002 Missing type annotation for `*args`
   |
24 |         # Create a coroutine function mock
25 |         async def mock_dispatch_coro(*args, **kwargs):
   |                                      ^^^^^ ANN002
26 |             return None
   |

tests/domain/analysis/test_action_recommendation_service.py:25:39: ARG001 Unused function argument: `args`
   |
24 |         # Create a coroutine function mock
25 |         async def mock_dispatch_coro(*args, **kwargs):
   |                                       ^^^^ ARG001
26 |             return None
   |

tests/domain/analysis/test_action_recommendation_service.py:25:45: ANN003 Missing type annotation for `**kwargs`
   |
24 |         # Create a coroutine function mock
25 |         async def mock_dispatch_coro(*args, **kwargs):
   |                                             ^^^^^^^^ ANN003
26 |             return None
   |

tests/domain/analysis/test_action_recommendation_service.py:25:47: ARG001 Unused function argument: `kwargs`
   |
24 |         # Create a coroutine function mock
25 |         async def mock_dispatch_coro(*args, **kwargs):
   |                                               ^^^^^^ ARG001
26 |             return None
   |

tests/domain/analysis/test_action_recommendation_service.py:36:9: ANN201 Missing return type annotation for public function `inactive_repo`
   |
35 |     @pytest.fixture
36 |     def inactive_repo(self):
   |         ^^^^^^^^^^^^^ ANN201
37 |         """Create an inactive repository with low value."""
38 |         return Repository(
   |
   = help: Add return type annotation

tests/domain/analysis/test_action_recommendation_service.py:49:9: ANN201 Missing return type annotation for public function `inactive_analysis`
   |
48 |     @pytest.fixture
49 |     def inactive_analysis(self):
   |         ^^^^^^^^^^^^^^^^^ ANN201
50 |         """Create an analysis for an inactive repository with low value."""
51 |         return RepoAnalysis(
   |
   = help: Add return type annotation

tests/domain/analysis/test_action_recommendation_service.py:69:9: ANN201 Missing return type annotation for public function `valuable_repo`
   |
68 |     @pytest.fixture
69 |     def valuable_repo(self):
   |         ^^^^^^^^^^^^^ ANN201
70 |         """Create a valuable but inactive repository."""
71 |         return Repository(
   |
   = help: Add return type annotation

tests/domain/analysis/test_action_recommendation_service.py:82:9: ANN201 Missing return type annotation for public function `valuable_analysis`
   |
81 |     @pytest.fixture
82 |     def valuable_analysis(self):
   |         ^^^^^^^^^^^^^^^^^ ANN201
83 |         """Create an analysis for a valuable but inactive repository."""
84 |         return RepoAnalysis(
   |
   = help: Add return type annotation

tests/domain/analysis/test_action_recommendation_service.py:102:15: ANN201 Missing return type annotation for public function `test_recommend_delete_for_inactive_low_value`
    |
101 |     @pytest.mark.asyncio
102 |     async def test_recommend_delete_for_inactive_low_value(
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ANN201
103 |         self, inactive_repo, inactive_analysis, mock_event_bus,
104 |     ):
    |
    = help: Add return type annotation: `None`

tests/domain/analysis/test_action_recommendation_service.py:103:15: ANN001 Missing type annotation for function argument `inactive_repo`
    |
101 |     @pytest.mark.asyncio
102 |     async def test_recommend_delete_for_inactive_low_value(
103 |         self, inactive_repo, inactive_analysis, mock_event_bus,
    |               ^^^^^^^^^^^^^ ANN001
104 |     ):
105 |         """Test that an inactive repository with low value gets DELETE recommendation."""
    |

tests/domain/analysis/test_action_recommendation_service.py:103:30: ANN001 Missing type annotation for function argument `inactive_analysis`
    |
101 |     @pytest.mark.asyncio
102 |     async def test_recommend_delete_for_inactive_low_value(
103 |         self, inactive_repo, inactive_analysis, mock_event_bus,
    |                              ^^^^^^^^^^^^^^^^^ ANN001
104 |     ):
105 |         """Test that an inactive repository with low value gets DELETE recommendation."""
    |

tests/domain/analysis/test_action_recommendation_service.py:103:49: ANN001 Missing type annotation for function argument `mock_event_bus`
    |
101 |     @pytest.mark.asyncio
102 |     async def test_recommend_delete_for_inactive_low_value(
103 |         self, inactive_repo, inactive_analysis, mock_event_bus,
    |                                                 ^^^^^^^^^^^^^^ ANN001
104 |     ):
105 |         """Test that an inactive repository with low value gets DELETE recommendation."""
    |

tests/domain/analysis/test_action_recommendation_service.py:105:89: E501 Line too long (89 > 88)
    |
103 |         self, inactive_repo, inactive_analysis, mock_event_bus,
104 |     ):
105 |         """Test that an inactive repository with low value gets DELETE recommendation."""
    |                                                                                         ^ E501
106 |         # Act
107 |         action = await ActionRecommendationService.recommend_action(
    |

tests/domain/analysis/test_action_recommendation_service.py:116:15: ANN201 Missing return type annotation for public function `test_recommend_archive_for_inactive_high_value`
    |
115 |     @pytest.mark.asyncio
116 |     async def test_recommend_archive_for_inactive_high_value(
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ANN201
117 |         self, valuable_repo, valuable_analysis, mock_event_bus,
118 |     ):
    |
    = help: Add return type annotation: `None`

tests/domain/analysis/test_action_recommendation_service.py:117:15: ANN001 Missing type annotation for function argument `valuable_repo`
    |
115 |     @pytest.mark.asyncio
116 |     async def test_recommend_archive_for_inactive_high_value(
117 |         self, valuable_repo, valuable_analysis, mock_event_bus,
    |               ^^^^^^^^^^^^^ ANN001
118 |     ):
119 |         """Test that an inactive repository with high value gets ARCHIVE recommendation."""
    |

tests/domain/analysis/test_action_recommendation_service.py:117:30: ANN001 Missing type annotation for function argument `valuable_analysis`
    |
115 |     @pytest.mark.asyncio
116 |     async def test_recommend_archive_for_inactive_high_value(
117 |         self, valuable_repo, valuable_analysis, mock_event_bus,
    |                              ^^^^^^^^^^^^^^^^^ ANN001
118 |     ):
119 |         """Test that an inactive repository with high value gets ARCHIVE recommendation."""
    |

tests/domain/analysis/test_action_recommendation_service.py:117:49: ANN001 Missing type annotation for function argument `mock_event_bus`
    |
115 |     @pytest.mark.asyncio
116 |     async def test_recommend_archive_for_inactive_high_value(
117 |         self, valuable_repo, valuable_analysis, mock_event_bus,
    |                                                 ^^^^^^^^^^^^^^ ANN001
118 |     ):
119 |         """Test that an inactive repository with high value gets ARCHIVE recommendation."""
    |

tests/domain/analysis/test_action_recommendation_service.py:119:89: E501 Line too long (91 > 88)
    |
117 |         self, valuable_repo, valuable_analysis, mock_event_bus,
118 |     ):
119 |         """Test that an inactive repository with high value gets ARCHIVE recommendation."""
    |                                                                                         ^^^ E501
120 |         # Act
121 |         action = await ActionRecommendationService.recommend_action(
    |

tests/domain/analysis/test_action_recommendation_service.py:130:15: ANN201 Missing return type annotation for public function `test_respect_explicit_recommendation`
    |
129 |     @pytest.mark.asyncio
130 |     async def test_respect_explicit_recommendation(self, mock_event_bus):
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ANN201
131 |         """Test that the service respects explicit recommendations in the analysis."""
132 |         # Arrange
    |
    = help: Add return type annotation: `None`

tests/domain/analysis/test_action_recommendation_service.py:130:58: ANN001 Missing type annotation for function argument `mock_event_bus`
    |
129 |     @pytest.mark.asyncio
130 |     async def test_respect_explicit_recommendation(self, mock_event_bus):
    |                                                          ^^^^^^^^^^^^^^ ANN001
131 |         """Test that the service respects explicit recommendations in the analysis."""
132 |         # Arrange
    |

tests/domain/analysis/test_action_recommendation_service.py:164:15: ANN201 Missing return type annotation for public function `test_batch_recommend_actions`
    |
163 |     @pytest.mark.asyncio
164 |     async def test_batch_recommend_actions(self, mock_event_bus):
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ANN201
165 |         """Test batch recommendations for multiple repositories."""
166 |         # Arrange
    |
    = help: Add return type annotation: `None`

tests/domain/analysis/test_action_recommendation_service.py:164:50: ANN001 Missing type annotation for function argument `mock_event_bus`
    |
163 |     @pytest.mark.asyncio
164 |     async def test_batch_recommend_actions(self, mock_event_bus):
    |                                                  ^^^^^^^^^^^^^^ ANN001
165 |         """Test batch recommendations for multiple repositories."""
166 |         # Arrange
    |

tests/domain/analysis/test_action_recommendation_service.py:164:50: ARG002 Unused method argument: `mock_event_bus`
    |
163 |     @pytest.mark.asyncio
164 |     async def test_batch_recommend_actions(self, mock_event_bus):
    |                                                  ^^^^^^^^^^^^^^ ARG002
165 |         """Test batch recommendations for multiple repositories."""
166 |         # Arrange
    |

tests/domain/analysis/test_action_recommendation_service.py:224:15: ANN201 Missing return type annotation for public function `test_batch_recommend_actions_with_error`
    |
223 |     @pytest.mark.asyncio
224 |     async def test_batch_recommend_actions_with_error(self, mock_event_bus):
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ANN201
225 |         """Test batch recommendations with an error in one repository."""
226 |         # Arrange
    |
    = help: Add return type annotation: `None`

tests/domain/analysis/test_action_recommendation_service.py:224:61: ANN001 Missing type annotation for function argument `mock_event_bus`
    |
223 |     @pytest.mark.asyncio
224 |     async def test_batch_recommend_actions_with_error(self, mock_event_bus):
    |                                                             ^^^^^^^^^^^^^^ ANN001
225 |         """Test batch recommendations with an error in one repository."""
226 |         # Arrange
    |

tests/domain/analysis/test_action_recommendation_service.py:224:61: ARG002 Unused method argument: `mock_event_bus`
    |
223 |     @pytest.mark.asyncio
224 |     async def test_batch_recommend_actions_with_error(self, mock_event_bus):
    |                                                             ^^^^^^^^^^^^^^ ARG002
225 |         """Test batch recommendations with an error in one repository."""
226 |         # Arrange
    |

tests/domain/analysis/test_action_recommendation_service.py:274:19: ANN202 Missing return type annotation for private function `mock_recommend_action`
    |
272 |         original_recommend_action = ActionRecommendationService.recommend_action
273 |
274 |         async def mock_recommend_action(repo, analysis):
    |                   ^^^^^^^^^^^^^^^^^^^^^ ANN202
275 |             if repo.name == "error-repo":
276 |                 raise ValueError("Test error")
    |
    = help: Add return type annotation

tests/domain/analysis/test_action_recommendation_service.py:274:41: ANN001 Missing type annotation for function argument `repo`
    |
272 |         original_recommend_action = ActionRecommendationService.recommend_action
273 |
274 |         async def mock_recommend_action(repo, analysis):
    |                                         ^^^^ ANN001
275 |             if repo.name == "error-repo":
276 |                 raise ValueError("Test error")
    |

tests/domain/analysis/test_action_recommendation_service.py:274:47: ANN001 Missing type annotation for function argument `analysis`
    |
272 |         original_recommend_action = ActionRecommendationService.recommend_action
273 |
274 |         async def mock_recommend_action(repo, analysis):
    |                                               ^^^^^^^^ ANN001
275 |             if repo.name == "error-repo":
276 |                 raise ValueError("Test error")
    |

tests/domain/analysis/test_action_recommendation_service.py:276:23: TRY003 Avoid specifying long messages outside the exception class
    |
274 |         async def mock_recommend_action(repo, analysis):
275 |             if repo.name == "error-repo":
276 |                 raise ValueError("Test error")
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
277 |             return await original_recommend_action(repo, analysis)
    |

tests/domain/analysis/test_action_recommendation_service.py:276:34: EM101 Exception must not use a string literal, assign to variable first
    |
274 |         async def mock_recommend_action(repo, analysis):
275 |             if repo.name == "error-repo":
276 |                 raise ValueError("Test error")
    |                                  ^^^^^^^^^^^^ EM101
277 |             return await original_recommend_action(repo, analysis)
    |
    = help: Assign to variable; remove string literal

tests/domain/analysis/test_events.py:1:1: D200 One-line docstring should fit on one line
  |
1 | / """Test cases for the standalone domain events in the analysis bounded context.
2 | | """
  | |___^ D200
3 |
4 |   import uuid
  |
  = help: Reformat to one line

tests/domain/analysis/test_events.py:21:5: ANN201 Missing return type annotation for public function `repo_analysis`
   |
19 | # --- Fixtures ---
20 | @pytest.fixture
21 | def repo_analysis():
   |     ^^^^^^^^^^^^^ ANN201
22 |     return RepoAnalysis(
23 |         repo_name="test-repo",
   |
   = help: Add return type annotation

tests/domain/analysis/test_events.py:43:5: ANN201 Missing return type annotation for public function `test_repository_analysis_completed_event`
   |
42 | # --- Tests ---
43 | def test_repository_analysis_completed_event(repo_analysis):
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ANN201
44 |     """Test creation and serialization of RepositoryAnalysisCompleted event."""
45 |     event = RepositoryAnalysisCompleted(
   |
   = help: Add return type annotation: `None`

tests/domain/analysis/test_events.py:43:46: ANN001 Missing type annotation for function argument `repo_analysis`
   |
42 | # --- Tests ---
43 | def test_repository_analysis_completed_event(repo_analysis):
   |                                              ^^^^^^^^^^^^^ ANN001
44 |     """Test creation and serialization of RepositoryAnalysisCompleted event."""
45 |     event = RepositoryAnalysisCompleted(
   |

tests/domain/analysis/test_events.py:67:5: ANN201 Missing return type annotation for public function `test_repository_action_recommended_event`
   |
67 | def test_repository_action_recommended_event():
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ANN201
68 |     """Test creation and serialization of RepositoryActionRecommended event."""
69 |     event = RepositoryActionRecommended(
   |
   = help: Add return type annotation: `None`

tests/domain/analysis/test_events.py:90:5: ANN201 Missing return type annotation for public function `test_high_priority_issue_identified_event`
   |
90 | def test_high_priority_issue_identified_event():
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ANN201
91 |     """Test creation and serialization of HighPriorityIssueIdentified event."""
92 |     issue = Recommendation(
   |
   = help: Add return type annotation: `None`

tests/domain/analysis/test_events.py:116:5: ANN201 Missing return type annotation for public function `test_analysis_error_event`
    |
116 | def test_analysis_error_event():
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^ ANN201
117 |     """Test creation and serialization of AnalysisError event."""
118 |     event = AnalysisError(
    |
    = help: Add return type annotation: `None`

tests/domain/analysis/test_events.py:137:11: ANN201 Missing return type annotation for public function `test_event_handler_integration`
    |
136 | @pytest.mark.asyncio
137 | async def test_event_handler_integration():
    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ANN201
138 |     """Test that events can be dispatched and handled via the event bus."""
139 |     handler_called = {"value": False}
    |
    = help: Add return type annotation: `None`

tests/domain/analysis/test_events.py:141:15: ANN202 Missing return type annotation for private function `test_handler`
    |
139 |     handler_called = {"value": False}
140 |
141 |     async def test_handler(event):
    |               ^^^^^^^^^^^^ ANN202
142 |         handler_called["value"] = True
143 |         handler_called["event"] = event
    |
    = help: Add return type annotation: `None`

tests/domain/analysis/test_events.py:141:28: ANN001 Missing type annotation for function argument `event`
    |
139 |     handler_called = {"value": False}
140 |
141 |     async def test_handler(event):
    |                            ^^^^^ ANN001
142 |         handler_called["value"] = True
143 |         handler_called["event"] = event
    |

tests/domain/core/__init__.py:1:1: D200 One-line docstring should fit on one line
  |
1 | / """Tests for the domain core package.
2 | | """
  | |___^ D200
  |
  = help: Reformat to one line

tests/domain/core/test_auth_config.py:1:1: D200 One-line docstring should fit on one line
  |
1 | / """Tests for the authentication configuration module.
2 | | """
  | |___^ D200
3 |
4 |   from repo_organizer.domain.core.auth_config import (
  |
  = help: Reformat to one line

tests/domain/core/test_auth_config.py:17:9: ANN201 Missing return type annotation for public function `test_get_default_config`
   |
15 |     """Tests for the authentication configuration module."""
16 |
17 |     def test_get_default_config(self):
   |         ^^^^^^^^^^^^^^^^^^^^^^^ ANN201
18 |         """Test that default config is created with expected values."""
19 |         config = get_default_config()
   |
   = help: Add return type annotation: `None`

tests/domain/core/test_auth_config.py:49:9: ANN201 Missing return type annotation for public function `test_is_authentication_required_default`
   |
47 |         )
48 |
49 |     def test_is_authentication_required_default(self):
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ANN201
50 |         """Test auth requirements using default configuration."""
51 |         # Should require auth for analysis operations
   |
   = help: Add return type annotation: `None`

tests/domain/core/test_auth_config.py:67:9: ANN201 Missing return type annotation for public function `test_is_authentication_required_custom_config`
   |
65 |         assert is_authentication_required("unknown_operation") is True
66 |
67 |     def test_is_authentication_required_custom_config(self):
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ANN201
68 |         """Test auth requirements with custom configuration."""
69 |         # Create custom config
   |
   = help: Add return type annotation: `None`

tests/domain/core/test_auth_config.py:88:9: ANN201 Missing return type annotation for public function `test_get_operations_requiring_auth`
   |
86 |         assert is_authentication_required("unknown_operation", config) is True
87 |
88 |     def test_get_operations_requiring_auth(self):
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ANN201
89 |         """Test getting the set of operations requiring authentication."""
90 |         # With default config
   |
   = help: Add return type annotation: `None`

tests/domain/core/test_auth_service.py:1:1: D200 One-line docstring should fit on one line
  |
1 | / """Tests for the authentication service module.
2 | | """
  | |___^ D200
3 |
4 |   from repo_organizer.domain.core.auth_config import (
  |
  = help: Reformat to one line

tests/domain/core/test_auth_service.py:15:9: ANN201 Missing return type annotation for public function `test_validate_operation_not_requiring_auth`
   |
13 |     """Tests for the authentication service."""
14 |
15 |     def test_validate_operation_not_requiring_auth(self):
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ANN201
16 |         """Test validation of operations that don't require authentication."""
17 |         # Create a custom config for testing
   |
   = help: Add return type annotation: `None`

tests/domain/core/test_auth_service.py:37:9: ANN201 Missing return type annotation for public function `test_validate_operation_requiring_auth`
   |
35 |         assert error_message is None
36 |
37 |     def test_validate_operation_requiring_auth(self):
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ANN201
38 |         """Test validation of operations that require authentication."""
39 |         # Create a custom config for testing
   |
   = help: Add return type annotation: `None`

tests/domain/core/test_auth_service.py:64:9: ANN201 Missing return type annotation for public function `test_validate_operation_with_invalid_usernames`
   |
62 |         assert error_message is None
63 |
64 |     def test_validate_operation_with_invalid_usernames(self):
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ANN201
65 |         """Test validation with various invalid usernames."""
66 |         # Create a config that requires auth for all operations
   |
   = help: Add return type annotation: `None`

tests/domain/core/test_auth_service.py:96:9: ANN201 Missing return type annotation for public function `test_is_operation_allowed`
   |
94 |         assert "must start with" in error_message.lower()
95 |
96 |     def test_is_operation_allowed(self):
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^ ANN201
97 |         """Test the simplified is_operation_allowed method."""
98 |         # Create a custom config for testing
   |
   = help: Add return type annotation: `None`

tests/domain/core/test_auth_validator.py:1:1: D200 One-line docstring should fit on one line
  |
1 | / """Tests for the authentication validator module.
2 | | """
  | |___^ D200
3 |
4 |   from repo_organizer.domain.core.auth_validator import validate_username
  |
  = help: Reformat to one line

tests/domain/core/test_auth_validator.py:10:9: ANN201 Missing return type annotation for public function `test_validate_username_valid`
   |
 8 |     """Tests for the authentication validator functions."""
 9 |
10 |     def test_validate_username_valid(self):
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ANN201
11 |         """Test validation with valid usernames."""
12 |         valid_usernames = [
   |
   = help: Add return type annotation: `None`

tests/domain/core/test_auth_validator.py:24:89: E501 Line too long (91 > 88)
   |
22 |             result = validate_username(username)
23 |             assert result.is_valid, (
24 |                 f"Username '{username}' should be valid, got error: {result.error_message}"
   |                                                                                         ^^^ E501
25 |             )
26 |             assert result.error_message is None
   |

tests/domain/core/test_auth_validator.py:28:9: ANN201 Missing return type annotation for public function `test_validate_username_none`
   |
26 |             assert result.error_message is None
27 |
28 |     def test_validate_username_none(self):
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^ ANN201
29 |         """Test validation with None username."""
30 |         result = validate_username(None)
   |
   = help: Add return type annotation: `None`

tests/domain/core/test_auth_validator.py:34:9: ANN201 Missing return type annotation for public function `test_validate_username_empty`
   |
32 |         assert "required" in result.error_message.lower()
33 |
34 |     def test_validate_username_empty(self):
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ANN201
35 |         """Test validation with empty username."""
36 |         result = validate_username("")
   |
   = help: Add return type annotation: `None`

tests/domain/core/test_auth_validator.py:45:9: ANN201 Missing return type annotation for public function `test_validate_username_too_short`
   |
43 |         assert "empty" in result.error_message.lower()
44 |
45 |     def test_validate_username_too_short(self):
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ANN201
46 |         """Test validation with too short username."""
47 |         result = validate_username("ab")
   |
   = help: Add return type annotation: `None`

tests/domain/core/test_auth_validator.py:51:9: ANN201 Missing return type annotation for public function `test_validate_username_too_long`
   |
49 |         assert "at least 3 characters" in result.error_message.lower()
50 |
51 |     def test_validate_username_too_long(self):
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ANN201
52 |         """Test validation with too long username."""
53 |         result = validate_username("a" * 51)
   |
   = help: Add return type annotation: `None`

tests/domain/core/test_auth_validator.py:57:9: ANN201 Missing return type annotation for public function `test_validate_username_invalid_format`
   |
55 |         assert "exceed 50 characters" in result.error_message.lower()
56 |
57 |     def test_validate_username_invalid_format(self):
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ANN201
58 |         """Test validation with invalid username format."""
59 |         invalid_usernames = [
   |
   = help: Add return type annotation: `None`

tests/domain/core/test_events.py:13:7: D101 Missing docstring in public class
   |
11 | # --- Test Event Classes ---
12 | @dataclass(frozen=True)
13 | class TestEventData(DomainEvent):
   |       ^^^^^^^^^^^^^ D101
14 |     value: int = 0
   |

tests/domain/core/test_events.py:16:9: ANN202 Missing return type annotation for private function `_get_event_data`
   |
14 |     value: int = 0
15 |
16 |     def _get_event_data(self):
   |         ^^^^^^^^^^^^^^^ ANN202
17 |         return {"value": self.value}
   |
   = help: Add return type annotation

tests/domain/core/test_events.py:22:5: ANN201 Missing return type annotation for public function `dispatcher`
   |
20 | # --- Fixtures ---
21 | @pytest.fixture
22 | def dispatcher():
   |     ^^^^^^^^^^ ANN201
23 |     return EventDispatcher()
   |
   = help: Add return type annotation

tests/domain/core/test_events.py:27:5: ANN201 Missing return type annotation for public function `test_event_creation`
   |
26 | # --- Tests ---
27 | def test_event_creation():
   |     ^^^^^^^^^^^^^^^^^^^ ANN201
28 |     event = TestEventData(aggregate_id="agg-1", value=42)
29 |     assert isinstance(event.event_id, uuid.UUID)
   |
   = help: Add return type annotation: `None`

tests/domain/core/test_events.py:38:5: ANN201 Missing return type annotation for public function `test_sync_handler_dispatch`
   |
38 | def test_sync_handler_dispatch(dispatcher):
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ ANN201
39 |     called = {}
   |
   = help: Add return type annotation: `None`

tests/domain/core/test_events.py:38:32: ANN001 Missing type annotation for function argument `dispatcher`
   |
38 | def test_sync_handler_dispatch(dispatcher):
   |                                ^^^^^^^^^^ ANN001
39 |     called = {}
   |

tests/domain/core/test_events.py:41:9: ANN202 Missing return type annotation for private function `handler`
   |
39 |     called = {}
40 |
41 |     def handler(event):
   |         ^^^^^^^ ANN202
42 |         called["event"] = event
   |
   = help: Add return type annotation: `None`

tests/domain/core/test_events.py:41:17: ANN001 Missing type annotation for function argument `event`
   |
39 |     called = {}
40 |
41 |     def handler(event):
   |                 ^^^^^ ANN001
42 |         called["event"] = event
   |

tests/domain/core/test_events.py:50:5: ANN201 Missing return type annotation for public function `test_async_handler_dispatch`
   |
50 | def test_async_handler_dispatch(dispatcher):
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ ANN201
51 |     called = {}
   |
   = help: Add return type annotation: `None`

tests/domain/core/test_events.py:50:33: ANN001 Missing type annotation for function argument `dispatcher`
   |
50 | def test_async_handler_dispatch(dispatcher):
   |                                 ^^^^^^^^^^ ANN001
51 |     called = {}
   |

tests/domain/core/test_events.py:53:15: ANN202 Missing return type annotation for private function `handler`
   |
51 |     called = {}
52 |
53 |     async def handler(event):
   |               ^^^^^^^ ANN202
54 |         called["event"] = event
   |
   = help: Add return type annotation: `None`

tests/domain/core/test_events.py:53:23: ANN001 Missing type annotation for function argument `event`
   |
51 |     called = {}
52 |
53 |     async def handler(event):
   |                       ^^^^^ ANN001
54 |         called["event"] = event
   |

tests/domain/core/test_events.py:62:5: ANN201 Missing return type annotation for public function `test_mixed_handlers`
   |
62 | def test_mixed_handlers(dispatcher):
   |     ^^^^^^^^^^^^^^^^^^^ ANN201
63 |     called = {"sync": False, "async": False}
   |
   = help: Add return type annotation: `None`

tests/domain/core/test_events.py:62:25: ANN001 Missing type annotation for function argument `dispatcher`
   |
62 | def test_mixed_handlers(dispatcher):
   |                         ^^^^^^^^^^ ANN001
63 |     called = {"sync": False, "async": False}
   |

tests/domain/core/test_events.py:65:9: ANN202 Missing return type annotation for private function `sync_handler`
   |
63 |     called = {"sync": False, "async": False}
64 |
65 |     def sync_handler(event):
   |         ^^^^^^^^^^^^ ANN202
66 |         called["sync"] = True
   |
   = help: Add return type annotation: `None`

tests/domain/core/test_events.py:65:22: ANN001 Missing type annotation for function argument `event`
   |
63 |     called = {"sync": False, "async": False}
64 |
65 |     def sync_handler(event):
   |                      ^^^^^ ANN001
66 |         called["sync"] = True
   |

tests/domain/core/test_events.py:65:22: ARG001 Unused function argument: `event`
   |
63 |     called = {"sync": False, "async": False}
64 |
65 |     def sync_handler(event):
   |                      ^^^^^ ARG001
66 |         called["sync"] = True
   |

tests/domain/core/test_events.py:68:15: ANN202 Missing return type annotation for private function `async_handler`
   |
66 |         called["sync"] = True
67 |
68 |     async def async_handler(event):
   |               ^^^^^^^^^^^^^ ANN202
69 |         called["async"] = True
   |
   = help: Add return type annotation: `None`

tests/domain/core/test_events.py:68:29: ANN001 Missing type annotation for function argument `event`
   |
66 |         called["sync"] = True
67 |
68 |     async def async_handler(event):
   |                             ^^^^^ ANN001
69 |         called["async"] = True
   |

tests/domain/core/test_events.py:68:29: ARG001 Unused function argument: `event`
   |
66 |         called["sync"] = True
67 |
68 |     async def async_handler(event):
   |                             ^^^^^ ARG001
69 |         called["async"] = True
   |

tests/domain/core/test_events.py:75:5: PT018 Assertion should be broken down into multiple parts
   |
73 |     event = TestEventData(aggregate_id="agg-4", value=7)
74 |     asyncio.run(dispatcher.dispatch(event))
75 |     assert called["sync"] and called["async"]
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ PT018
   |
   = help: Break down assertion into multiple parts

tests/domain/core/test_events.py:78:5: ANN201 Missing return type annotation for public function `test_unregister_handler`
   |
78 | def test_unregister_handler(dispatcher):
   |     ^^^^^^^^^^^^^^^^^^^^^^^ ANN201
79 |     called = {"sync": False}
   |
   = help: Add return type annotation: `None`

tests/domain/core/test_events.py:78:29: ANN001 Missing type annotation for function argument `dispatcher`
   |
78 | def test_unregister_handler(dispatcher):
   |                             ^^^^^^^^^^ ANN001
79 |     called = {"sync": False}
   |

tests/domain/core/test_events.py:81:9: ANN202 Missing return type annotation for private function `sync_handler`
   |
79 |     called = {"sync": False}
80 |
81 |     def sync_handler(event):
   |         ^^^^^^^^^^^^ ANN202
82 |         called["sync"] = True
   |
   = help: Add return type annotation: `None`

tests/domain/core/test_events.py:81:22: ANN001 Missing type annotation for function argument `event`
   |
79 |     called = {"sync": False}
80 |
81 |     def sync_handler(event):
   |                      ^^^^^ ANN001
82 |         called["sync"] = True
   |

tests/domain/core/test_events.py:81:22: ARG001 Unused function argument: `event`
   |
79 |     called = {"sync": False}
80 |
81 |     def sync_handler(event):
   |                      ^^^^^ ARG001
82 |         called["sync"] = True
   |

tests/domain/core/test_events.py:91:5: ANN201 Missing return type annotation for public function `test_no_handlers`
   |
91 | def test_no_handlers(dispatcher):
   |     ^^^^^^^^^^^^^^^^ ANN201
92 |     event = TestEventData(aggregate_id="agg-6", value=0)
93 |     # Should not raise
   |
   = help: Add return type annotation: `None`

tests/domain/core/test_events.py:91:22: ANN001 Missing type annotation for function argument `dispatcher`
   |
91 | def test_no_handlers(dispatcher):
   |                      ^^^^^^^^^^ ANN001
92 |     event = TestEventData(aggregate_id="agg-6", value=0)
93 |     # Should not raise
   |

tests/infrastructure/analysis/test_langchain_claude_adapter.py:21:5: ANN201 Missing return type annotation for public function `sample_repo_data`
   |
19 | # Load sample data for testing
20 | @pytest.fixture
21 | def sample_repo_data():
   |     ^^^^^^^^^^^^^^^^ ANN201
22 |     """Load sample repository data for testing."""
23 |     fixtures_path = Path(__file__).parent.parent.parent / "fixtures"
   |
   = help: Add return type annotation

tests/infrastructure/analysis/test_langchain_claude_adapter.py:24:10: PTH123 `open()` should be replaced by `Path.open()`
   |
22 |     """Load sample repository data for testing."""
23 |     fixtures_path = Path(__file__).parent.parent.parent / "fixtures"
24 |     with open(fixtures_path / "sample_repo_data.json") as f:
   |          ^^^^ PTH123
25 |         return json.load(f)
   |

tests/infrastructure/analysis/test_langchain_claude_adapter.py:29:5: ANN201 Missing return type annotation for public function `mock_llm_service`
   |
28 | @pytest.fixture
29 | def mock_llm_service():
   |     ^^^^^^^^^^^^^^^^ ANN201
30 |     """Create a mock LLMService that returns predetermined results."""
31 |     mock = MagicMock()
   |
   = help: Add return type annotation

tests/infrastructure/analysis/test_langchain_claude_adapter.py:65:5: ANN201 Missing return type annotation for public function `mock_logger`
   |
64 | @pytest.fixture
65 | def mock_logger():
   |     ^^^^^^^^^^^ ANN201
66 |     """Create a mock logger."""
67 |     mock = MagicMock()
   |
   = help: Add return type annotation

tests/infrastructure/analysis/test_langchain_claude_adapter.py:74:5: ANN201 Missing return type annotation for public function `adapter`
   |
73 | @pytest.fixture
74 | def adapter(mock_llm_service, mock_logger):
   |     ^^^^^^^ ANN201
75 |     """Create a LangChainClaudeAdapter with a mocked LLMService."""
76 |     # Create the adapter with a dummy API key and the mock logger
   |
   = help: Add return type annotation

tests/infrastructure/analysis/test_langchain_claude_adapter.py:74:13: ANN001 Missing type annotation for function argument `mock_llm_service`
   |
73 | @pytest.fixture
74 | def adapter(mock_llm_service, mock_logger):
   |             ^^^^^^^^^^^^^^^^ ANN001
75 |     """Create a LangChainClaudeAdapter with a mocked LLMService."""
76 |     # Create the adapter with a dummy API key and the mock logger
   |

tests/infrastructure/analysis/test_langchain_claude_adapter.py:74:31: ANN001 Missing type annotation for function argument `mock_logger`
   |
73 | @pytest.fixture
74 | def adapter(mock_llm_service, mock_logger):
   |                               ^^^^^^^^^^^ ANN001
75 |     """Create a LangChainClaudeAdapter with a mocked LLMService."""
76 |     # Create the adapter with a dummy API key and the mock logger
   |

tests/infrastructure/analysis/test_langchain_claude_adapter.py:87:5: SLF001 Private member accessed: `_llm_service`
   |
86 |     # Replace the internal LLM service with our mock
87 |     adapter._llm_service = mock_llm_service
   |     ^^^^^^^^^^^^^^^^^^^^ SLF001
88 |
89 |     return adapter
   |

tests/infrastructure/analysis/test_langchain_claude_adapter.py:95:9: ANN201 Missing return type annotation for public function `test_analyze_success`
   |
93 |     """Test suite for the LangChainClaudeAdapter."""
94 |
95 |     def test_analyze_success(self, adapter, sample_repo_data, mock_llm_service):
   |         ^^^^^^^^^^^^^^^^^^^^ ANN201
96 |         """Test successful analysis of a repository."""
97 |         # Analyze the repository
   |
   = help: Add return type annotation: `None`

tests/infrastructure/analysis/test_langchain_claude_adapter.py:95:36: ANN001 Missing type annotation for function argument `adapter`
   |
93 |     """Test suite for the LangChainClaudeAdapter."""
94 |
95 |     def test_analyze_success(self, adapter, sample_repo_data, mock_llm_service):
   |                                    ^^^^^^^ ANN001
96 |         """Test successful analysis of a repository."""
97 |         # Analyze the repository
   |

tests/infrastructure/analysis/test_langchain_claude_adapter.py:95:45: ANN001 Missing type annotation for function argument `sample_repo_data`
   |
93 |     """Test suite for the LangChainClaudeAdapter."""
94 |
95 |     def test_analyze_success(self, adapter, sample_repo_data, mock_llm_service):
   |                                             ^^^^^^^^^^^^^^^^ ANN001
96 |         """Test successful analysis of a repository."""
97 |         # Analyze the repository
   |

tests/infrastructure/analysis/test_langchain_claude_adapter.py:95:63: ANN001 Missing type annotation for function argument `mock_llm_service`
   |
93 |     """Test suite for the LangChainClaudeAdapter."""
94 |
95 |     def test_analyze_success(self, adapter, sample_repo_data, mock_llm_service):
   |                                                               ^^^^^^^^^^^^^^^^ ANN001
96 |         """Test successful analysis of a repository."""
97 |         # Analyze the repository
   |

tests/infrastructure/analysis/test_langchain_claude_adapter.py:103:89: E501 Line too long (97 > 88)
    |
101 |         assert mock_llm_service.analyze_repository.call_count == 1
102 |
103 |         # Instead of checking exact argument equality, just verify that it was called with a dict
    |                                                                                         ^^^^^^^^^ E501
104 |         # that contains the same repo_name - the adapter adds default values to the dict
105 |         call_args = mock_llm_service.analyze_repository.call_args[0][0]
    |

tests/infrastructure/analysis/test_langchain_claude_adapter.py:125:9: ANN201 Missing return type annotation for public function `test_analyze_cache`
    |
123 |         assert "test" in result.tags
124 |
125 |     def test_analyze_cache(self, adapter, sample_repo_data, mock_llm_service):
    |         ^^^^^^^^^^^^^^^^^^ ANN201
126 |         """Test that caching works properly."""
127 |         # First call should use the LLM service
    |
    = help: Add return type annotation: `None`

tests/infrastructure/analysis/test_langchain_claude_adapter.py:125:34: ANN001 Missing type annotation for function argument `adapter`
    |
123 |         assert "test" in result.tags
124 |
125 |     def test_analyze_cache(self, adapter, sample_repo_data, mock_llm_service):
    |                                  ^^^^^^^ ANN001
126 |         """Test that caching works properly."""
127 |         # First call should use the LLM service
    |

tests/infrastructure/analysis/test_langchain_claude_adapter.py:125:43: ANN001 Missing type annotation for function argument `sample_repo_data`
    |
123 |         assert "test" in result.tags
124 |
125 |     def test_analyze_cache(self, adapter, sample_repo_data, mock_llm_service):
    |                                           ^^^^^^^^^^^^^^^^ ANN001
126 |         """Test that caching works properly."""
127 |         # First call should use the LLM service
    |

tests/infrastructure/analysis/test_langchain_claude_adapter.py:125:61: ANN001 Missing type annotation for function argument `mock_llm_service`
    |
123 |         assert "test" in result.tags
124 |
125 |     def test_analyze_cache(self, adapter, sample_repo_data, mock_llm_service):
    |                                                             ^^^^^^^^^^^^^^^^ ANN001
126 |         """Test that caching works properly."""
127 |         # First call should use the LLM service
    |

tests/infrastructure/analysis/test_langchain_claude_adapter.py:144:9: ANN201 Missing return type annotation for public function `test_analyze_rate_limit_error`
    |
142 |         assert metrics["cache_misses"] == 1
143 |
144 |     def test_analyze_rate_limit_error(
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ANN201
145 |         self, adapter, sample_repo_data, mock_llm_service,
146 |     ):
    |
    = help: Add return type annotation: `None`

tests/infrastructure/analysis/test_langchain_claude_adapter.py:145:15: ANN001 Missing type annotation for function argument `adapter`
    |
144 |     def test_analyze_rate_limit_error(
145 |         self, adapter, sample_repo_data, mock_llm_service,
    |               ^^^^^^^ ANN001
146 |     ):
147 |         """Test handling of rate limit errors."""
    |

tests/infrastructure/analysis/test_langchain_claude_adapter.py:145:24: ANN001 Missing type annotation for function argument `sample_repo_data`
    |
144 |     def test_analyze_rate_limit_error(
145 |         self, adapter, sample_repo_data, mock_llm_service,
    |                        ^^^^^^^^^^^^^^^^ ANN001
146 |     ):
147 |         """Test handling of rate limit errors."""
    |

tests/infrastructure/analysis/test_langchain_claude_adapter.py:145:42: ANN001 Missing type annotation for function argument `mock_llm_service`
    |
144 |     def test_analyze_rate_limit_error(
145 |         self, adapter, sample_repo_data, mock_llm_service,
    |                                          ^^^^^^^^^^^^^^^^ ANN001
146 |     ):
147 |         """Test handling of rate limit errors."""
    |

tests/infrastructure/analysis/test_langchain_claude_adapter.py:165:9: ANN201 Missing return type annotation for public function `test_analyze_general_error`
    |
163 |         assert metrics["failed_requests"] == 1
164 |
165 |     def test_analyze_general_error(self, adapter, sample_repo_data, mock_llm_service):
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^ ANN201
166 |         """Test handling of general errors."""
167 |         # Configure mock to raise general error
    |
    = help: Add return type annotation: `None`

tests/infrastructure/analysis/test_langchain_claude_adapter.py:165:42: ANN001 Missing type annotation for function argument `adapter`
    |
163 |         assert metrics["failed_requests"] == 1
164 |
165 |     def test_analyze_general_error(self, adapter, sample_repo_data, mock_llm_service):
    |                                          ^^^^^^^ ANN001
166 |         """Test handling of general errors."""
167 |         # Configure mock to raise general error
    |

tests/infrastructure/analysis/test_langchain_claude_adapter.py:165:51: ANN001 Missing type annotation for function argument `sample_repo_data`
    |
163 |         assert metrics["failed_requests"] == 1
164 |
165 |     def test_analyze_general_error(self, adapter, sample_repo_data, mock_llm_service):
    |                                                   ^^^^^^^^^^^^^^^^ ANN001
166 |         """Test handling of general errors."""
167 |         # Configure mock to raise general error
    |

tests/infrastructure/analysis/test_langchain_claude_adapter.py:165:69: ANN001 Missing type annotation for function argument `mock_llm_service`
    |
163 |         assert metrics["failed_requests"] == 1
164 |
165 |     def test_analyze_general_error(self, adapter, sample_repo_data, mock_llm_service):
    |                                                                     ^^^^^^^^^^^^^^^^ ANN001
166 |         """Test handling of general errors."""
167 |         # Configure mock to raise general error
    |

tests/infrastructure/analysis/test_langchain_claude_adapter.py:182:9: ANN201 Missing return type annotation for public function `test_retry_mechanism`
    |
180 |         assert metrics["failed_requests"] == 1
181 |
182 |     def test_retry_mechanism(self, adapter, sample_repo_data, mock_llm_service):
    |         ^^^^^^^^^^^^^^^^^^^^ ANN201
183 |         """Test retry mechanism for transient errors."""
184 |         # Set up mock to fail twice then succeed
    |
    = help: Add return type annotation: `None`

tests/infrastructure/analysis/test_langchain_claude_adapter.py:182:36: ANN001 Missing type annotation for function argument `adapter`
    |
180 |         assert metrics["failed_requests"] == 1
181 |
182 |     def test_retry_mechanism(self, adapter, sample_repo_data, mock_llm_service):
    |                                    ^^^^^^^ ANN001
183 |         """Test retry mechanism for transient errors."""
184 |         # Set up mock to fail twice then succeed
    |

tests/infrastructure/analysis/test_langchain_claude_adapter.py:182:45: ANN001 Missing type annotation for function argument `sample_repo_data`
    |
180 |         assert metrics["failed_requests"] == 1
181 |
182 |     def test_retry_mechanism(self, adapter, sample_repo_data, mock_llm_service):
    |                                             ^^^^^^^^^^^^^^^^ ANN001
183 |         """Test retry mechanism for transient errors."""
184 |         # Set up mock to fail twice then succeed
    |

tests/infrastructure/analysis/test_langchain_claude_adapter.py:182:63: ANN001 Missing type annotation for function argument `mock_llm_service`
    |
180 |         assert metrics["failed_requests"] == 1
181 |
182 |     def test_retry_mechanism(self, adapter, sample_repo_data, mock_llm_service):
    |                                                               ^^^^^^^^^^^^^^^^ ANN001
183 |         """Test retry mechanism for transient errors."""
184 |         # Set up mock to fail twice then succeed
    |

tests/infrastructure/config/__init__.py:1:1: D200 One-line docstring should fit on one line
  |
1 | / """Tests for the infrastructure config package.
2 | | """
  | |___^ D200
  |
  = help: Reformat to one line

tests/infrastructure/config/test_auth_settings.py:1:1: D200 One-line docstring should fit on one line
  |
1 | / """Tests for the authentication settings module.
2 | | """
  | |___^ D200
3 |
4 |   import os
  |
  = help: Reformat to one line

tests/infrastructure/config/test_auth_settings.py:14:9: ANN201 Missing return type annotation for public function `test_default_auth_settings`
   |
12 |     """Tests for the authentication settings module."""
13 |
14 |     def test_default_auth_settings(self):
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^ ANN201
15 |         """Test default authentication settings."""
16 |         settings = AuthSettings()
   |
   = help: Add return type annotation: `None`

tests/infrastructure/config/test_auth_settings.py:38:9: ANN201 Missing return type annotation for public function `test_get_auth_config_default`
   |
36 |         assert settings.auth_operation_overrides == {}
37 |
38 |     def test_get_auth_config_default(self):
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ANN201
39 |         """Test converting default settings to AuthConfig."""
40 |         settings = AuthSettings()
   |
   = help: Add return type annotation: `None`

tests/infrastructure/config/test_auth_settings.py:60:9: ANN201 Missing return type annotation for public function `test_get_auth_config_with_auth_disabled`
   |
58 |         assert config.operation_overrides == {}
59 |
60 |     def test_get_auth_config_with_auth_disabled(self):
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ANN201
61 |         """Test converting settings to AuthConfig when auth is disabled."""
62 |         settings = AuthSettings(auth_enabled=False)
   |
   = help: Add return type annotation: `None`

tests/infrastructure/config/test_auth_settings.py:83:9: ANN201 Missing return type annotation for public function `test_get_auth_config_with_custom_requirements`
   |
81 |         )
82 |
83 |     def test_get_auth_config_with_custom_requirements(self):
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ANN201
84 |         """Test converting settings to AuthConfig with custom requirements."""
85 |         settings = AuthSettings(
   |
   = help: Add return type annotation: `None`

tests/infrastructure/config/test_auth_settings.py:127:9: ANN201 Missing return type annotation for public function `test_auth_settings_environment_override`
    |
125 |         },
126 |     )
127 |     def test_auth_settings_environment_override(self):
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ANN201
128 |         """Test auth settings with environment variable overrides."""
129 |         # Set up auth settings with the environment variables
    |
    = help: Add return type annotation: `None`

tests/infrastructure/config/test_auth_settings.py:149:89: E501 Line too long (108 > 88)
    |
147 |         )
148 |
149 |         # When auth is disabled, operation overrides are not applied, so operation_overrides should be empty
    |                                                                                         ^^^^^^^^^^^^^^^^^^^^ E501
150 |         assert config.operation_overrides == {}
    |

tests/infrastructure/source_control/__init__.py:1:1: D200 One-line docstring should fit on one line
  |
1 | / """Tests for source control infrastructure.
2 | | """
  | |___^ D200
  |
  = help: Reformat to one line

tests/infrastructure/source_control/test_github_adapter.py:1:1: D200 One-line docstring should fit on one line
  |
1 | / """Tests for the GitHub adapter implementation.
2 | | """
  | |___^ D200
3 |
4 |   from unittest.mock import MagicMock, patch
  |
  = help: Reformat to one line

tests/infrastructure/source_control/test_github_adapter.py:16:9: ANN201 Missing return type annotation for public function `mock_settings`
   |
15 |     @pytest.fixture
16 |     def mock_settings(self):
   |         ^^^^^^^^^^^^^ ANN201
17 |         """Create mock settings for tests."""
18 |         settings = MagicMock()
   |
   = help: Add return type annotation

tests/infrastructure/source_control/test_github_adapter.py:20:33: S105 Possible hardcoded password assigned to: "github_token"
   |
18 |         settings = MagicMock()
19 |         settings.github_username = "test-user"
20 |         settings.github_token = "test-token"
   |                                 ^^^^^^^^^^^^ S105
21 |         settings.github_rate_limit = 30
22 |         return settings
   |

tests/infrastructure/source_control/test_github_adapter.py:25:9: ANN201 Missing return type annotation for public function `mock_logger`
   |
24 |     @pytest.fixture
25 |     def mock_logger(self):
   |         ^^^^^^^^^^^ ANN201
26 |         """Create mock logger for tests."""
27 |         return MagicMock()
   |
   = help: Add return type annotation

tests/infrastructure/source_control/test_github_adapter.py:30:9: ANN201 Missing return type annotation for public function `mock_rate_limiter`
   |
29 |     @pytest.fixture
30 |     def mock_rate_limiter(self):
   |         ^^^^^^^^^^^^^^^^^ ANN201
31 |         """Create mock rate limiter for tests."""
32 |         return MagicMock()
   |
   = help: Add return type annotation

tests/infrastructure/source_control/test_github_adapter.py:35:9: ANN201 Missing return type annotation for public function `github_adapter`
   |
34 |     @pytest.fixture
35 |     def github_adapter(self, mock_logger, mock_rate_limiter):
   |         ^^^^^^^^^^^^^^ ANN201
36 |         """Create GitHub adapter instance for tests."""
37 |         with patch("repo_organizer.infrastructure.source_control.github_adapter.GitHubService") as mock_service:
   |
   = help: Add return type annotation

tests/infrastructure/source_control/test_github_adapter.py:35:30: ANN001 Missing type annotation for function argument `mock_logger`
   |
34 |     @pytest.fixture
35 |     def github_adapter(self, mock_logger, mock_rate_limiter):
   |                              ^^^^^^^^^^^ ANN001
36 |         """Create GitHub adapter instance for tests."""
37 |         with patch("repo_organizer.infrastructure.source_control.github_adapter.GitHubService") as mock_service:
   |

tests/infrastructure/source_control/test_github_adapter.py:35:43: ANN001 Missing type annotation for function argument `mock_rate_limiter`
   |
34 |     @pytest.fixture
35 |     def github_adapter(self, mock_logger, mock_rate_limiter):
   |                                           ^^^^^^^^^^^^^^^^^ ANN001
36 |         """Create GitHub adapter instance for tests."""
37 |         with patch("repo_organizer.infrastructure.source_control.github_adapter.GitHubService") as mock_service:
   |

tests/infrastructure/source_control/test_github_adapter.py:37:89: E501 Line too long (112 > 88)
   |
35 |     def github_adapter(self, mock_logger, mock_rate_limiter):
36 |         """Create GitHub adapter instance for tests."""
37 |         with patch("repo_organizer.infrastructure.source_control.github_adapter.GitHubService") as mock_service:
   |                                                                                         ^^^^^^^^^^^^^^^^^^^^^^^^ E501
38 |             return GitHubAdapter(
39 |                 github_service=mock_service(),
   |

tests/infrastructure/source_control/test_github_adapter.py:44:9: ANN201 Missing return type annotation for public function `test_list_repositories_success`
   |
42 |             )
43 |
44 |     def test_list_repositories_success(self, github_adapter, mock_logger):
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ANN201
45 |         """Test list_repositories successfully retrieves repositories."""
46 |         # Arrange
   |
   = help: Add return type annotation: `None`

tests/infrastructure/source_control/test_github_adapter.py:44:46: ANN001 Missing type annotation for function argument `github_adapter`
   |
42 |             )
43 |
44 |     def test_list_repositories_success(self, github_adapter, mock_logger):
   |                                              ^^^^^^^^^^^^^^ ANN001
45 |         """Test list_repositories successfully retrieves repositories."""
46 |         # Arrange
   |

tests/infrastructure/source_control/test_github_adapter.py:44:62: ANN001 Missing type annotation for function argument `mock_logger`
   |
42 |             )
43 |
44 |     def test_list_repositories_success(self, github_adapter, mock_logger):
   |                                                              ^^^^^^^^^^^ ANN001
45 |         """Test list_repositories successfully retrieves repositories."""
46 |         # Arrange
   |

tests/infrastructure/source_control/test_github_adapter.py:91:9: ANN201 Missing return type annotation for public function `test_list_repositories_wrong_owner`
   |
89 |         )
90 |
91 |     def test_list_repositories_wrong_owner(self, github_adapter, mock_logger):
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ANN201
92 |         """Test list_repositories returns empty list for wrong owner."""
93 |         # Arrange
   |
   = help: Add return type annotation: `None`

tests/infrastructure/source_control/test_github_adapter.py:91:50: ANN001 Missing type annotation for function argument `github_adapter`
   |
89 |         )
90 |
91 |     def test_list_repositories_wrong_owner(self, github_adapter, mock_logger):
   |                                                  ^^^^^^^^^^^^^^ ANN001
92 |         """Test list_repositories returns empty list for wrong owner."""
93 |         # Arrange
   |

tests/infrastructure/source_control/test_github_adapter.py:91:66: ANN001 Missing type annotation for function argument `mock_logger`
   |
89 |         )
90 |
91 |     def test_list_repositories_wrong_owner(self, github_adapter, mock_logger):
   |                                                                  ^^^^^^^^^^^ ANN001
92 |         """Test list_repositories returns empty list for wrong owner."""
93 |         # Arrange
   |

tests/infrastructure/source_control/test_github_adapter.py:106:9: ANN201 Missing return type annotation for public function `test_list_repositories_exception`
    |
104 |         )
105 |
106 |     def test_list_repositories_exception(self, github_adapter, mock_logger):
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ANN201
107 |         """Test list_repositories handles exceptions gracefully."""
108 |         # Arrange
    |
    = help: Add return type annotation: `None`

tests/infrastructure/source_control/test_github_adapter.py:106:48: ANN001 Missing type annotation for function argument `github_adapter`
    |
104 |         )
105 |
106 |     def test_list_repositories_exception(self, github_adapter, mock_logger):
    |                                                ^^^^^^^^^^^^^^ ANN001
107 |         """Test list_repositories handles exceptions gracefully."""
108 |         # Arrange
    |

tests/infrastructure/source_control/test_github_adapter.py:106:64: ANN001 Missing type annotation for function argument `mock_logger`
    |
104 |         )
105 |
106 |     def test_list_repositories_exception(self, github_adapter, mock_logger):
    |                                                                ^^^^^^^^^^^ ANN001
107 |         """Test list_repositories handles exceptions gracefully."""
108 |         # Arrange
    |

tests/infrastructure/source_control/test_github_adapter.py:121:9: ANN201 Missing return type annotation for public function `test_fetch_languages`
    |
119 |         )
120 |
121 |     def test_fetch_languages(self, github_adapter, mock_logger):
    |         ^^^^^^^^^^^^^^^^^^^^ ANN201
122 |         """Test fetch_languages successfully retrieves language breakdown."""
123 |         # Arrange
    |
    = help: Add return type annotation: `None`

tests/infrastructure/source_control/test_github_adapter.py:121:36: ANN001 Missing type annotation for function argument `github_adapter`
    |
119 |         )
120 |
121 |     def test_fetch_languages(self, github_adapter, mock_logger):
    |                                    ^^^^^^^^^^^^^^ ANN001
122 |         """Test fetch_languages successfully retrieves language breakdown."""
123 |         # Arrange
    |

tests/infrastructure/source_control/test_github_adapter.py:121:52: ANN001 Missing type annotation for function argument `mock_logger`
    |
119 |         )
120 |
121 |     def test_fetch_languages(self, github_adapter, mock_logger):
    |                                                    ^^^^^^^^^^^ ANN001
122 |         """Test fetch_languages successfully retrieves language breakdown."""
123 |         # Arrange
    |

tests/infrastructure/source_control/test_github_adapter.py:157:9: ANN201 Missing return type annotation for public function `test_fetch_languages_exception`
    |
155 |         mock_logger.log.assert_called_with("Fetching languages for test-repo", "info")
156 |
157 |     def test_fetch_languages_exception(self, github_adapter, mock_logger):
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ANN201
158 |         """Test fetch_languages handles exceptions gracefully."""
159 |         # Arrange
    |
    = help: Add return type annotation: `None`

tests/infrastructure/source_control/test_github_adapter.py:157:46: ANN001 Missing type annotation for function argument `github_adapter`
    |
155 |         mock_logger.log.assert_called_with("Fetching languages for test-repo", "info")
156 |
157 |     def test_fetch_languages_exception(self, github_adapter, mock_logger):
    |                                              ^^^^^^^^^^^^^^ ANN001
158 |         """Test fetch_languages handles exceptions gracefully."""
159 |         # Arrange
    |

tests/infrastructure/source_control/test_github_adapter.py:157:62: ANN001 Missing type annotation for function argument `mock_logger`
    |
155 |         mock_logger.log.assert_called_with("Fetching languages for test-repo", "info")
156 |
157 |     def test_fetch_languages_exception(self, github_adapter, mock_logger):
    |                                                              ^^^^^^^^^^^ ANN001
158 |         """Test fetch_languages handles exceptions gracefully."""
159 |         # Arrange
    |

tests/infrastructure/source_control/test_github_adapter.py:182:9: ANN201 Missing return type annotation for public function `test_recent_commits`
    |
180 |         )
181 |
182 |     def test_recent_commits(self, github_adapter, mock_logger):
    |         ^^^^^^^^^^^^^^^^^^^ ANN201
183 |         """Test recent_commits handles GitHub API data."""
184 |         # Arrange
    |
    = help: Add return type annotation: `None`

tests/infrastructure/source_control/test_github_adapter.py:182:35: ANN001 Missing type annotation for function argument `github_adapter`
    |
180 |         )
181 |
182 |     def test_recent_commits(self, github_adapter, mock_logger):
    |                                   ^^^^^^^^^^^^^^ ANN001
183 |         """Test recent_commits handles GitHub API data."""
184 |         # Arrange
    |

tests/infrastructure/source_control/test_github_adapter.py:182:51: ANN001 Missing type annotation for function argument `mock_logger`
    |
180 |         )
181 |
182 |     def test_recent_commits(self, github_adapter, mock_logger):
    |                                                   ^^^^^^^^^^^ ANN001
183 |         """Test recent_commits handles GitHub API data."""
184 |         # Arrange
    |

tests/infrastructure/source_control/test_github_adapter.py:215:9: ANN201 Missing return type annotation for public function `test_contributors`
    |
213 |         mock_logger.log.assert_any_call("Fetching recent commits for test-repo", "info")
214 |
215 |     def test_contributors(self, github_adapter, mock_logger):
    |         ^^^^^^^^^^^^^^^^^ ANN201
216 |         """Test contributors handles GitHub API data."""
217 |         # Arrange
    |
    = help: Add return type annotation: `None`

tests/infrastructure/source_control/test_github_adapter.py:215:33: ANN001 Missing type annotation for function argument `github_adapter`
    |
213 |         mock_logger.log.assert_any_call("Fetching recent commits for test-repo", "info")
214 |
215 |     def test_contributors(self, github_adapter, mock_logger):
    |                                 ^^^^^^^^^^^^^^ ANN001
216 |         """Test contributors handles GitHub API data."""
217 |         # Arrange
    |

tests/infrastructure/source_control/test_github_adapter.py:215:49: ANN001 Missing type annotation for function argument `mock_logger`
    |
213 |         mock_logger.log.assert_any_call("Fetching recent commits for test-repo", "info")
214 |
215 |     def test_contributors(self, github_adapter, mock_logger):
    |                                                 ^^^^^^^^^^^ ANN001
216 |         """Test contributors handles GitHub API data."""
217 |         # Arrange
    |

tests/test_analysis.py:1:1: D200 One-line docstring should fit on one line
  |
1 | / """Tests for the repository analysis functionality.
2 | | """
  | |___^ D200
3 |
4 |   import json
  |
  = help: Reformat to one line

tests/test_analysis.py:21:9: ANN201 Missing return type annotation for public function `setUp`
   |
19 |     """Tests for the repository analysis functionality."""
20 |
21 |     def setUp(self):
   |         ^^^^^ ANN201
22 |         """Set up test fixtures."""
23 |         self.fixtures_dir = Path(__file__).parent / "fixtures"
   |
   = help: Add return type annotation: `None`

tests/test_analysis.py:28:9: PTH103 `os.makedirs()` should be replaced by `Path.mkdir(parents=True)`
   |
26 |         # Create a temporary output directory for test files
27 |         self.test_output_dir = Path(__file__).parent / "test_output"
28 |         os.makedirs(self.test_output_dir, exist_ok=True)
   |         ^^^^^^^^^^^ PTH103
29 |
30 |     def tearDown(self):
   |

tests/test_analysis.py:30:9: ANN201 Missing return type annotation for public function `tearDown`
   |
28 |         os.makedirs(self.test_output_dir, exist_ok=True)
29 |
30 |     def tearDown(self):
   |         ^^^^^^^^ ANN201
31 |         """Clean up test artifacts."""
32 |         import shutil
   |
   = help: Add return type annotation: `None`

tests/test_analysis.py:37:9: ANN202 Missing return type annotation for private function `_load_json_fixture`
   |
35 |             shutil.rmtree(self.test_output_dir)
36 |
37 |     def _load_json_fixture(self, filename):
   |         ^^^^^^^^^^^^^^^^^^ ANN202
38 |         """Load a JSON fixture file."""
39 |         with open(self.fixtures_dir / filename) as f:
   |
   = help: Add return type annotation

tests/test_analysis.py:37:34: ANN001 Missing type annotation for function argument `filename`
   |
35 |             shutil.rmtree(self.test_output_dir)
36 |
37 |     def _load_json_fixture(self, filename):
   |                                  ^^^^^^^^ ANN001
38 |         """Load a JSON fixture file."""
39 |         with open(self.fixtures_dir / filename) as f:
   |

tests/test_analysis.py:39:14: PTH123 `open()` should be replaced by `Path.open()`
   |
37 |     def _load_json_fixture(self, filename):
38 |         """Load a JSON fixture file."""
39 |         with open(self.fixtures_dir / filename) as f:
   |              ^^^^ PTH123
40 |             return json.load(f)
   |

tests/test_analysis.py:43:9: ANN201 Missing return type annotation for public function `test_llm_service_analysis`
   |
42 |     @patch("repo_organizer.infrastructure.analysis.llm_service.ChatAnthropic")
43 |     def test_llm_service_analysis(self, mock_anthropic):
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^ ANN201
44 |         """Test LLM service produces valid analysis."""
45 |         # Setup mock LLM response
   |
   = help: Add return type annotation: `None`

tests/test_analysis.py:43:41: ANN001 Missing type annotation for function argument `mock_anthropic`
   |
42 |     @patch("repo_organizer.infrastructure.analysis.llm_service.ChatAnthropic")
43 |     def test_llm_service_analysis(self, mock_anthropic):
   |                                         ^^^^^^^^^^^^^^ ANN001
44 |         """Test LLM service produces valid analysis."""
45 |         # Setup mock LLM response
   |

tests/test_analysis.py:50:89: E501 Line too long (108 > 88)
   |
48 |             {
49 |                 "repo_name": "youtube_playlist_organizer",
50 |                 "summary": "This repository contains a tool for organizing and managing YouTube playlists.",
   |                                                                                         ^^^^^^^^^^^^^^^^^^^^ E501
51 |                 "strengths": [
52 |                     "Provides a comprehensive set of playlist management features",
   |

tests/test_analysis.py:75:9: PT009 Use a regular `assert` instead of unittest-style `assertIsInstance`
   |
74 |         # Verify result
75 |         self.assertIsInstance(result, RepoAnalysis)
   |         ^^^^^^^^^^^^^^^^^^^^^ PT009
76 |         self.assertEqual(result.repo_name, "youtube_playlist_organizer")
77 |         self.assertIn("YouTube playlists", result.summary)
   |
   = help: Replace `assertIsInstance(...)` with `assert ...`

tests/test_analysis.py:76:9: PT009 Use a regular `assert` instead of unittest-style `assertEqual`
   |
74 |         # Verify result
75 |         self.assertIsInstance(result, RepoAnalysis)
76 |         self.assertEqual(result.repo_name, "youtube_playlist_organizer")
   |         ^^^^^^^^^^^^^^^^ PT009
77 |         self.assertIn("YouTube playlists", result.summary)
78 |         self.assertIsInstance(result.recommendations[0], RepoRecommendation)
   |
   = help: Replace `assertEqual(...)` with `assert ...`

tests/test_analysis.py:77:9: PT009 Use a regular `assert` instead of unittest-style `assertIn`
   |
75 |         self.assertIsInstance(result, RepoAnalysis)
76 |         self.assertEqual(result.repo_name, "youtube_playlist_organizer")
77 |         self.assertIn("YouTube playlists", result.summary)
   |         ^^^^^^^^^^^^^ PT009
78 |         self.assertIsInstance(result.recommendations[0], RepoRecommendation)
79 |         self.assertEqual(result.estimated_value, "Medium")
   |
   = help: Replace `assertIn(...)` with `assert ...`

tests/test_analysis.py:78:9: PT009 Use a regular `assert` instead of unittest-style `assertIsInstance`
   |
76 |         self.assertEqual(result.repo_name, "youtube_playlist_organizer")
77 |         self.assertIn("YouTube playlists", result.summary)
78 |         self.assertIsInstance(result.recommendations[0], RepoRecommendation)
   |         ^^^^^^^^^^^^^^^^^^^^^ PT009
79 |         self.assertEqual(result.estimated_value, "Medium")
   |
   = help: Replace `assertIsInstance(...)` with `assert ...`

tests/test_analysis.py:79:9: PT009 Use a regular `assert` instead of unittest-style `assertEqual`
   |
77 |         self.assertIn("YouTube playlists", result.summary)
78 |         self.assertIsInstance(result.recommendations[0], RepoRecommendation)
79 |         self.assertEqual(result.estimated_value, "Medium")
   |         ^^^^^^^^^^^^^^^^ PT009
80 |
81 |     @patch("repo_organizer.domain.analysis.repository_analyzer_service.AnalyzerPort")
   |
   = help: Replace `assertEqual(...)` with `assert ...`

tests/test_analysis.py:85:9: ANN201 Missing return type annotation for public function `test_repository_analyzer_service`
   |
83 |         "repo_organizer.domain.analysis.repository_analyzer_service.SourceControlPort",
84 |     )
85 |     def test_repository_analyzer_service(self, mock_source_control, mock_analyzer_port):
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ANN201
86 |         """Test repository analyzer service end-to-end."""
87 |         # Setup mock analyzer port
   |
   = help: Add return type annotation: `None`

tests/test_analysis.py:85:48: ANN001 Missing type annotation for function argument `mock_source_control`
   |
83 |         "repo_organizer.domain.analysis.repository_analyzer_service.SourceControlPort",
84 |     )
85 |     def test_repository_analyzer_service(self, mock_source_control, mock_analyzer_port):
   |                                                ^^^^^^^^^^^^^^^^^^^ ANN001
86 |         """Test repository analyzer service end-to-end."""
87 |         # Setup mock analyzer port
   |

tests/test_analysis.py:85:69: ANN001 Missing type annotation for function argument `mock_analyzer_port`
   |
83 |         "repo_organizer.domain.analysis.repository_analyzer_service.SourceControlPort",
84 |     )
85 |     def test_repository_analyzer_service(self, mock_source_control, mock_analyzer_port):
   |                                                                     ^^^^^^^^^^^^^^^^^^ ANN001
86 |         """Test repository analyzer service end-to-end."""
87 |         # Setup mock analyzer port
   |

tests/test_analysis.py:90:89: E501 Line too long (101 > 88)
   |
88 |         mock_analysis = RepoAnalysis(
89 |             repo_name="youtube_playlist_organizer",
90 |             summary="This repository contains a tool for organizing and managing YouTube playlists.",
   |                                                                                         ^^^^^^^^^^^^^ E501
91 |             strengths=["Provides a comprehensive set of playlist management features"],
92 |             weaknesses=["Limited community engagement"],
   |

tests/test_analysis.py:133:13: ANN202 Missing return type annotation for private function `mock_to_pydantic`
    |
132 |         # Add to_pydantic method to the RepoAnalysis model
133 |         def mock_to_pydantic(self):
    |             ^^^^^^^^^^^^^^^^ ANN202
134 |             # Return an infrastructure pydantic model
135 |             infra_model = RepoAnalysis(
    |
    = help: Add return type annotation

tests/test_analysis.py:133:30: ANN001 Missing type annotation for function argument `self`
    |
132 |         # Add to_pydantic method to the RepoAnalysis model
133 |         def mock_to_pydantic(self):
    |                              ^^^^ ANN001
134 |             # Return an infrastructure pydantic model
135 |             infra_model = RepoAnalysis(
    |

tests/test_analysis.py:154:20: RET504 Unnecessary assignment to `infra_model` before `return` statement
    |
152 |                 action_reasoning=getattr(self, "action_reasoning", "Default reasoning"),
153 |             )
154 |             return infra_model
    |                    ^^^^^^^^^^^ RET504
155 |
156 |         # Apply the mock method
    |
    = help: Remove unnecessary assignment

tests/test_analysis.py:174:23: ANN202 Missing return type annotation for private function `mock_write_report`
    |
173 |             # Patch the write_report method to avoid file writing issues
174 |             async def mock_write_report(repo_name, analysis):
    |                       ^^^^^^^^^^^^^^^^^ ANN202
175 |                 # Write a simplified report
176 |                 report_path = self.test_output_dir / f"{repo_name}.json"
    |
    = help: Add return type annotation: `None`

tests/test_analysis.py:174:41: ANN001 Missing type annotation for function argument `repo_name`
    |
173 |             # Patch the write_report method to avoid file writing issues
174 |             async def mock_write_report(repo_name, analysis):
    |                                         ^^^^^^^^^ ANN001
175 |                 # Write a simplified report
176 |                 report_path = self.test_output_dir / f"{repo_name}.json"
    |

tests/test_analysis.py:174:52: ANN001 Missing type annotation for function argument `analysis`
    |
173 |             # Patch the write_report method to avoid file writing issues
174 |             async def mock_write_report(repo_name, analysis):
    |                                                    ^^^^^^^^ ANN001
175 |                 # Write a simplified report
176 |                 report_path = self.test_output_dir / f"{repo_name}.json"
    |

tests/test_analysis.py:177:22: ASYNC230 Async functions should not open files with blocking methods like `open`
    |
175 |                 # Write a simplified report
176 |                 report_path = self.test_output_dir / f"{repo_name}.json"
177 |                 with open(report_path, "w") as f:
    |                      ^^^^ ASYNC230
178 |                     json.dump(
179 |                         {
    |

tests/test_analysis.py:177:22: PTH123 `open()` should be replaced by `Path.open()`
    |
175 |                 # Write a simplified report
176 |                 report_path = self.test_output_dir / f"{repo_name}.json"
177 |                 with open(report_path, "w") as f:
    |                      ^^^^ PTH123
178 |                     json.dump(
179 |                         {
    |

tests/test_analysis.py:200:13: PT009 Use a regular `assert` instead of unittest-style `assertIsNotNone`
    |
199 |             # Verify result
200 |             self.assertIsNotNone(result)
    |             ^^^^^^^^^^^^^^^^^^^^ PT009
201 |             self.assertEqual(result.repo_name, "youtube_playlist_organizer")
202 |             self.assertEqual(result.estimated_value, "Medium")
    |
    = help: Replace `assertIsNotNone(...)` with `assert ...`

tests/test_analysis.py:201:13: PT009 Use a regular `assert` instead of unittest-style `assertEqual`
    |
199 |             # Verify result
200 |             self.assertIsNotNone(result)
201 |             self.assertEqual(result.repo_name, "youtube_playlist_organizer")
    |             ^^^^^^^^^^^^^^^^ PT009
202 |             self.assertEqual(result.estimated_value, "Medium")
    |
    = help: Replace `assertEqual(...)` with `assert ...`

tests/test_analysis.py:202:13: PT009 Use a regular `assert` instead of unittest-style `assertEqual`
    |
200 |             self.assertIsNotNone(result)
201 |             self.assertEqual(result.repo_name, "youtube_playlist_organizer")
202 |             self.assertEqual(result.estimated_value, "Medium")
    |             ^^^^^^^^^^^^^^^^ PT009
203 |
204 |             # Verify report file was created
    |
    = help: Replace `assertEqual(...)` with `assert ...`

tests/test_analysis.py:206:13: PT009 Use a regular `assert` instead of unittest-style `assertTrue`
    |
204 |             # Verify report file was created
205 |             report_path = self.test_output_dir / "youtube_playlist_organizer.json"
206 |             self.assertTrue(report_path.exists())
    |             ^^^^^^^^^^^^^^^ PT009
207 |
208 |             # Verify report content
    |
    = help: Replace `assertTrue(...)` with `assert ...`

tests/test_analysis.py:209:18: PTH123 `open()` should be replaced by `Path.open()`
    |
208 |             # Verify report content
209 |             with open(report_path) as f:
    |                  ^^^^ PTH123
210 |                 content = json.load(f)
211 |                 self.assertEqual(content["repo_name"], "youtube_playlist_organizer")
    |

tests/test_analysis.py:211:17: PT009 Use a regular `assert` instead of unittest-style `assertEqual`
    |
209 |             with open(report_path) as f:
210 |                 content = json.load(f)
211 |                 self.assertEqual(content["repo_name"], "youtube_playlist_organizer")
    |                 ^^^^^^^^^^^^^^^^ PT009
212 |                 self.assertEqual(content["estimated_value"], "Medium")
213 |                 self.assertIn(
    |
    = help: Replace `assertEqual(...)` with `assert ...`

tests/test_analysis.py:212:17: PT009 Use a regular `assert` instead of unittest-style `assertEqual`
    |
210 |                 content = json.load(f)
211 |                 self.assertEqual(content["repo_name"], "youtube_playlist_organizer")
212 |                 self.assertEqual(content["estimated_value"], "Medium")
    |                 ^^^^^^^^^^^^^^^^ PT009
213 |                 self.assertIn(
214 |                     "Add comprehensive test suite",
    |
    = help: Replace `assertEqual(...)` with `assert ...`

tests/test_analysis.py:213:17: PT009 Use a regular `assert` instead of unittest-style `assertIn`
    |
211 |                 self.assertEqual(content["repo_name"], "youtube_playlist_organizer")
212 |                 self.assertEqual(content["estimated_value"], "Medium")
213 |                 self.assertIn(
    |                 ^^^^^^^^^^^^^ PT009
214 |                     "Add comprehensive test suite",
215 |                     content["recommendations"][0]["recommendation"],
    |
    = help: Replace `assertIn(...)` with `assert ...`

tests/test_application.py:15:29: RUF003 Comment contains ambiguous `–` (EN DASH). Did you mean `-` (HYPHEN-MINUS)?
   |
14 | # ---------------------------------------------------------------------------
15 | # In-memory fakes for ports – no external I/O.
   |                             ^ RUF003
16 | # ---------------------------------------------------------------------------
   |

tests/test_application.py:22:9: ANN204 Missing return type annotation for special method `__init__`
   |
20 |     """Returns a static list of repositories and synthetic language stats."""
21 |
22 |     def __init__(self, repos: Sequence[Repository]):
   |         ^^^^^^^^ ANN204
23 |         self._repos = list(repos)
24 |         self.logger = None  # Add logger attribute
   |
   = help: Add return type annotation: `None`

tests/test_application.py:28:9: ANN202 Missing return type annotation for private function `list_repositories`
   |
26 |     # --- Port implementations --------------------------------------------
27 |
28 |     def list_repositories(self, owner: str, *, limit: int | None = None):
   |         ^^^^^^^^^^^^^^^^^ ANN202
29 |         return self._repos[: limit or None]
   |
   = help: Add return type annotation

tests/test_application.py:28:33: ARG002 Unused method argument: `owner`
   |
26 |     # --- Port implementations --------------------------------------------
27 |
28 |     def list_repositories(self, owner: str, *, limit: int | None = None):
   |                                 ^^^^^ ARG002
29 |         return self._repos[: limit or None]
   |

tests/test_application.py:31:9: ANN202 Missing return type annotation for private function `fetch_languages`
   |
29 |         return self._repos[: limit or None]
30 |
31 |     def fetch_languages(self, repo: Repository):
   |         ^^^^^^^^^^^^^^^ ANN202
32 |         return [LanguageBreakdown("Python", 100.0)]
   |
   = help: Add return type annotation

tests/test_application.py:31:31: ARG002 Unused method argument: `repo`
   |
29 |         return self._repos[: limit or None]
30 |
31 |     def fetch_languages(self, repo: Repository):
   |                               ^^^^ ARG002
32 |         return [LanguageBreakdown("Python", 100.0)]
   |

tests/test_application.py:34:9: ANN202 Missing return type annotation for private function `recent_commits`
   |
32 |         return [LanguageBreakdown("Python", 100.0)]
33 |
34 |     def recent_commits(self, repo: Repository, *, limit: int = 10):
   |         ^^^^^^^^^^^^^^ ANN202
35 |         return []  # Return empty list instead of raising NotImplementedError
   |
   = help: Add return type annotation

tests/test_application.py:34:30: ARG002 Unused method argument: `repo`
   |
32 |         return [LanguageBreakdown("Python", 100.0)]
33 |
34 |     def recent_commits(self, repo: Repository, *, limit: int = 10):
   |                              ^^^^ ARG002
35 |         return []  # Return empty list instead of raising NotImplementedError
   |

tests/test_application.py:34:51: ARG002 Unused method argument: `limit`
   |
32 |         return [LanguageBreakdown("Python", 100.0)]
33 |
34 |     def recent_commits(self, repo: Repository, *, limit: int = 10):
   |                                                   ^^^^^ ARG002
35 |         return []  # Return empty list instead of raising NotImplementedError
   |

tests/test_application.py:37:9: ANN202 Missing return type annotation for private function `contributors`
   |
35 |         return []  # Return empty list instead of raising NotImplementedError
36 |
37 |     def contributors(self, repo: Repository):
   |         ^^^^^^^^^^^^ ANN202
38 |         return []  # Return empty list instead of raising NotImplementedError
   |
   = help: Add return type annotation

tests/test_application.py:37:28: ARG002 Unused method argument: `repo`
   |
35 |         return []  # Return empty list instead of raising NotImplementedError
36 |
37 |     def contributors(self, repo: Repository):
   |                            ^^^^ ARG002
38 |         return []  # Return empty list instead of raising NotImplementedError
   |

tests/test_application.py:40:9: ANN202 Missing return type annotation for private function `get_repository_readme`
   |
38 |         return []  # Return empty list instead of raising NotImplementedError
39 |
40 |     def get_repository_readme(self, repo_name: str):
   |         ^^^^^^^^^^^^^^^^^^^^^ ANN202
41 |         """Get a fake README for the repository."""
42 |         return f"# {repo_name}\n\nThis is a test repository."
   |
   = help: Add return type annotation: `str`

tests/test_application.py:48:9: ANN202 Missing return type annotation for private function `analyze`
   |
46 |     """Produces a trivial RepoAnalysis for every repository."""
47 |
48 |     def analyze(self, repo_data):  # noqa: ANN001
   |         ^^^^^^^ ANN202
49 |         repo_name = repo_data.get("repo_name") or repo_data.get("name", "unknown")
50 |         return RepoAnalysis(
   |
   = help: Add return type annotation

tests/test_application.py:64:5: ANN201 Missing return type annotation for public function `test_analyze_repositories`
   |
64 | def test_analyze_repositories():
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^ ANN201
65 |     repos = [
66 |         Repository(
   |
   = help: Add return type annotation: `None`

Found 1159 errors.
No fixes available (276 hidden fixes can be enabled with the `--unsafe-fixes` option).
