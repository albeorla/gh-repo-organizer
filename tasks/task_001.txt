# Task ID: 1
# Title: Refactor Services to DDD Infrastructure Layer
# Status: pending
# Dependencies: None
# Priority: high
# Description: Move existing services to their proper locations in the infrastructure layer according to DDD principles
# Details:
Move `services/llm_service.py` to `infrastructure/analysis/llm_service.py` and `services/github_service.py` to `infrastructure/source_control/github_service.py`. Ensure imports are updated throughout the codebase. Create appropriate interfaces in the domain layer that these services implement. Update any direct references to these services in the codebase.

# Test Strategy:
Create unit tests to verify the services function correctly in their new locations. Implement integration tests to ensure the moved services still interact correctly with other components.

# Subtasks:
## 1. Create domain interfaces for services [pending]
### Dependencies: None
### Description: Define interfaces in the domain layer that will be implemented by the infrastructure services
### Details:
Create `domain/analysis/llm_interface.py` and `domain/source_control/source_control_interface.py` files. Define abstract base classes with appropriate methods that match the current functionality in the existing services. Use `@abstractmethod` decorators from the `abc` module for all interface methods. The LLM interface should define methods for text analysis and generation, while the source control interface should define methods for repository interaction.

## 2. Refactor LLM service to infrastructure layer [pending]
### Dependencies: 1.1
### Description: Move the LLM service to the infrastructure layer and implement the domain interface
### Details:
Create the directory structure `infrastructure/analysis/` if it doesn't exist. Move `services/llm_service.py` to `infrastructure/analysis/llm_service.py`. Update the class to implement the `LLMInterface` from the domain layer. Add the necessary imports at the top of the file. Ensure the implementation satisfies all the interface requirements. If there are any implementation-specific methods that aren't part of the interface, consider whether they should be added to the interface or kept as internal functionality.

## 3. Refactor GitHub service to infrastructure layer [pending]
### Dependencies: 1.1
### Description: Move the GitHub service to the infrastructure layer and implement the domain interface
### Details:
Create the directory structure `infrastructure/source_control/` if it doesn't exist. Move `services/github_service.py` to `infrastructure/source_control/github_service.py`. Update the class to implement the `SourceControlInterface` from the domain layer. Add the necessary imports at the top of the file. Ensure the implementation satisfies all the interface requirements. Make sure any GitHub-specific functionality is properly encapsulated while still adhering to the interface contract.

## 4. Update service references throughout the codebase [pending]
### Dependencies: 1.2, 1.3
### Description: Update all imports and references to the moved services in the entire codebase
### Details:
Use a tool like grep or your IDE's search functionality to find all imports of the old service paths (`from services.llm_service import` and `from services.github_service import`). Update these imports to reference the new paths (`from infrastructure.analysis.llm_service import` and `from infrastructure.source_control.github_service import`). For any direct instantiation of these services, consider whether to use dependency injection instead, injecting the interface rather than the concrete implementation. Run all tests to ensure the refactoring hasn't broken any functionality. Update any affected documentation or configuration files.

