# Task ID: 20
# Title: Remove duplicate GitHub service implementation
# Status: in-progress
# Dependencies: 14
# Priority: medium
# Description: Remove the duplicate GitHub service implementation in the services directory
# Details:
The file src/repo_organizer/services/github_service.py is a duplicate of src/repo_organizer/infrastructure/source_control/github_service.py. According to the DDD architecture, the version in the infrastructure layer is the correct placement. Remove the duplicate to simplify the codebase.

# Test Strategy:


# Subtasks:
## 1. Analyze code dependencies on the duplicate GitHub service [done]
### Dependencies: None
### Description: Identify all modules and components that import or use the duplicate GitHub service in the services directory
### Details:
Search through the codebase for any imports of 'src/repo_organizer/services/github_service.py'. Create a list of all files that depend on this module. For each dependency, determine whether it's importing specific functions, classes, or the entire module. This information will be crucial for the refactoring process to ensure all dependencies are properly updated when the duplicate is removed.

<info added on 2025-05-01T23:04:56.935Z>
Based on your analysis, I'll add these technical details to the subtask:

```
Analysis findings:
- Confirmed duplicate file: src/repo_organizer/services/github_service.py (768 lines)
- No direct imports of the duplicate file found in codebase
- All imports correctly reference infrastructure/source_control/github_service.py
- Key importing modules include:
  * bootstrap/application_factory.py
  * bootstrap/application_runner.py
  * services/__init__.py (re-exports the correct version)
  * services/repository_analyzer_service.py
  * infrastructure/source_control/github_adapter.py

Removal strategy:
1. Create git branch for safe removal
2. Delete src/repo_organizer/services/github_service.py
3. Run comprehensive test suite to verify no runtime dependencies
4. Check for any dynamic imports or string-based imports that static analysis might miss
5. Document removal in changelog

No refactoring of dependent modules required as all imports already reference the correct path.
```
</info added on 2025-05-01T23:04:56.935Z>

## 2. Update all imports to use the infrastructure implementation [done]
### Dependencies: 20.1
### Description: Modify all imports to reference the correct GitHub service in the infrastructure layer
### Details:
Using the dependency list from subtask 1, update all import statements in dependent files to use 'src/repo_organizer/infrastructure/source_control/github_service.py' instead of 'src/repo_organizer/services/github_service.py'. Ensure that any specific imports (like 'from services.github_service import X') are properly translated to the corresponding path in the infrastructure layer. Run tests after each file update to catch any issues early.

<info added on 2025-05-01T23:05:09.841Z>
After thorough verification, this subtask can be simplified or marked as completed:

The codebase has been analyzed and no import updates are actually needed. All modules are already correctly importing from `infrastructure/source_control/github_service.py`. The legacy path `services/github_service.py` is not referenced anywhere in the codebase.

To confirm this is correct:
1. Run a grep command to verify: `grep -r "from services.github_service import" --include="*.py" ./src`
2. Check the services/__init__.py file to confirm it properly re-exports from infrastructure
3. Validate with a static analysis tool like mypy that all imports resolve correctly

This task can be closed with no changes required, or repurposed to add documentation noting the correct import patterns for future development.
</info added on 2025-05-01T23:05:09.841Z>

## 3. Remove the duplicate GitHub service file [in-progress]
### Dependencies: 20.2
### Description: Delete the duplicate GitHub service file from the services directory after all dependencies have been updated
### Details:
Once all imports have been updated and verified to work correctly, remove the duplicate file at 'src/repo_organizer/services/github_service.py'. Run the full test suite to ensure the application still works correctly without the duplicate file. Update any documentation that might reference the old file location. If the services directory becomes empty after this removal, consider whether it should also be removed according to the project's architecture guidelines.

