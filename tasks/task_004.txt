# Task ID: 4
# Title: Refactor Application Layer with Dependency Injection
# Status: pending
# Dependencies: 2, 3
# Priority: medium
# Description: Refactor application layer components to use proper dependency injection and command/query separation
# Details:
Refactor `app/application_runner.py` to use proper dependency injection. Move `app/application_factory.py` to `application/factories.py`. Implement command/query separation in the application layer. Create command handlers and query handlers for different use cases. Implement a simple dependency injection container if needed.

# Test Strategy:
Write unit tests for application services using mocked dependencies. Create integration tests to verify the application layer correctly orchestrates domain and infrastructure components. Test command and query handlers separately.

# Subtasks:
## 1. Create Dependency Injection Container [pending]
### Dependencies: None
### Description: Implement a simple dependency injection container to manage application dependencies
### Details:
Create a new file `application/di_container.py` that implements a dependency injection container. The container should provide methods to register and resolve dependencies. Use a simple dictionary-based approach where dependencies are registered with a key and can be resolved later. Include methods like `register(key, factory)`, `resolve(key)`, and support for singleton vs transient registrations. This will serve as the foundation for the DI refactoring.

## 2. Move Application Factory to Application Package [pending]
### Dependencies: 4.1
### Description: Move application factory module to the correct location and refactor it to use the DI container
### Details:
Move `app/application_factory.py` to `application/factories.py`. Update the factory to use the new DI container for creating application components. The factory should register all required dependencies in the container and then resolve them when creating application components. Update any imports in other files that reference the old location. This ensures proper separation of concerns and prepares for further refactoring.

## 3. Implement Command and Query Interfaces [pending]
### Dependencies: 4.1
### Description: Create base interfaces and structures for command/query separation pattern
### Details:
Create new files in `application/commands/` and `application/queries/` directories. Implement base classes/interfaces: `Command`, `CommandHandler`, `CommandResult`, `Query`, `QueryHandler`, and `QueryResult`. Create a command/query dispatcher that uses the DI container to resolve the appropriate handler for a given command or query. The dispatcher should have methods like `dispatch_command(command)` and `dispatch_query(query)` that find and execute the corresponding handler.

## 4. Convert Existing Application Logic to Commands and Queries [pending]
### Dependencies: 4.2, 4.3
### Description: Refactor existing application logic into the command/query pattern
### Details:
Identify the main use cases in the current application and convert them to commands or queries. For write operations, create command classes in `application/commands/` with corresponding handlers. For read operations, create query classes in `application/queries/` with corresponding handlers. Each handler should follow the single responsibility principle and be registered in the DI container. For example, create `CreateUserCommand`, `CreateUserCommandHandler`, `GetUserByIdQuery`, `GetUserByIdQueryHandler`, etc.

## 5. Refactor Application Runner with DI and Command/Query Pattern [pending]
### Dependencies: 4.4
### Description: Update the application runner to use the DI container and command/query dispatcher
### Details:
Refactor `app/application_runner.py` to use the DI container for resolving dependencies. The runner should no longer directly instantiate components but should get them from the container. Update the runner to use the command/query dispatcher for executing application logic. Remove any direct dependencies on concrete implementations and instead depend on abstractions. Test the refactored application to ensure it works correctly with the new architecture.

